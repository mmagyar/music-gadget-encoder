
digiControl2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000434c  08005aa8  08005aa8  00015aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009df4  08009df4  00019df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009dfc  08009dfc  00019dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000028c  20000000  08009e04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000674  20000290  0800a090  00020290  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000904  0800a090  00020904  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000115a8  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000037b8  00000000  00000000  0003185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006844  00000000  00000000  00035014  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006b8  00000000  00000000  0003b858  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001638  00000000  00000000  0003bf10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000581d  00000000  00000000  0003d548  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000349a  00000000  00000000  00042d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000461ff  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000012b0  00000000  00000000  0004627c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000290 	.word	0x20000290
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005a90 	.word	0x08005a90

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000294 	.word	0x20000294
 80000fc:	08005a90 	.word	0x08005a90

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	1c10      	adds	r0, r2, #0
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	1c19      	adds	r1, r3, #0
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f001 f83d 	bl	800147c <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 ff97 	bl	8001340 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f001 f82f 	bl	800147c <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 f825 	bl	800147c <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ffb7 	bl	80013b4 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffad 	bl	80013b4 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_uldivmod>:
 8000468:	2b00      	cmp	r3, #0
 800046a:	d111      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 800046c:	2a00      	cmp	r2, #0
 800046e:	d10f      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 8000470:	2900      	cmp	r1, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_uldivmod+0xe>
 8000474:	2800      	cmp	r0, #0
 8000476:	d002      	beq.n	800047e <__aeabi_uldivmod+0x16>
 8000478:	2100      	movs	r1, #0
 800047a:	43c9      	mvns	r1, r1
 800047c:	1c08      	adds	r0, r1, #0
 800047e:	b407      	push	{r0, r1, r2}
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <__aeabi_uldivmod+0x24>)
 8000482:	a102      	add	r1, pc, #8	; (adr r1, 800048c <__aeabi_uldivmod+0x24>)
 8000484:	1840      	adds	r0, r0, r1
 8000486:	9002      	str	r0, [sp, #8]
 8000488:	bd03      	pop	{r0, r1, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	ffffff5d 	.word	0xffffff5d
 8000490:	b403      	push	{r0, r1}
 8000492:	4668      	mov	r0, sp
 8000494:	b501      	push	{r0, lr}
 8000496:	9802      	ldr	r0, [sp, #8]
 8000498:	f000 f84e 	bl	8000538 <__udivmoddi4>
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	469e      	mov	lr, r3
 80004a0:	b002      	add	sp, #8
 80004a2:	bc0c      	pop	{r2, r3}
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_lmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46ce      	mov	lr, r9
 80004ac:	4647      	mov	r7, r8
 80004ae:	0415      	lsls	r5, r2, #16
 80004b0:	0c2d      	lsrs	r5, r5, #16
 80004b2:	002e      	movs	r6, r5
 80004b4:	b580      	push	{r7, lr}
 80004b6:	0407      	lsls	r7, r0, #16
 80004b8:	0c14      	lsrs	r4, r2, #16
 80004ba:	0c3f      	lsrs	r7, r7, #16
 80004bc:	4699      	mov	r9, r3
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	437e      	muls	r6, r7
 80004c2:	435d      	muls	r5, r3
 80004c4:	4367      	muls	r7, r4
 80004c6:	4363      	muls	r3, r4
 80004c8:	197f      	adds	r7, r7, r5
 80004ca:	0c34      	lsrs	r4, r6, #16
 80004cc:	19e4      	adds	r4, r4, r7
 80004ce:	469c      	mov	ip, r3
 80004d0:	42a5      	cmp	r5, r4
 80004d2:	d903      	bls.n	80004dc <__aeabi_lmul+0x34>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	025b      	lsls	r3, r3, #9
 80004d8:	4698      	mov	r8, r3
 80004da:	44c4      	add	ip, r8
 80004dc:	464b      	mov	r3, r9
 80004de:	4351      	muls	r1, r2
 80004e0:	4343      	muls	r3, r0
 80004e2:	0436      	lsls	r6, r6, #16
 80004e4:	0c36      	lsrs	r6, r6, #16
 80004e6:	0c25      	lsrs	r5, r4, #16
 80004e8:	0424      	lsls	r4, r4, #16
 80004ea:	4465      	add	r5, ip
 80004ec:	19a4      	adds	r4, r4, r6
 80004ee:	1859      	adds	r1, r3, r1
 80004f0:	1949      	adds	r1, r1, r5
 80004f2:	0020      	movs	r0, r4
 80004f4:	bc0c      	pop	{r2, r3}
 80004f6:	4690      	mov	r8, r2
 80004f8:	4699      	mov	r9, r3
 80004fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004fc <__aeabi_d2uiz>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2200      	movs	r2, #0
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <__aeabi_d2uiz+0x38>)
 8000502:	0004      	movs	r4, r0
 8000504:	000d      	movs	r5, r1
 8000506:	f7ff ffa5 	bl	8000454 <__aeabi_dcmpge>
 800050a:	2800      	cmp	r0, #0
 800050c:	d104      	bne.n	8000518 <__aeabi_d2uiz+0x1c>
 800050e:	0020      	movs	r0, r4
 8000510:	0029      	movs	r1, r5
 8000512:	f001 fdab 	bl	800206c <__aeabi_d2iz>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <__aeabi_d2uiz+0x38>)
 800051a:	2200      	movs	r2, #0
 800051c:	0020      	movs	r0, r4
 800051e:	0029      	movs	r1, r5
 8000520:	f001 fa8e 	bl	8001a40 <__aeabi_dsub>
 8000524:	f001 fda2 	bl	800206c <__aeabi_d2iz>
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	061b      	lsls	r3, r3, #24
 800052c:	469c      	mov	ip, r3
 800052e:	4460      	add	r0, ip
 8000530:	e7f1      	b.n	8000516 <__aeabi_d2uiz+0x1a>
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	41e00000 	.word	0x41e00000

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	b083      	sub	sp, #12
 8000548:	000d      	movs	r5, r1
 800054a:	4692      	mov	sl, r2
 800054c:	4699      	mov	r9, r3
 800054e:	428b      	cmp	r3, r1
 8000550:	d82f      	bhi.n	80005b2 <__udivmoddi4+0x7a>
 8000552:	d02c      	beq.n	80005ae <__udivmoddi4+0x76>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f001 fe54 	bl	8002204 <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f001 fe4f 	bl	8002204 <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	469b      	mov	fp, r3
 800056e:	d500      	bpl.n	8000572 <__udivmoddi4+0x3a>
 8000570:	e074      	b.n	800065c <__udivmoddi4+0x124>
 8000572:	4653      	mov	r3, sl
 8000574:	465a      	mov	r2, fp
 8000576:	4093      	lsls	r3, r2
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4642      	mov	r2, r8
 800057e:	4093      	lsls	r3, r2
 8000580:	001e      	movs	r6, r3
 8000582:	42af      	cmp	r7, r5
 8000584:	d829      	bhi.n	80005da <__udivmoddi4+0xa2>
 8000586:	d026      	beq.n	80005d6 <__udivmoddi4+0x9e>
 8000588:	465b      	mov	r3, fp
 800058a:	1ba4      	subs	r4, r4, r6
 800058c:	41bd      	sbcs	r5, r7
 800058e:	2b00      	cmp	r3, #0
 8000590:	da00      	bge.n	8000594 <__udivmoddi4+0x5c>
 8000592:	e079      	b.n	8000688 <__udivmoddi4+0x150>
 8000594:	2200      	movs	r2, #0
 8000596:	2300      	movs	r3, #0
 8000598:	9200      	str	r2, [sp, #0]
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2301      	movs	r3, #1
 800059e:	465a      	mov	r2, fp
 80005a0:	4093      	lsls	r3, r2
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2301      	movs	r3, #1
 80005a6:	4642      	mov	r2, r8
 80005a8:	4093      	lsls	r3, r2
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	e019      	b.n	80005e2 <__udivmoddi4+0xaa>
 80005ae:	4282      	cmp	r2, r0
 80005b0:	d9d0      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2300      	movs	r3, #0
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <__udivmoddi4+0x8c>
 80005c0:	601c      	str	r4, [r3, #0]
 80005c2:	605d      	str	r5, [r3, #4]
 80005c4:	9800      	ldr	r0, [sp, #0]
 80005c6:	9901      	ldr	r1, [sp, #4]
 80005c8:	b003      	add	sp, #12
 80005ca:	bc3c      	pop	{r2, r3, r4, r5}
 80005cc:	4690      	mov	r8, r2
 80005ce:	4699      	mov	r9, r3
 80005d0:	46a2      	mov	sl, r4
 80005d2:	46ab      	mov	fp, r5
 80005d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d9d6      	bls.n	8000588 <__udivmoddi4+0x50>
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	9200      	str	r2, [sp, #0]
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	4643      	mov	r3, r8
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0e8      	beq.n	80005ba <__udivmoddi4+0x82>
 80005e8:	07fb      	lsls	r3, r7, #31
 80005ea:	0872      	lsrs	r2, r6, #1
 80005ec:	431a      	orrs	r2, r3
 80005ee:	4646      	mov	r6, r8
 80005f0:	087b      	lsrs	r3, r7, #1
 80005f2:	e00e      	b.n	8000612 <__udivmoddi4+0xda>
 80005f4:	42ab      	cmp	r3, r5
 80005f6:	d101      	bne.n	80005fc <__udivmoddi4+0xc4>
 80005f8:	42a2      	cmp	r2, r4
 80005fa:	d80c      	bhi.n	8000616 <__udivmoddi4+0xde>
 80005fc:	1aa4      	subs	r4, r4, r2
 80005fe:	419d      	sbcs	r5, r3
 8000600:	2001      	movs	r0, #1
 8000602:	1924      	adds	r4, r4, r4
 8000604:	416d      	adcs	r5, r5
 8000606:	2100      	movs	r1, #0
 8000608:	3e01      	subs	r6, #1
 800060a:	1824      	adds	r4, r4, r0
 800060c:	414d      	adcs	r5, r1
 800060e:	2e00      	cmp	r6, #0
 8000610:	d006      	beq.n	8000620 <__udivmoddi4+0xe8>
 8000612:	42ab      	cmp	r3, r5
 8000614:	d9ee      	bls.n	80005f4 <__udivmoddi4+0xbc>
 8000616:	3e01      	subs	r6, #1
 8000618:	1924      	adds	r4, r4, r4
 800061a:	416d      	adcs	r5, r5
 800061c:	2e00      	cmp	r6, #0
 800061e:	d1f8      	bne.n	8000612 <__udivmoddi4+0xda>
 8000620:	465b      	mov	r3, fp
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	1900      	adds	r0, r0, r4
 8000628:	4169      	adcs	r1, r5
 800062a:	2b00      	cmp	r3, #0
 800062c:	db22      	blt.n	8000674 <__udivmoddi4+0x13c>
 800062e:	002b      	movs	r3, r5
 8000630:	465a      	mov	r2, fp
 8000632:	40d3      	lsrs	r3, r2
 8000634:	002a      	movs	r2, r5
 8000636:	4644      	mov	r4, r8
 8000638:	40e2      	lsrs	r2, r4
 800063a:	001c      	movs	r4, r3
 800063c:	465b      	mov	r3, fp
 800063e:	0015      	movs	r5, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	db2c      	blt.n	800069e <__udivmoddi4+0x166>
 8000644:	0026      	movs	r6, r4
 8000646:	409e      	lsls	r6, r3
 8000648:	0033      	movs	r3, r6
 800064a:	0026      	movs	r6, r4
 800064c:	4647      	mov	r7, r8
 800064e:	40be      	lsls	r6, r7
 8000650:	0032      	movs	r2, r6
 8000652:	1a80      	subs	r0, r0, r2
 8000654:	4199      	sbcs	r1, r3
 8000656:	9000      	str	r0, [sp, #0]
 8000658:	9101      	str	r1, [sp, #4]
 800065a:	e7ae      	b.n	80005ba <__udivmoddi4+0x82>
 800065c:	4642      	mov	r2, r8
 800065e:	2320      	movs	r3, #32
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	4652      	mov	r2, sl
 8000664:	40da      	lsrs	r2, r3
 8000666:	4641      	mov	r1, r8
 8000668:	0013      	movs	r3, r2
 800066a:	464a      	mov	r2, r9
 800066c:	408a      	lsls	r2, r1
 800066e:	0017      	movs	r7, r2
 8000670:	431f      	orrs	r7, r3
 8000672:	e782      	b.n	800057a <__udivmoddi4+0x42>
 8000674:	4642      	mov	r2, r8
 8000676:	2320      	movs	r3, #32
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	002a      	movs	r2, r5
 800067c:	4646      	mov	r6, r8
 800067e:	409a      	lsls	r2, r3
 8000680:	0023      	movs	r3, r4
 8000682:	40f3      	lsrs	r3, r6
 8000684:	4313      	orrs	r3, r2
 8000686:	e7d5      	b.n	8000634 <__udivmoddi4+0xfc>
 8000688:	4642      	mov	r2, r8
 800068a:	2320      	movs	r3, #32
 800068c:	2100      	movs	r1, #0
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	2200      	movs	r2, #0
 8000692:	9100      	str	r1, [sp, #0]
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	2201      	movs	r2, #1
 8000698:	40da      	lsrs	r2, r3
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	e782      	b.n	80005a4 <__udivmoddi4+0x6c>
 800069e:	4642      	mov	r2, r8
 80006a0:	2320      	movs	r3, #32
 80006a2:	0026      	movs	r6, r4
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	40de      	lsrs	r6, r3
 80006a8:	002f      	movs	r7, r5
 80006aa:	46b4      	mov	ip, r6
 80006ac:	4097      	lsls	r7, r2
 80006ae:	4666      	mov	r6, ip
 80006b0:	003b      	movs	r3, r7
 80006b2:	4333      	orrs	r3, r6
 80006b4:	e7c9      	b.n	800064a <__udivmoddi4+0x112>
 80006b6:	46c0      	nop			; (mov r8, r8)

080006b8 <__aeabi_dadd>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	4645      	mov	r5, r8
 80006bc:	46de      	mov	lr, fp
 80006be:	4657      	mov	r7, sl
 80006c0:	464e      	mov	r6, r9
 80006c2:	030c      	lsls	r4, r1, #12
 80006c4:	b5e0      	push	{r5, r6, r7, lr}
 80006c6:	004e      	lsls	r6, r1, #1
 80006c8:	0fc9      	lsrs	r1, r1, #31
 80006ca:	4688      	mov	r8, r1
 80006cc:	000d      	movs	r5, r1
 80006ce:	0a61      	lsrs	r1, r4, #9
 80006d0:	0f44      	lsrs	r4, r0, #29
 80006d2:	430c      	orrs	r4, r1
 80006d4:	00c7      	lsls	r7, r0, #3
 80006d6:	0319      	lsls	r1, r3, #12
 80006d8:	0058      	lsls	r0, r3, #1
 80006da:	0fdb      	lsrs	r3, r3, #31
 80006dc:	469b      	mov	fp, r3
 80006de:	0a4b      	lsrs	r3, r1, #9
 80006e0:	0f51      	lsrs	r1, r2, #29
 80006e2:	430b      	orrs	r3, r1
 80006e4:	0d76      	lsrs	r6, r6, #21
 80006e6:	0d40      	lsrs	r0, r0, #21
 80006e8:	0019      	movs	r1, r3
 80006ea:	00d2      	lsls	r2, r2, #3
 80006ec:	45d8      	cmp	r8, fp
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x3a>
 80006f0:	e0ae      	b.n	8000850 <__aeabi_dadd+0x198>
 80006f2:	1a35      	subs	r5, r6, r0
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	dc00      	bgt.n	80006fa <__aeabi_dadd+0x42>
 80006f8:	e0f6      	b.n	80008e8 <__aeabi_dadd+0x230>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dadd+0x66>
 80006fe:	4313      	orrs	r3, r2
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x4c>
 8000702:	e0db      	b.n	80008bc <__aeabi_dadd+0x204>
 8000704:	1e6b      	subs	r3, r5, #1
 8000706:	2b00      	cmp	r3, #0
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x54>
 800070a:	e137      	b.n	800097c <__aeabi_dadd+0x2c4>
 800070c:	1aba      	subs	r2, r7, r2
 800070e:	4297      	cmp	r7, r2
 8000710:	41bf      	sbcs	r7, r7
 8000712:	1a64      	subs	r4, r4, r1
 8000714:	427f      	negs	r7, r7
 8000716:	1be4      	subs	r4, r4, r7
 8000718:	2601      	movs	r6, #1
 800071a:	0017      	movs	r7, r2
 800071c:	e024      	b.n	8000768 <__aeabi_dadd+0xb0>
 800071e:	4bc6      	ldr	r3, [pc, #792]	; (8000a38 <__aeabi_dadd+0x380>)
 8000720:	429e      	cmp	r6, r3
 8000722:	d04d      	beq.n	80007c0 <__aeabi_dadd+0x108>
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	041b      	lsls	r3, r3, #16
 8000728:	4319      	orrs	r1, r3
 800072a:	2d38      	cmp	r5, #56	; 0x38
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x78>
 800072e:	e107      	b.n	8000940 <__aeabi_dadd+0x288>
 8000730:	2d1f      	cmp	r5, #31
 8000732:	dd00      	ble.n	8000736 <__aeabi_dadd+0x7e>
 8000734:	e138      	b.n	80009a8 <__aeabi_dadd+0x2f0>
 8000736:	2020      	movs	r0, #32
 8000738:	1b43      	subs	r3, r0, r5
 800073a:	469a      	mov	sl, r3
 800073c:	000b      	movs	r3, r1
 800073e:	4650      	mov	r0, sl
 8000740:	4083      	lsls	r3, r0
 8000742:	4699      	mov	r9, r3
 8000744:	0013      	movs	r3, r2
 8000746:	4648      	mov	r0, r9
 8000748:	40eb      	lsrs	r3, r5
 800074a:	4318      	orrs	r0, r3
 800074c:	0003      	movs	r3, r0
 800074e:	4650      	mov	r0, sl
 8000750:	4082      	lsls	r2, r0
 8000752:	1e50      	subs	r0, r2, #1
 8000754:	4182      	sbcs	r2, r0
 8000756:	40e9      	lsrs	r1, r5
 8000758:	431a      	orrs	r2, r3
 800075a:	1aba      	subs	r2, r7, r2
 800075c:	1a61      	subs	r1, r4, r1
 800075e:	4297      	cmp	r7, r2
 8000760:	41a4      	sbcs	r4, r4
 8000762:	0017      	movs	r7, r2
 8000764:	4264      	negs	r4, r4
 8000766:	1b0c      	subs	r4, r1, r4
 8000768:	0223      	lsls	r3, r4, #8
 800076a:	d562      	bpl.n	8000832 <__aeabi_dadd+0x17a>
 800076c:	0264      	lsls	r4, r4, #9
 800076e:	0a65      	lsrs	r5, r4, #9
 8000770:	2d00      	cmp	r5, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0xbe>
 8000774:	e0df      	b.n	8000936 <__aeabi_dadd+0x27e>
 8000776:	0028      	movs	r0, r5
 8000778:	f001 fd26 	bl	80021c8 <__clzsi2>
 800077c:	0003      	movs	r3, r0
 800077e:	3b08      	subs	r3, #8
 8000780:	2b1f      	cmp	r3, #31
 8000782:	dd00      	ble.n	8000786 <__aeabi_dadd+0xce>
 8000784:	e0d2      	b.n	800092c <__aeabi_dadd+0x274>
 8000786:	2220      	movs	r2, #32
 8000788:	003c      	movs	r4, r7
 800078a:	1ad2      	subs	r2, r2, r3
 800078c:	409d      	lsls	r5, r3
 800078e:	40d4      	lsrs	r4, r2
 8000790:	409f      	lsls	r7, r3
 8000792:	4325      	orrs	r5, r4
 8000794:	429e      	cmp	r6, r3
 8000796:	dd00      	ble.n	800079a <__aeabi_dadd+0xe2>
 8000798:	e0c4      	b.n	8000924 <__aeabi_dadd+0x26c>
 800079a:	1b9e      	subs	r6, r3, r6
 800079c:	1c73      	adds	r3, r6, #1
 800079e:	2b1f      	cmp	r3, #31
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0xec>
 80007a2:	e0f1      	b.n	8000988 <__aeabi_dadd+0x2d0>
 80007a4:	2220      	movs	r2, #32
 80007a6:	0038      	movs	r0, r7
 80007a8:	0029      	movs	r1, r5
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	40d8      	lsrs	r0, r3
 80007ae:	4091      	lsls	r1, r2
 80007b0:	4097      	lsls	r7, r2
 80007b2:	002c      	movs	r4, r5
 80007b4:	4301      	orrs	r1, r0
 80007b6:	1e78      	subs	r0, r7, #1
 80007b8:	4187      	sbcs	r7, r0
 80007ba:	40dc      	lsrs	r4, r3
 80007bc:	2600      	movs	r6, #0
 80007be:	430f      	orrs	r7, r1
 80007c0:	077b      	lsls	r3, r7, #29
 80007c2:	d009      	beq.n	80007d8 <__aeabi_dadd+0x120>
 80007c4:	230f      	movs	r3, #15
 80007c6:	403b      	ands	r3, r7
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d005      	beq.n	80007d8 <__aeabi_dadd+0x120>
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	42bb      	cmp	r3, r7
 80007d0:	41bf      	sbcs	r7, r7
 80007d2:	427f      	negs	r7, r7
 80007d4:	19e4      	adds	r4, r4, r7
 80007d6:	001f      	movs	r7, r3
 80007d8:	0223      	lsls	r3, r4, #8
 80007da:	d52c      	bpl.n	8000836 <__aeabi_dadd+0x17e>
 80007dc:	4b96      	ldr	r3, [pc, #600]	; (8000a38 <__aeabi_dadd+0x380>)
 80007de:	3601      	adds	r6, #1
 80007e0:	429e      	cmp	r6, r3
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x12e>
 80007e4:	e09a      	b.n	800091c <__aeabi_dadd+0x264>
 80007e6:	4645      	mov	r5, r8
 80007e8:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <__aeabi_dadd+0x384>)
 80007ea:	08ff      	lsrs	r7, r7, #3
 80007ec:	401c      	ands	r4, r3
 80007ee:	0760      	lsls	r0, r4, #29
 80007f0:	0576      	lsls	r6, r6, #21
 80007f2:	0264      	lsls	r4, r4, #9
 80007f4:	4307      	orrs	r7, r0
 80007f6:	0b24      	lsrs	r4, r4, #12
 80007f8:	0d76      	lsrs	r6, r6, #21
 80007fa:	2100      	movs	r1, #0
 80007fc:	0324      	lsls	r4, r4, #12
 80007fe:	0b23      	lsrs	r3, r4, #12
 8000800:	0d0c      	lsrs	r4, r1, #20
 8000802:	4a8f      	ldr	r2, [pc, #572]	; (8000a40 <__aeabi_dadd+0x388>)
 8000804:	0524      	lsls	r4, r4, #20
 8000806:	431c      	orrs	r4, r3
 8000808:	4014      	ands	r4, r2
 800080a:	0533      	lsls	r3, r6, #20
 800080c:	4323      	orrs	r3, r4
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	07ed      	lsls	r5, r5, #31
 8000812:	085b      	lsrs	r3, r3, #1
 8000814:	432b      	orrs	r3, r5
 8000816:	0038      	movs	r0, r7
 8000818:	0019      	movs	r1, r3
 800081a:	bc3c      	pop	{r2, r3, r4, r5}
 800081c:	4690      	mov	r8, r2
 800081e:	4699      	mov	r9, r3
 8000820:	46a2      	mov	sl, r4
 8000822:	46ab      	mov	fp, r5
 8000824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000826:	4664      	mov	r4, ip
 8000828:	4304      	orrs	r4, r0
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x176>
 800082c:	e211      	b.n	8000c52 <__aeabi_dadd+0x59a>
 800082e:	0004      	movs	r4, r0
 8000830:	4667      	mov	r7, ip
 8000832:	077b      	lsls	r3, r7, #29
 8000834:	d1c6      	bne.n	80007c4 <__aeabi_dadd+0x10c>
 8000836:	4645      	mov	r5, r8
 8000838:	0760      	lsls	r0, r4, #29
 800083a:	08ff      	lsrs	r7, r7, #3
 800083c:	4307      	orrs	r7, r0
 800083e:	08e4      	lsrs	r4, r4, #3
 8000840:	4b7d      	ldr	r3, [pc, #500]	; (8000a38 <__aeabi_dadd+0x380>)
 8000842:	429e      	cmp	r6, r3
 8000844:	d030      	beq.n	80008a8 <__aeabi_dadd+0x1f0>
 8000846:	0324      	lsls	r4, r4, #12
 8000848:	0576      	lsls	r6, r6, #21
 800084a:	0b24      	lsrs	r4, r4, #12
 800084c:	0d76      	lsrs	r6, r6, #21
 800084e:	e7d4      	b.n	80007fa <__aeabi_dadd+0x142>
 8000850:	1a33      	subs	r3, r6, r0
 8000852:	469a      	mov	sl, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	dd78      	ble.n	800094a <__aeabi_dadd+0x292>
 8000858:	2800      	cmp	r0, #0
 800085a:	d031      	beq.n	80008c0 <__aeabi_dadd+0x208>
 800085c:	4876      	ldr	r0, [pc, #472]	; (8000a38 <__aeabi_dadd+0x380>)
 800085e:	4286      	cmp	r6, r0
 8000860:	d0ae      	beq.n	80007c0 <__aeabi_dadd+0x108>
 8000862:	2080      	movs	r0, #128	; 0x80
 8000864:	0400      	lsls	r0, r0, #16
 8000866:	4301      	orrs	r1, r0
 8000868:	4653      	mov	r3, sl
 800086a:	2b38      	cmp	r3, #56	; 0x38
 800086c:	dc00      	bgt.n	8000870 <__aeabi_dadd+0x1b8>
 800086e:	e0e9      	b.n	8000a44 <__aeabi_dadd+0x38c>
 8000870:	430a      	orrs	r2, r1
 8000872:	1e51      	subs	r1, r2, #1
 8000874:	418a      	sbcs	r2, r1
 8000876:	2100      	movs	r1, #0
 8000878:	19d2      	adds	r2, r2, r7
 800087a:	42ba      	cmp	r2, r7
 800087c:	41bf      	sbcs	r7, r7
 800087e:	1909      	adds	r1, r1, r4
 8000880:	427c      	negs	r4, r7
 8000882:	0017      	movs	r7, r2
 8000884:	190c      	adds	r4, r1, r4
 8000886:	0223      	lsls	r3, r4, #8
 8000888:	d5d3      	bpl.n	8000832 <__aeabi_dadd+0x17a>
 800088a:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <__aeabi_dadd+0x380>)
 800088c:	3601      	adds	r6, #1
 800088e:	429e      	cmp	r6, r3
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x1dc>
 8000892:	e13a      	b.n	8000b0a <__aeabi_dadd+0x452>
 8000894:	2001      	movs	r0, #1
 8000896:	4b69      	ldr	r3, [pc, #420]	; (8000a3c <__aeabi_dadd+0x384>)
 8000898:	401c      	ands	r4, r3
 800089a:	087b      	lsrs	r3, r7, #1
 800089c:	4007      	ands	r7, r0
 800089e:	431f      	orrs	r7, r3
 80008a0:	07e0      	lsls	r0, r4, #31
 80008a2:	4307      	orrs	r7, r0
 80008a4:	0864      	lsrs	r4, r4, #1
 80008a6:	e78b      	b.n	80007c0 <__aeabi_dadd+0x108>
 80008a8:	0023      	movs	r3, r4
 80008aa:	433b      	orrs	r3, r7
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x1f8>
 80008ae:	e1cb      	b.n	8000c48 <__aeabi_dadd+0x590>
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	0312      	lsls	r2, r2, #12
 80008b4:	4314      	orrs	r4, r2
 80008b6:	0324      	lsls	r4, r4, #12
 80008b8:	0b24      	lsrs	r4, r4, #12
 80008ba:	e79e      	b.n	80007fa <__aeabi_dadd+0x142>
 80008bc:	002e      	movs	r6, r5
 80008be:	e77f      	b.n	80007c0 <__aeabi_dadd+0x108>
 80008c0:	0008      	movs	r0, r1
 80008c2:	4310      	orrs	r0, r2
 80008c4:	d100      	bne.n	80008c8 <__aeabi_dadd+0x210>
 80008c6:	e0b4      	b.n	8000a32 <__aeabi_dadd+0x37a>
 80008c8:	1e58      	subs	r0, r3, #1
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x218>
 80008ce:	e0de      	b.n	8000a8e <__aeabi_dadd+0x3d6>
 80008d0:	18ba      	adds	r2, r7, r2
 80008d2:	42ba      	cmp	r2, r7
 80008d4:	419b      	sbcs	r3, r3
 80008d6:	1864      	adds	r4, r4, r1
 80008d8:	425b      	negs	r3, r3
 80008da:	18e4      	adds	r4, r4, r3
 80008dc:	0017      	movs	r7, r2
 80008de:	2601      	movs	r6, #1
 80008e0:	0223      	lsls	r3, r4, #8
 80008e2:	d5a6      	bpl.n	8000832 <__aeabi_dadd+0x17a>
 80008e4:	2602      	movs	r6, #2
 80008e6:	e7d5      	b.n	8000894 <__aeabi_dadd+0x1dc>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d16e      	bne.n	80009ca <__aeabi_dadd+0x312>
 80008ec:	1c70      	adds	r0, r6, #1
 80008ee:	0540      	lsls	r0, r0, #21
 80008f0:	0d40      	lsrs	r0, r0, #21
 80008f2:	2801      	cmp	r0, #1
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dadd+0x240>
 80008f6:	e0f9      	b.n	8000aec <__aeabi_dadd+0x434>
 80008f8:	1ab8      	subs	r0, r7, r2
 80008fa:	4684      	mov	ip, r0
 80008fc:	4287      	cmp	r7, r0
 80008fe:	4180      	sbcs	r0, r0
 8000900:	1ae5      	subs	r5, r4, r3
 8000902:	4240      	negs	r0, r0
 8000904:	1a2d      	subs	r5, r5, r0
 8000906:	0228      	lsls	r0, r5, #8
 8000908:	d400      	bmi.n	800090c <__aeabi_dadd+0x254>
 800090a:	e089      	b.n	8000a20 <__aeabi_dadd+0x368>
 800090c:	1bd7      	subs	r7, r2, r7
 800090e:	42ba      	cmp	r2, r7
 8000910:	4192      	sbcs	r2, r2
 8000912:	1b1c      	subs	r4, r3, r4
 8000914:	4252      	negs	r2, r2
 8000916:	1aa5      	subs	r5, r4, r2
 8000918:	46d8      	mov	r8, fp
 800091a:	e729      	b.n	8000770 <__aeabi_dadd+0xb8>
 800091c:	4645      	mov	r5, r8
 800091e:	2400      	movs	r4, #0
 8000920:	2700      	movs	r7, #0
 8000922:	e76a      	b.n	80007fa <__aeabi_dadd+0x142>
 8000924:	4c45      	ldr	r4, [pc, #276]	; (8000a3c <__aeabi_dadd+0x384>)
 8000926:	1af6      	subs	r6, r6, r3
 8000928:	402c      	ands	r4, r5
 800092a:	e749      	b.n	80007c0 <__aeabi_dadd+0x108>
 800092c:	003d      	movs	r5, r7
 800092e:	3828      	subs	r0, #40	; 0x28
 8000930:	4085      	lsls	r5, r0
 8000932:	2700      	movs	r7, #0
 8000934:	e72e      	b.n	8000794 <__aeabi_dadd+0xdc>
 8000936:	0038      	movs	r0, r7
 8000938:	f001 fc46 	bl	80021c8 <__clzsi2>
 800093c:	3020      	adds	r0, #32
 800093e:	e71d      	b.n	800077c <__aeabi_dadd+0xc4>
 8000940:	430a      	orrs	r2, r1
 8000942:	1e51      	subs	r1, r2, #1
 8000944:	418a      	sbcs	r2, r1
 8000946:	2100      	movs	r1, #0
 8000948:	e707      	b.n	800075a <__aeabi_dadd+0xa2>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x298>
 800094e:	e0f3      	b.n	8000b38 <__aeabi_dadd+0x480>
 8000950:	1c70      	adds	r0, r6, #1
 8000952:	0543      	lsls	r3, r0, #21
 8000954:	0d5b      	lsrs	r3, r3, #21
 8000956:	2b01      	cmp	r3, #1
 8000958:	dc00      	bgt.n	800095c <__aeabi_dadd+0x2a4>
 800095a:	e0ad      	b.n	8000ab8 <__aeabi_dadd+0x400>
 800095c:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <__aeabi_dadd+0x380>)
 800095e:	4298      	cmp	r0, r3
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x2ac>
 8000962:	e0d1      	b.n	8000b08 <__aeabi_dadd+0x450>
 8000964:	18ba      	adds	r2, r7, r2
 8000966:	42ba      	cmp	r2, r7
 8000968:	41bf      	sbcs	r7, r7
 800096a:	1864      	adds	r4, r4, r1
 800096c:	427f      	negs	r7, r7
 800096e:	19e4      	adds	r4, r4, r7
 8000970:	07e7      	lsls	r7, r4, #31
 8000972:	0852      	lsrs	r2, r2, #1
 8000974:	4317      	orrs	r7, r2
 8000976:	0864      	lsrs	r4, r4, #1
 8000978:	0006      	movs	r6, r0
 800097a:	e721      	b.n	80007c0 <__aeabi_dadd+0x108>
 800097c:	482e      	ldr	r0, [pc, #184]	; (8000a38 <__aeabi_dadd+0x380>)
 800097e:	4285      	cmp	r5, r0
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x2cc>
 8000982:	e093      	b.n	8000aac <__aeabi_dadd+0x3f4>
 8000984:	001d      	movs	r5, r3
 8000986:	e6d0      	b.n	800072a <__aeabi_dadd+0x72>
 8000988:	0029      	movs	r1, r5
 800098a:	3e1f      	subs	r6, #31
 800098c:	40f1      	lsrs	r1, r6
 800098e:	2b20      	cmp	r3, #32
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x2dc>
 8000992:	e08d      	b.n	8000ab0 <__aeabi_dadd+0x3f8>
 8000994:	2240      	movs	r2, #64	; 0x40
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	409d      	lsls	r5, r3
 800099a:	432f      	orrs	r7, r5
 800099c:	1e7d      	subs	r5, r7, #1
 800099e:	41af      	sbcs	r7, r5
 80009a0:	2400      	movs	r4, #0
 80009a2:	430f      	orrs	r7, r1
 80009a4:	2600      	movs	r6, #0
 80009a6:	e744      	b.n	8000832 <__aeabi_dadd+0x17a>
 80009a8:	002b      	movs	r3, r5
 80009aa:	0008      	movs	r0, r1
 80009ac:	3b20      	subs	r3, #32
 80009ae:	40d8      	lsrs	r0, r3
 80009b0:	0003      	movs	r3, r0
 80009b2:	2d20      	cmp	r5, #32
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dadd+0x300>
 80009b6:	e07d      	b.n	8000ab4 <__aeabi_dadd+0x3fc>
 80009b8:	2040      	movs	r0, #64	; 0x40
 80009ba:	1b45      	subs	r5, r0, r5
 80009bc:	40a9      	lsls	r1, r5
 80009be:	430a      	orrs	r2, r1
 80009c0:	1e51      	subs	r1, r2, #1
 80009c2:	418a      	sbcs	r2, r1
 80009c4:	2100      	movs	r1, #0
 80009c6:	431a      	orrs	r2, r3
 80009c8:	e6c7      	b.n	800075a <__aeabi_dadd+0xa2>
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	d050      	beq.n	8000a70 <__aeabi_dadd+0x3b8>
 80009ce:	4e1a      	ldr	r6, [pc, #104]	; (8000a38 <__aeabi_dadd+0x380>)
 80009d0:	42b0      	cmp	r0, r6
 80009d2:	d057      	beq.n	8000a84 <__aeabi_dadd+0x3cc>
 80009d4:	2680      	movs	r6, #128	; 0x80
 80009d6:	426b      	negs	r3, r5
 80009d8:	4699      	mov	r9, r3
 80009da:	0436      	lsls	r6, r6, #16
 80009dc:	4334      	orrs	r4, r6
 80009de:	464b      	mov	r3, r9
 80009e0:	2b38      	cmp	r3, #56	; 0x38
 80009e2:	dd00      	ble.n	80009e6 <__aeabi_dadd+0x32e>
 80009e4:	e0d6      	b.n	8000b94 <__aeabi_dadd+0x4dc>
 80009e6:	2b1f      	cmp	r3, #31
 80009e8:	dd00      	ble.n	80009ec <__aeabi_dadd+0x334>
 80009ea:	e135      	b.n	8000c58 <__aeabi_dadd+0x5a0>
 80009ec:	2620      	movs	r6, #32
 80009ee:	1af5      	subs	r5, r6, r3
 80009f0:	0026      	movs	r6, r4
 80009f2:	40ae      	lsls	r6, r5
 80009f4:	46b2      	mov	sl, r6
 80009f6:	003e      	movs	r6, r7
 80009f8:	40de      	lsrs	r6, r3
 80009fa:	46ac      	mov	ip, r5
 80009fc:	0035      	movs	r5, r6
 80009fe:	4656      	mov	r6, sl
 8000a00:	432e      	orrs	r6, r5
 8000a02:	4665      	mov	r5, ip
 8000a04:	40af      	lsls	r7, r5
 8000a06:	1e7d      	subs	r5, r7, #1
 8000a08:	41af      	sbcs	r7, r5
 8000a0a:	40dc      	lsrs	r4, r3
 8000a0c:	4337      	orrs	r7, r6
 8000a0e:	1bd7      	subs	r7, r2, r7
 8000a10:	42ba      	cmp	r2, r7
 8000a12:	4192      	sbcs	r2, r2
 8000a14:	1b0c      	subs	r4, r1, r4
 8000a16:	4252      	negs	r2, r2
 8000a18:	1aa4      	subs	r4, r4, r2
 8000a1a:	0006      	movs	r6, r0
 8000a1c:	46d8      	mov	r8, fp
 8000a1e:	e6a3      	b.n	8000768 <__aeabi_dadd+0xb0>
 8000a20:	4664      	mov	r4, ip
 8000a22:	4667      	mov	r7, ip
 8000a24:	432c      	orrs	r4, r5
 8000a26:	d000      	beq.n	8000a2a <__aeabi_dadd+0x372>
 8000a28:	e6a2      	b.n	8000770 <__aeabi_dadd+0xb8>
 8000a2a:	2500      	movs	r5, #0
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	2700      	movs	r7, #0
 8000a30:	e706      	b.n	8000840 <__aeabi_dadd+0x188>
 8000a32:	001e      	movs	r6, r3
 8000a34:	e6c4      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	000007ff 	.word	0x000007ff
 8000a3c:	ff7fffff 	.word	0xff7fffff
 8000a40:	800fffff 	.word	0x800fffff
 8000a44:	2b1f      	cmp	r3, #31
 8000a46:	dc63      	bgt.n	8000b10 <__aeabi_dadd+0x458>
 8000a48:	2020      	movs	r0, #32
 8000a4a:	1ac3      	subs	r3, r0, r3
 8000a4c:	0008      	movs	r0, r1
 8000a4e:	4098      	lsls	r0, r3
 8000a50:	469c      	mov	ip, r3
 8000a52:	4683      	mov	fp, r0
 8000a54:	4653      	mov	r3, sl
 8000a56:	0010      	movs	r0, r2
 8000a58:	40d8      	lsrs	r0, r3
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	4658      	mov	r0, fp
 8000a5e:	4318      	orrs	r0, r3
 8000a60:	4663      	mov	r3, ip
 8000a62:	409a      	lsls	r2, r3
 8000a64:	1e53      	subs	r3, r2, #1
 8000a66:	419a      	sbcs	r2, r3
 8000a68:	4653      	mov	r3, sl
 8000a6a:	4302      	orrs	r2, r0
 8000a6c:	40d9      	lsrs	r1, r3
 8000a6e:	e703      	b.n	8000878 <__aeabi_dadd+0x1c0>
 8000a70:	0026      	movs	r6, r4
 8000a72:	433e      	orrs	r6, r7
 8000a74:	d006      	beq.n	8000a84 <__aeabi_dadd+0x3cc>
 8000a76:	43eb      	mvns	r3, r5
 8000a78:	4699      	mov	r9, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0c7      	beq.n	8000a0e <__aeabi_dadd+0x356>
 8000a7e:	4e94      	ldr	r6, [pc, #592]	; (8000cd0 <__aeabi_dadd+0x618>)
 8000a80:	42b0      	cmp	r0, r6
 8000a82:	d1ac      	bne.n	80009de <__aeabi_dadd+0x326>
 8000a84:	000c      	movs	r4, r1
 8000a86:	0017      	movs	r7, r2
 8000a88:	0006      	movs	r6, r0
 8000a8a:	46d8      	mov	r8, fp
 8000a8c:	e698      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000a8e:	4b90      	ldr	r3, [pc, #576]	; (8000cd0 <__aeabi_dadd+0x618>)
 8000a90:	459a      	cmp	sl, r3
 8000a92:	d00b      	beq.n	8000aac <__aeabi_dadd+0x3f4>
 8000a94:	4682      	mov	sl, r0
 8000a96:	e6e7      	b.n	8000868 <__aeabi_dadd+0x1b0>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_dadd+0x3e6>
 8000a9c:	e09e      	b.n	8000bdc <__aeabi_dadd+0x524>
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	4310      	orrs	r0, r2
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x3ee>
 8000aa4:	e0e9      	b.n	8000c7a <__aeabi_dadd+0x5c2>
 8000aa6:	001c      	movs	r4, r3
 8000aa8:	0017      	movs	r7, r2
 8000aaa:	46d8      	mov	r8, fp
 8000aac:	4e88      	ldr	r6, [pc, #544]	; (8000cd0 <__aeabi_dadd+0x618>)
 8000aae:	e687      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	e772      	b.n	800099a <__aeabi_dadd+0x2e2>
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	e782      	b.n	80009be <__aeabi_dadd+0x306>
 8000ab8:	0023      	movs	r3, r4
 8000aba:	433b      	orrs	r3, r7
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_dadd+0x40a>
 8000ac0:	e0ab      	b.n	8000c1a <__aeabi_dadd+0x562>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x410>
 8000ac6:	e0e7      	b.n	8000c98 <__aeabi_dadd+0x5e0>
 8000ac8:	000b      	movs	r3, r1
 8000aca:	4313      	orrs	r3, r2
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dadd+0x418>
 8000ace:	e677      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000ad0:	18ba      	adds	r2, r7, r2
 8000ad2:	42ba      	cmp	r2, r7
 8000ad4:	41bf      	sbcs	r7, r7
 8000ad6:	1864      	adds	r4, r4, r1
 8000ad8:	427f      	negs	r7, r7
 8000ada:	19e4      	adds	r4, r4, r7
 8000adc:	0223      	lsls	r3, r4, #8
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_dadd+0x42a>
 8000ae0:	e0f2      	b.n	8000cc8 <__aeabi_dadd+0x610>
 8000ae2:	4b7c      	ldr	r3, [pc, #496]	; (8000cd4 <__aeabi_dadd+0x61c>)
 8000ae4:	0017      	movs	r7, r2
 8000ae6:	401c      	ands	r4, r3
 8000ae8:	0006      	movs	r6, r0
 8000aea:	e669      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000aec:	0020      	movs	r0, r4
 8000aee:	4338      	orrs	r0, r7
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d1d1      	bne.n	8000a98 <__aeabi_dadd+0x3e0>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d15b      	bne.n	8000bb0 <__aeabi_dadd+0x4f8>
 8000af8:	001c      	movs	r4, r3
 8000afa:	4314      	orrs	r4, r2
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x448>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x59a>
 8000b00:	001c      	movs	r4, r3
 8000b02:	0017      	movs	r7, r2
 8000b04:	46d8      	mov	r8, fp
 8000b06:	e65b      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000b08:	0006      	movs	r6, r0
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e697      	b.n	8000840 <__aeabi_dadd+0x188>
 8000b10:	4650      	mov	r0, sl
 8000b12:	000b      	movs	r3, r1
 8000b14:	3820      	subs	r0, #32
 8000b16:	40c3      	lsrs	r3, r0
 8000b18:	4699      	mov	r9, r3
 8000b1a:	4653      	mov	r3, sl
 8000b1c:	2b20      	cmp	r3, #32
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x46a>
 8000b20:	e095      	b.n	8000c4e <__aeabi_dadd+0x596>
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	4650      	mov	r0, sl
 8000b26:	1a1b      	subs	r3, r3, r0
 8000b28:	4099      	lsls	r1, r3
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	1e51      	subs	r1, r2, #1
 8000b2e:	418a      	sbcs	r2, r1
 8000b30:	464b      	mov	r3, r9
 8000b32:	2100      	movs	r1, #0
 8000b34:	431a      	orrs	r2, r3
 8000b36:	e69f      	b.n	8000878 <__aeabi_dadd+0x1c0>
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d130      	bne.n	8000b9e <__aeabi_dadd+0x4e6>
 8000b3c:	0026      	movs	r6, r4
 8000b3e:	433e      	orrs	r6, r7
 8000b40:	d067      	beq.n	8000c12 <__aeabi_dadd+0x55a>
 8000b42:	43db      	mvns	r3, r3
 8000b44:	469a      	mov	sl, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d01c      	beq.n	8000b84 <__aeabi_dadd+0x4cc>
 8000b4a:	4e61      	ldr	r6, [pc, #388]	; (8000cd0 <__aeabi_dadd+0x618>)
 8000b4c:	42b0      	cmp	r0, r6
 8000b4e:	d060      	beq.n	8000c12 <__aeabi_dadd+0x55a>
 8000b50:	4653      	mov	r3, sl
 8000b52:	2b38      	cmp	r3, #56	; 0x38
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_dadd+0x4a0>
 8000b56:	e096      	b.n	8000c86 <__aeabi_dadd+0x5ce>
 8000b58:	2b1f      	cmp	r3, #31
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_dadd+0x4a6>
 8000b5c:	e09f      	b.n	8000c9e <__aeabi_dadd+0x5e6>
 8000b5e:	2620      	movs	r6, #32
 8000b60:	1af3      	subs	r3, r6, r3
 8000b62:	0026      	movs	r6, r4
 8000b64:	409e      	lsls	r6, r3
 8000b66:	469c      	mov	ip, r3
 8000b68:	46b3      	mov	fp, r6
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	003e      	movs	r6, r7
 8000b6e:	40de      	lsrs	r6, r3
 8000b70:	0033      	movs	r3, r6
 8000b72:	465e      	mov	r6, fp
 8000b74:	431e      	orrs	r6, r3
 8000b76:	4663      	mov	r3, ip
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	1e7b      	subs	r3, r7, #1
 8000b7c:	419f      	sbcs	r7, r3
 8000b7e:	4653      	mov	r3, sl
 8000b80:	40dc      	lsrs	r4, r3
 8000b82:	4337      	orrs	r7, r6
 8000b84:	18bf      	adds	r7, r7, r2
 8000b86:	4297      	cmp	r7, r2
 8000b88:	4192      	sbcs	r2, r2
 8000b8a:	1864      	adds	r4, r4, r1
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	18a4      	adds	r4, r4, r2
 8000b90:	0006      	movs	r6, r0
 8000b92:	e678      	b.n	8000886 <__aeabi_dadd+0x1ce>
 8000b94:	4327      	orrs	r7, r4
 8000b96:	1e7c      	subs	r4, r7, #1
 8000b98:	41a7      	sbcs	r7, r4
 8000b9a:	2400      	movs	r4, #0
 8000b9c:	e737      	b.n	8000a0e <__aeabi_dadd+0x356>
 8000b9e:	4e4c      	ldr	r6, [pc, #304]	; (8000cd0 <__aeabi_dadd+0x618>)
 8000ba0:	42b0      	cmp	r0, r6
 8000ba2:	d036      	beq.n	8000c12 <__aeabi_dadd+0x55a>
 8000ba4:	2680      	movs	r6, #128	; 0x80
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	0436      	lsls	r6, r6, #16
 8000baa:	469a      	mov	sl, r3
 8000bac:	4334      	orrs	r4, r6
 8000bae:	e7cf      	b.n	8000b50 <__aeabi_dadd+0x498>
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	4310      	orrs	r0, r2
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0x500>
 8000bb6:	e603      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000bb8:	1ab8      	subs	r0, r7, r2
 8000bba:	4684      	mov	ip, r0
 8000bbc:	4567      	cmp	r7, ip
 8000bbe:	41ad      	sbcs	r5, r5
 8000bc0:	1ae0      	subs	r0, r4, r3
 8000bc2:	426d      	negs	r5, r5
 8000bc4:	1b40      	subs	r0, r0, r5
 8000bc6:	0205      	lsls	r5, r0, #8
 8000bc8:	d400      	bmi.n	8000bcc <__aeabi_dadd+0x514>
 8000bca:	e62c      	b.n	8000826 <__aeabi_dadd+0x16e>
 8000bcc:	1bd7      	subs	r7, r2, r7
 8000bce:	42ba      	cmp	r2, r7
 8000bd0:	4192      	sbcs	r2, r2
 8000bd2:	1b1c      	subs	r4, r3, r4
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	1aa4      	subs	r4, r4, r2
 8000bd8:	46d8      	mov	r8, fp
 8000bda:	e5f1      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000bdc:	0018      	movs	r0, r3
 8000bde:	4310      	orrs	r0, r2
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0x52c>
 8000be2:	e763      	b.n	8000aac <__aeabi_dadd+0x3f4>
 8000be4:	08f8      	lsrs	r0, r7, #3
 8000be6:	0767      	lsls	r7, r4, #29
 8000be8:	4307      	orrs	r7, r0
 8000bea:	2080      	movs	r0, #128	; 0x80
 8000bec:	08e4      	lsrs	r4, r4, #3
 8000bee:	0300      	lsls	r0, r0, #12
 8000bf0:	4204      	tst	r4, r0
 8000bf2:	d008      	beq.n	8000c06 <__aeabi_dadd+0x54e>
 8000bf4:	08dd      	lsrs	r5, r3, #3
 8000bf6:	4205      	tst	r5, r0
 8000bf8:	d105      	bne.n	8000c06 <__aeabi_dadd+0x54e>
 8000bfa:	08d2      	lsrs	r2, r2, #3
 8000bfc:	0759      	lsls	r1, r3, #29
 8000bfe:	4311      	orrs	r1, r2
 8000c00:	000f      	movs	r7, r1
 8000c02:	002c      	movs	r4, r5
 8000c04:	46d8      	mov	r8, fp
 8000c06:	0f7b      	lsrs	r3, r7, #29
 8000c08:	00e4      	lsls	r4, r4, #3
 8000c0a:	431c      	orrs	r4, r3
 8000c0c:	00ff      	lsls	r7, r7, #3
 8000c0e:	4e30      	ldr	r6, [pc, #192]	; (8000cd0 <__aeabi_dadd+0x618>)
 8000c10:	e5d6      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000c12:	000c      	movs	r4, r1
 8000c14:	0017      	movs	r7, r2
 8000c16:	0006      	movs	r6, r0
 8000c18:	e5d2      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d038      	beq.n	8000c90 <__aeabi_dadd+0x5d8>
 8000c1e:	000b      	movs	r3, r1
 8000c20:	4313      	orrs	r3, r2
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x56e>
 8000c24:	e742      	b.n	8000aac <__aeabi_dadd+0x3f4>
 8000c26:	08f8      	lsrs	r0, r7, #3
 8000c28:	0767      	lsls	r7, r4, #29
 8000c2a:	4307      	orrs	r7, r0
 8000c2c:	2080      	movs	r0, #128	; 0x80
 8000c2e:	08e4      	lsrs	r4, r4, #3
 8000c30:	0300      	lsls	r0, r0, #12
 8000c32:	4204      	tst	r4, r0
 8000c34:	d0e7      	beq.n	8000c06 <__aeabi_dadd+0x54e>
 8000c36:	08cb      	lsrs	r3, r1, #3
 8000c38:	4203      	tst	r3, r0
 8000c3a:	d1e4      	bne.n	8000c06 <__aeabi_dadd+0x54e>
 8000c3c:	08d2      	lsrs	r2, r2, #3
 8000c3e:	0749      	lsls	r1, r1, #29
 8000c40:	4311      	orrs	r1, r2
 8000c42:	000f      	movs	r7, r1
 8000c44:	001c      	movs	r4, r3
 8000c46:	e7de      	b.n	8000c06 <__aeabi_dadd+0x54e>
 8000c48:	2700      	movs	r7, #0
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	e5d5      	b.n	80007fa <__aeabi_dadd+0x142>
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e76b      	b.n	8000b2a <__aeabi_dadd+0x472>
 8000c52:	2500      	movs	r5, #0
 8000c54:	2700      	movs	r7, #0
 8000c56:	e5f3      	b.n	8000840 <__aeabi_dadd+0x188>
 8000c58:	464e      	mov	r6, r9
 8000c5a:	0025      	movs	r5, r4
 8000c5c:	3e20      	subs	r6, #32
 8000c5e:	40f5      	lsrs	r5, r6
 8000c60:	464b      	mov	r3, r9
 8000c62:	002e      	movs	r6, r5
 8000c64:	2b20      	cmp	r3, #32
 8000c66:	d02d      	beq.n	8000cc4 <__aeabi_dadd+0x60c>
 8000c68:	2540      	movs	r5, #64	; 0x40
 8000c6a:	1aed      	subs	r5, r5, r3
 8000c6c:	40ac      	lsls	r4, r5
 8000c6e:	4327      	orrs	r7, r4
 8000c70:	1e7c      	subs	r4, r7, #1
 8000c72:	41a7      	sbcs	r7, r4
 8000c74:	2400      	movs	r4, #0
 8000c76:	4337      	orrs	r7, r6
 8000c78:	e6c9      	b.n	8000a0e <__aeabi_dadd+0x356>
 8000c7a:	2480      	movs	r4, #128	; 0x80
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	0324      	lsls	r4, r4, #12
 8000c80:	4e13      	ldr	r6, [pc, #76]	; (8000cd0 <__aeabi_dadd+0x618>)
 8000c82:	2700      	movs	r7, #0
 8000c84:	e5dc      	b.n	8000840 <__aeabi_dadd+0x188>
 8000c86:	4327      	orrs	r7, r4
 8000c88:	1e7c      	subs	r4, r7, #1
 8000c8a:	41a7      	sbcs	r7, r4
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	e779      	b.n	8000b84 <__aeabi_dadd+0x4cc>
 8000c90:	000c      	movs	r4, r1
 8000c92:	0017      	movs	r7, r2
 8000c94:	4e0e      	ldr	r6, [pc, #56]	; (8000cd0 <__aeabi_dadd+0x618>)
 8000c96:	e593      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000c98:	000c      	movs	r4, r1
 8000c9a:	0017      	movs	r7, r2
 8000c9c:	e590      	b.n	80007c0 <__aeabi_dadd+0x108>
 8000c9e:	4656      	mov	r6, sl
 8000ca0:	0023      	movs	r3, r4
 8000ca2:	3e20      	subs	r6, #32
 8000ca4:	40f3      	lsrs	r3, r6
 8000ca6:	4699      	mov	r9, r3
 8000ca8:	4653      	mov	r3, sl
 8000caa:	2b20      	cmp	r3, #32
 8000cac:	d00e      	beq.n	8000ccc <__aeabi_dadd+0x614>
 8000cae:	2340      	movs	r3, #64	; 0x40
 8000cb0:	4656      	mov	r6, sl
 8000cb2:	1b9b      	subs	r3, r3, r6
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	4327      	orrs	r7, r4
 8000cb8:	1e7c      	subs	r4, r7, #1
 8000cba:	41a7      	sbcs	r7, r4
 8000cbc:	464b      	mov	r3, r9
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	e75f      	b.n	8000b84 <__aeabi_dadd+0x4cc>
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	e7d2      	b.n	8000c6e <__aeabi_dadd+0x5b6>
 8000cc8:	0017      	movs	r7, r2
 8000cca:	e5b2      	b.n	8000832 <__aeabi_dadd+0x17a>
 8000ccc:	2400      	movs	r4, #0
 8000cce:	e7f2      	b.n	8000cb6 <__aeabi_dadd+0x5fe>
 8000cd0:	000007ff 	.word	0x000007ff
 8000cd4:	ff7fffff 	.word	0xff7fffff

08000cd8 <__aeabi_ddiv>:
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	4657      	mov	r7, sl
 8000cdc:	4645      	mov	r5, r8
 8000cde:	46de      	mov	lr, fp
 8000ce0:	464e      	mov	r6, r9
 8000ce2:	b5e0      	push	{r5, r6, r7, lr}
 8000ce4:	004c      	lsls	r4, r1, #1
 8000ce6:	030e      	lsls	r6, r1, #12
 8000ce8:	b087      	sub	sp, #28
 8000cea:	4683      	mov	fp, r0
 8000cec:	4692      	mov	sl, r2
 8000cee:	001d      	movs	r5, r3
 8000cf0:	4680      	mov	r8, r0
 8000cf2:	0b36      	lsrs	r6, r6, #12
 8000cf4:	0d64      	lsrs	r4, r4, #21
 8000cf6:	0fcf      	lsrs	r7, r1, #31
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	d04f      	beq.n	8000d9c <__aeabi_ddiv+0xc4>
 8000cfc:	4b6f      	ldr	r3, [pc, #444]	; (8000ebc <__aeabi_ddiv+0x1e4>)
 8000cfe:	429c      	cmp	r4, r3
 8000d00:	d035      	beq.n	8000d6e <__aeabi_ddiv+0x96>
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	0f42      	lsrs	r2, r0, #29
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	00f6      	lsls	r6, r6, #3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	4333      	orrs	r3, r6
 8000d0e:	4699      	mov	r9, r3
 8000d10:	00c3      	lsls	r3, r0, #3
 8000d12:	4698      	mov	r8, r3
 8000d14:	4b6a      	ldr	r3, [pc, #424]	; (8000ec0 <__aeabi_ddiv+0x1e8>)
 8000d16:	2600      	movs	r6, #0
 8000d18:	469c      	mov	ip, r3
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	4464      	add	r4, ip
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	032b      	lsls	r3, r5, #12
 8000d22:	0b1b      	lsrs	r3, r3, #12
 8000d24:	469b      	mov	fp, r3
 8000d26:	006b      	lsls	r3, r5, #1
 8000d28:	0fed      	lsrs	r5, r5, #31
 8000d2a:	4650      	mov	r0, sl
 8000d2c:	0d5b      	lsrs	r3, r3, #21
 8000d2e:	9501      	str	r5, [sp, #4]
 8000d30:	d05e      	beq.n	8000df0 <__aeabi_ddiv+0x118>
 8000d32:	4a62      	ldr	r2, [pc, #392]	; (8000ebc <__aeabi_ddiv+0x1e4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d053      	beq.n	8000de0 <__aeabi_ddiv+0x108>
 8000d38:	465a      	mov	r2, fp
 8000d3a:	00d1      	lsls	r1, r2, #3
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0f40      	lsrs	r0, r0, #29
 8000d40:	0412      	lsls	r2, r2, #16
 8000d42:	4302      	orrs	r2, r0
 8000d44:	430a      	orrs	r2, r1
 8000d46:	4693      	mov	fp, r2
 8000d48:	4652      	mov	r2, sl
 8000d4a:	00d1      	lsls	r1, r2, #3
 8000d4c:	4a5c      	ldr	r2, [pc, #368]	; (8000ec0 <__aeabi_ddiv+0x1e8>)
 8000d4e:	4694      	mov	ip, r2
 8000d50:	2200      	movs	r2, #0
 8000d52:	4463      	add	r3, ip
 8000d54:	0038      	movs	r0, r7
 8000d56:	4068      	eors	r0, r5
 8000d58:	4684      	mov	ip, r0
 8000d5a:	9002      	str	r0, [sp, #8]
 8000d5c:	1ae4      	subs	r4, r4, r3
 8000d5e:	4316      	orrs	r6, r2
 8000d60:	2e0f      	cmp	r6, #15
 8000d62:	d900      	bls.n	8000d66 <__aeabi_ddiv+0x8e>
 8000d64:	e0b4      	b.n	8000ed0 <__aeabi_ddiv+0x1f8>
 8000d66:	4b57      	ldr	r3, [pc, #348]	; (8000ec4 <__aeabi_ddiv+0x1ec>)
 8000d68:	00b6      	lsls	r6, r6, #2
 8000d6a:	599b      	ldr	r3, [r3, r6]
 8000d6c:	469f      	mov	pc, r3
 8000d6e:	0003      	movs	r3, r0
 8000d70:	4333      	orrs	r3, r6
 8000d72:	4699      	mov	r9, r3
 8000d74:	d16c      	bne.n	8000e50 <__aeabi_ddiv+0x178>
 8000d76:	2300      	movs	r3, #0
 8000d78:	4698      	mov	r8, r3
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	2608      	movs	r6, #8
 8000d7e:	9303      	str	r3, [sp, #12]
 8000d80:	e7ce      	b.n	8000d20 <__aeabi_ddiv+0x48>
 8000d82:	46cb      	mov	fp, r9
 8000d84:	4641      	mov	r1, r8
 8000d86:	9a03      	ldr	r2, [sp, #12]
 8000d88:	9701      	str	r7, [sp, #4]
 8000d8a:	2a02      	cmp	r2, #2
 8000d8c:	d165      	bne.n	8000e5a <__aeabi_ddiv+0x182>
 8000d8e:	9b01      	ldr	r3, [sp, #4]
 8000d90:	4c4a      	ldr	r4, [pc, #296]	; (8000ebc <__aeabi_ddiv+0x1e4>)
 8000d92:	469c      	mov	ip, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	4698      	mov	r8, r3
 8000d9a:	e06b      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	4333      	orrs	r3, r6
 8000da0:	4699      	mov	r9, r3
 8000da2:	d04e      	beq.n	8000e42 <__aeabi_ddiv+0x16a>
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_ddiv+0xd2>
 8000da8:	e1bc      	b.n	8001124 <__aeabi_ddiv+0x44c>
 8000daa:	0030      	movs	r0, r6
 8000dac:	f001 fa0c 	bl	80021c8 <__clzsi2>
 8000db0:	0003      	movs	r3, r0
 8000db2:	3b0b      	subs	r3, #11
 8000db4:	2b1c      	cmp	r3, #28
 8000db6:	dd00      	ble.n	8000dba <__aeabi_ddiv+0xe2>
 8000db8:	e1ac      	b.n	8001114 <__aeabi_ddiv+0x43c>
 8000dba:	221d      	movs	r2, #29
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	465a      	mov	r2, fp
 8000dc0:	0001      	movs	r1, r0
 8000dc2:	40da      	lsrs	r2, r3
 8000dc4:	3908      	subs	r1, #8
 8000dc6:	408e      	lsls	r6, r1
 8000dc8:	0013      	movs	r3, r2
 8000dca:	4333      	orrs	r3, r6
 8000dcc:	4699      	mov	r9, r3
 8000dce:	465b      	mov	r3, fp
 8000dd0:	408b      	lsls	r3, r1
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4c3c      	ldr	r4, [pc, #240]	; (8000ec8 <__aeabi_ddiv+0x1f0>)
 8000dd8:	2600      	movs	r6, #0
 8000dda:	1a24      	subs	r4, r4, r0
 8000ddc:	9303      	str	r3, [sp, #12]
 8000dde:	e79f      	b.n	8000d20 <__aeabi_ddiv+0x48>
 8000de0:	4651      	mov	r1, sl
 8000de2:	465a      	mov	r2, fp
 8000de4:	4311      	orrs	r1, r2
 8000de6:	d129      	bne.n	8000e3c <__aeabi_ddiv+0x164>
 8000de8:	2200      	movs	r2, #0
 8000dea:	4693      	mov	fp, r2
 8000dec:	3202      	adds	r2, #2
 8000dee:	e7b1      	b.n	8000d54 <__aeabi_ddiv+0x7c>
 8000df0:	4659      	mov	r1, fp
 8000df2:	4301      	orrs	r1, r0
 8000df4:	d01e      	beq.n	8000e34 <__aeabi_ddiv+0x15c>
 8000df6:	465b      	mov	r3, fp
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_ddiv+0x126>
 8000dfc:	e19e      	b.n	800113c <__aeabi_ddiv+0x464>
 8000dfe:	4658      	mov	r0, fp
 8000e00:	f001 f9e2 	bl	80021c8 <__clzsi2>
 8000e04:	0003      	movs	r3, r0
 8000e06:	3b0b      	subs	r3, #11
 8000e08:	2b1c      	cmp	r3, #28
 8000e0a:	dd00      	ble.n	8000e0e <__aeabi_ddiv+0x136>
 8000e0c:	e18f      	b.n	800112e <__aeabi_ddiv+0x456>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	4659      	mov	r1, fp
 8000e12:	3a08      	subs	r2, #8
 8000e14:	4091      	lsls	r1, r2
 8000e16:	468b      	mov	fp, r1
 8000e18:	211d      	movs	r1, #29
 8000e1a:	1acb      	subs	r3, r1, r3
 8000e1c:	4651      	mov	r1, sl
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	000b      	movs	r3, r1
 8000e22:	4659      	mov	r1, fp
 8000e24:	430b      	orrs	r3, r1
 8000e26:	4651      	mov	r1, sl
 8000e28:	469b      	mov	fp, r3
 8000e2a:	4091      	lsls	r1, r2
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <__aeabi_ddiv+0x1f0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	1a1b      	subs	r3, r3, r0
 8000e32:	e78f      	b.n	8000d54 <__aeabi_ddiv+0x7c>
 8000e34:	2300      	movs	r3, #0
 8000e36:	2201      	movs	r2, #1
 8000e38:	469b      	mov	fp, r3
 8000e3a:	e78b      	b.n	8000d54 <__aeabi_ddiv+0x7c>
 8000e3c:	4651      	mov	r1, sl
 8000e3e:	2203      	movs	r2, #3
 8000e40:	e788      	b.n	8000d54 <__aeabi_ddiv+0x7c>
 8000e42:	2300      	movs	r3, #0
 8000e44:	4698      	mov	r8, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	2604      	movs	r6, #4
 8000e4a:	2400      	movs	r4, #0
 8000e4c:	9303      	str	r3, [sp, #12]
 8000e4e:	e767      	b.n	8000d20 <__aeabi_ddiv+0x48>
 8000e50:	2303      	movs	r3, #3
 8000e52:	46b1      	mov	r9, r6
 8000e54:	9303      	str	r3, [sp, #12]
 8000e56:	260c      	movs	r6, #12
 8000e58:	e762      	b.n	8000d20 <__aeabi_ddiv+0x48>
 8000e5a:	2a03      	cmp	r2, #3
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_ddiv+0x188>
 8000e5e:	e25c      	b.n	800131a <__aeabi_ddiv+0x642>
 8000e60:	9b01      	ldr	r3, [sp, #4]
 8000e62:	2a01      	cmp	r2, #1
 8000e64:	d000      	beq.n	8000e68 <__aeabi_ddiv+0x190>
 8000e66:	e1e4      	b.n	8001232 <__aeabi_ddiv+0x55a>
 8000e68:	4013      	ands	r3, r2
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	2400      	movs	r4, #0
 8000e70:	2200      	movs	r2, #0
 8000e72:	4698      	mov	r8, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	0312      	lsls	r2, r2, #12
 8000e78:	0b13      	lsrs	r3, r2, #12
 8000e7a:	0d0a      	lsrs	r2, r1, #20
 8000e7c:	0512      	lsls	r2, r2, #20
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	0523      	lsls	r3, r4, #20
 8000e82:	4c12      	ldr	r4, [pc, #72]	; (8000ecc <__aeabi_ddiv+0x1f4>)
 8000e84:	4640      	mov	r0, r8
 8000e86:	4022      	ands	r2, r4
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	4662      	mov	r2, ip
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	07d2      	lsls	r2, r2, #31
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	4313      	orrs	r3, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	b007      	add	sp, #28
 8000e98:	bc3c      	pop	{r2, r3, r4, r5}
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	46a2      	mov	sl, r4
 8000ea0:	46ab      	mov	fp, r5
 8000ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	0312      	lsls	r2, r2, #12
 8000eac:	4698      	mov	r8, r3
 8000eae:	4c03      	ldr	r4, [pc, #12]	; (8000ebc <__aeabi_ddiv+0x1e4>)
 8000eb0:	e7e0      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4c01      	ldr	r4, [pc, #4]	; (8000ebc <__aeabi_ddiv+0x1e4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4698      	mov	r8, r3
 8000eba:	e7db      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 8000ebc:	000007ff 	.word	0x000007ff
 8000ec0:	fffffc01 	.word	0xfffffc01
 8000ec4:	08005aa8 	.word	0x08005aa8
 8000ec8:	fffffc0d 	.word	0xfffffc0d
 8000ecc:	800fffff 	.word	0x800fffff
 8000ed0:	45d9      	cmp	r9, fp
 8000ed2:	d900      	bls.n	8000ed6 <__aeabi_ddiv+0x1fe>
 8000ed4:	e139      	b.n	800114a <__aeabi_ddiv+0x472>
 8000ed6:	d100      	bne.n	8000eda <__aeabi_ddiv+0x202>
 8000ed8:	e134      	b.n	8001144 <__aeabi_ddiv+0x46c>
 8000eda:	2300      	movs	r3, #0
 8000edc:	4646      	mov	r6, r8
 8000ede:	464d      	mov	r5, r9
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	3c01      	subs	r4, #1
 8000ee4:	465b      	mov	r3, fp
 8000ee6:	0e0a      	lsrs	r2, r1, #24
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	431a      	orrs	r2, r3
 8000eec:	020b      	lsls	r3, r1, #8
 8000eee:	0c17      	lsrs	r7, r2, #16
 8000ef0:	9303      	str	r3, [sp, #12]
 8000ef2:	0413      	lsls	r3, r2, #16
 8000ef4:	0c1b      	lsrs	r3, r3, #16
 8000ef6:	0039      	movs	r1, r7
 8000ef8:	0028      	movs	r0, r5
 8000efa:	4690      	mov	r8, r2
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	f7ff f8ff 	bl	8000100 <__udivsi3>
 8000f02:	0002      	movs	r2, r0
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	4683      	mov	fp, r0
 8000f08:	435a      	muls	r2, r3
 8000f0a:	0028      	movs	r0, r5
 8000f0c:	0039      	movs	r1, r7
 8000f0e:	4691      	mov	r9, r2
 8000f10:	f7ff f97c 	bl	800020c <__aeabi_uidivmod>
 8000f14:	0c35      	lsrs	r5, r6, #16
 8000f16:	0409      	lsls	r1, r1, #16
 8000f18:	430d      	orrs	r5, r1
 8000f1a:	45a9      	cmp	r9, r5
 8000f1c:	d90d      	bls.n	8000f3a <__aeabi_ddiv+0x262>
 8000f1e:	465b      	mov	r3, fp
 8000f20:	4445      	add	r5, r8
 8000f22:	3b01      	subs	r3, #1
 8000f24:	45a8      	cmp	r8, r5
 8000f26:	d900      	bls.n	8000f2a <__aeabi_ddiv+0x252>
 8000f28:	e13a      	b.n	80011a0 <__aeabi_ddiv+0x4c8>
 8000f2a:	45a9      	cmp	r9, r5
 8000f2c:	d800      	bhi.n	8000f30 <__aeabi_ddiv+0x258>
 8000f2e:	e137      	b.n	80011a0 <__aeabi_ddiv+0x4c8>
 8000f30:	2302      	movs	r3, #2
 8000f32:	425b      	negs	r3, r3
 8000f34:	469c      	mov	ip, r3
 8000f36:	4445      	add	r5, r8
 8000f38:	44e3      	add	fp, ip
 8000f3a:	464b      	mov	r3, r9
 8000f3c:	1aeb      	subs	r3, r5, r3
 8000f3e:	0039      	movs	r1, r7
 8000f40:	0018      	movs	r0, r3
 8000f42:	9304      	str	r3, [sp, #16]
 8000f44:	f7ff f8dc 	bl	8000100 <__udivsi3>
 8000f48:	9b01      	ldr	r3, [sp, #4]
 8000f4a:	0005      	movs	r5, r0
 8000f4c:	4343      	muls	r3, r0
 8000f4e:	0039      	movs	r1, r7
 8000f50:	9804      	ldr	r0, [sp, #16]
 8000f52:	4699      	mov	r9, r3
 8000f54:	f7ff f95a 	bl	800020c <__aeabi_uidivmod>
 8000f58:	0433      	lsls	r3, r6, #16
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c1b      	lsrs	r3, r3, #16
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	4599      	cmp	r9, r3
 8000f62:	d909      	bls.n	8000f78 <__aeabi_ddiv+0x2a0>
 8000f64:	4443      	add	r3, r8
 8000f66:	1e6a      	subs	r2, r5, #1
 8000f68:	4598      	cmp	r8, r3
 8000f6a:	d900      	bls.n	8000f6e <__aeabi_ddiv+0x296>
 8000f6c:	e11a      	b.n	80011a4 <__aeabi_ddiv+0x4cc>
 8000f6e:	4599      	cmp	r9, r3
 8000f70:	d800      	bhi.n	8000f74 <__aeabi_ddiv+0x29c>
 8000f72:	e117      	b.n	80011a4 <__aeabi_ddiv+0x4cc>
 8000f74:	3d02      	subs	r5, #2
 8000f76:	4443      	add	r3, r8
 8000f78:	464a      	mov	r2, r9
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	465a      	mov	r2, fp
 8000f7e:	0412      	lsls	r2, r2, #16
 8000f80:	432a      	orrs	r2, r5
 8000f82:	9903      	ldr	r1, [sp, #12]
 8000f84:	4693      	mov	fp, r2
 8000f86:	0c10      	lsrs	r0, r2, #16
 8000f88:	0c0a      	lsrs	r2, r1, #16
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	0409      	lsls	r1, r1, #16
 8000f8e:	465a      	mov	r2, fp
 8000f90:	0c09      	lsrs	r1, r1, #16
 8000f92:	464e      	mov	r6, r9
 8000f94:	000d      	movs	r5, r1
 8000f96:	0412      	lsls	r2, r2, #16
 8000f98:	0c12      	lsrs	r2, r2, #16
 8000f9a:	4345      	muls	r5, r0
 8000f9c:	9105      	str	r1, [sp, #20]
 8000f9e:	4351      	muls	r1, r2
 8000fa0:	4372      	muls	r2, r6
 8000fa2:	4370      	muls	r0, r6
 8000fa4:	1952      	adds	r2, r2, r5
 8000fa6:	0c0e      	lsrs	r6, r1, #16
 8000fa8:	18b2      	adds	r2, r6, r2
 8000faa:	4295      	cmp	r5, r2
 8000fac:	d903      	bls.n	8000fb6 <__aeabi_ddiv+0x2de>
 8000fae:	2580      	movs	r5, #128	; 0x80
 8000fb0:	026d      	lsls	r5, r5, #9
 8000fb2:	46ac      	mov	ip, r5
 8000fb4:	4460      	add	r0, ip
 8000fb6:	0c15      	lsrs	r5, r2, #16
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0412      	lsls	r2, r2, #16
 8000fbc:	0c09      	lsrs	r1, r1, #16
 8000fbe:	1828      	adds	r0, r5, r0
 8000fc0:	1852      	adds	r2, r2, r1
 8000fc2:	4283      	cmp	r3, r0
 8000fc4:	d200      	bcs.n	8000fc8 <__aeabi_ddiv+0x2f0>
 8000fc6:	e0ce      	b.n	8001166 <__aeabi_ddiv+0x48e>
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x2f4>
 8000fca:	e0c8      	b.n	800115e <__aeabi_ddiv+0x486>
 8000fcc:	1a1d      	subs	r5, r3, r0
 8000fce:	4653      	mov	r3, sl
 8000fd0:	1a9e      	subs	r6, r3, r2
 8000fd2:	45b2      	cmp	sl, r6
 8000fd4:	4192      	sbcs	r2, r2
 8000fd6:	4252      	negs	r2, r2
 8000fd8:	1aab      	subs	r3, r5, r2
 8000fda:	469a      	mov	sl, r3
 8000fdc:	4598      	cmp	r8, r3
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x30a>
 8000fe0:	e117      	b.n	8001212 <__aeabi_ddiv+0x53a>
 8000fe2:	0039      	movs	r1, r7
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff f88b 	bl	8000100 <__udivsi3>
 8000fea:	9b01      	ldr	r3, [sp, #4]
 8000fec:	0005      	movs	r5, r0
 8000fee:	4343      	muls	r3, r0
 8000ff0:	0039      	movs	r1, r7
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	9304      	str	r3, [sp, #16]
 8000ff6:	f7ff f909 	bl	800020c <__aeabi_uidivmod>
 8000ffa:	9804      	ldr	r0, [sp, #16]
 8000ffc:	040b      	lsls	r3, r1, #16
 8000ffe:	0c31      	lsrs	r1, r6, #16
 8001000:	4319      	orrs	r1, r3
 8001002:	4288      	cmp	r0, r1
 8001004:	d909      	bls.n	800101a <__aeabi_ddiv+0x342>
 8001006:	4441      	add	r1, r8
 8001008:	1e6b      	subs	r3, r5, #1
 800100a:	4588      	cmp	r8, r1
 800100c:	d900      	bls.n	8001010 <__aeabi_ddiv+0x338>
 800100e:	e107      	b.n	8001220 <__aeabi_ddiv+0x548>
 8001010:	4288      	cmp	r0, r1
 8001012:	d800      	bhi.n	8001016 <__aeabi_ddiv+0x33e>
 8001014:	e104      	b.n	8001220 <__aeabi_ddiv+0x548>
 8001016:	3d02      	subs	r5, #2
 8001018:	4441      	add	r1, r8
 800101a:	9b04      	ldr	r3, [sp, #16]
 800101c:	1acb      	subs	r3, r1, r3
 800101e:	0018      	movs	r0, r3
 8001020:	0039      	movs	r1, r7
 8001022:	9304      	str	r3, [sp, #16]
 8001024:	f7ff f86c 	bl	8000100 <__udivsi3>
 8001028:	9b01      	ldr	r3, [sp, #4]
 800102a:	4682      	mov	sl, r0
 800102c:	4343      	muls	r3, r0
 800102e:	0039      	movs	r1, r7
 8001030:	9804      	ldr	r0, [sp, #16]
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	f7ff f8ea 	bl	800020c <__aeabi_uidivmod>
 8001038:	9801      	ldr	r0, [sp, #4]
 800103a:	040b      	lsls	r3, r1, #16
 800103c:	0431      	lsls	r1, r6, #16
 800103e:	0c09      	lsrs	r1, r1, #16
 8001040:	4319      	orrs	r1, r3
 8001042:	4288      	cmp	r0, r1
 8001044:	d90d      	bls.n	8001062 <__aeabi_ddiv+0x38a>
 8001046:	4653      	mov	r3, sl
 8001048:	4441      	add	r1, r8
 800104a:	3b01      	subs	r3, #1
 800104c:	4588      	cmp	r8, r1
 800104e:	d900      	bls.n	8001052 <__aeabi_ddiv+0x37a>
 8001050:	e0e8      	b.n	8001224 <__aeabi_ddiv+0x54c>
 8001052:	4288      	cmp	r0, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x380>
 8001056:	e0e5      	b.n	8001224 <__aeabi_ddiv+0x54c>
 8001058:	2302      	movs	r3, #2
 800105a:	425b      	negs	r3, r3
 800105c:	469c      	mov	ip, r3
 800105e:	4441      	add	r1, r8
 8001060:	44e2      	add	sl, ip
 8001062:	9b01      	ldr	r3, [sp, #4]
 8001064:	042d      	lsls	r5, r5, #16
 8001066:	1ace      	subs	r6, r1, r3
 8001068:	4651      	mov	r1, sl
 800106a:	4329      	orrs	r1, r5
 800106c:	9d05      	ldr	r5, [sp, #20]
 800106e:	464f      	mov	r7, r9
 8001070:	002a      	movs	r2, r5
 8001072:	040b      	lsls	r3, r1, #16
 8001074:	0c08      	lsrs	r0, r1, #16
 8001076:	0c1b      	lsrs	r3, r3, #16
 8001078:	435a      	muls	r2, r3
 800107a:	4345      	muls	r5, r0
 800107c:	437b      	muls	r3, r7
 800107e:	4378      	muls	r0, r7
 8001080:	195b      	adds	r3, r3, r5
 8001082:	0c17      	lsrs	r7, r2, #16
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	429d      	cmp	r5, r3
 8001088:	d903      	bls.n	8001092 <__aeabi_ddiv+0x3ba>
 800108a:	2580      	movs	r5, #128	; 0x80
 800108c:	026d      	lsls	r5, r5, #9
 800108e:	46ac      	mov	ip, r5
 8001090:	4460      	add	r0, ip
 8001092:	0c1d      	lsrs	r5, r3, #16
 8001094:	0412      	lsls	r2, r2, #16
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	0c12      	lsrs	r2, r2, #16
 800109a:	1828      	adds	r0, r5, r0
 800109c:	189b      	adds	r3, r3, r2
 800109e:	4286      	cmp	r6, r0
 80010a0:	d200      	bcs.n	80010a4 <__aeabi_ddiv+0x3cc>
 80010a2:	e093      	b.n	80011cc <__aeabi_ddiv+0x4f4>
 80010a4:	d100      	bne.n	80010a8 <__aeabi_ddiv+0x3d0>
 80010a6:	e08e      	b.n	80011c6 <__aeabi_ddiv+0x4ee>
 80010a8:	2301      	movs	r3, #1
 80010aa:	4319      	orrs	r1, r3
 80010ac:	4ba0      	ldr	r3, [pc, #640]	; (8001330 <__aeabi_ddiv+0x658>)
 80010ae:	18e3      	adds	r3, r4, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x3de>
 80010b4:	e099      	b.n	80011ea <__aeabi_ddiv+0x512>
 80010b6:	074a      	lsls	r2, r1, #29
 80010b8:	d000      	beq.n	80010bc <__aeabi_ddiv+0x3e4>
 80010ba:	e09e      	b.n	80011fa <__aeabi_ddiv+0x522>
 80010bc:	465a      	mov	r2, fp
 80010be:	01d2      	lsls	r2, r2, #7
 80010c0:	d506      	bpl.n	80010d0 <__aeabi_ddiv+0x3f8>
 80010c2:	465a      	mov	r2, fp
 80010c4:	4b9b      	ldr	r3, [pc, #620]	; (8001334 <__aeabi_ddiv+0x65c>)
 80010c6:	401a      	ands	r2, r3
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	4693      	mov	fp, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	18e3      	adds	r3, r4, r3
 80010d0:	4a99      	ldr	r2, [pc, #612]	; (8001338 <__aeabi_ddiv+0x660>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	dd68      	ble.n	80011a8 <__aeabi_ddiv+0x4d0>
 80010d6:	2301      	movs	r3, #1
 80010d8:	9a02      	ldr	r2, [sp, #8]
 80010da:	4c98      	ldr	r4, [pc, #608]	; (800133c <__aeabi_ddiv+0x664>)
 80010dc:	401a      	ands	r2, r3
 80010de:	2300      	movs	r3, #0
 80010e0:	4694      	mov	ip, r2
 80010e2:	4698      	mov	r8, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	e6c5      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	464b      	mov	r3, r9
 80010ec:	0312      	lsls	r2, r2, #12
 80010ee:	4213      	tst	r3, r2
 80010f0:	d00a      	beq.n	8001108 <__aeabi_ddiv+0x430>
 80010f2:	465b      	mov	r3, fp
 80010f4:	4213      	tst	r3, r2
 80010f6:	d106      	bne.n	8001106 <__aeabi_ddiv+0x42e>
 80010f8:	431a      	orrs	r2, r3
 80010fa:	0312      	lsls	r2, r2, #12
 80010fc:	0b12      	lsrs	r2, r2, #12
 80010fe:	46ac      	mov	ip, r5
 8001100:	4688      	mov	r8, r1
 8001102:	4c8e      	ldr	r4, [pc, #568]	; (800133c <__aeabi_ddiv+0x664>)
 8001104:	e6b6      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 8001106:	464b      	mov	r3, r9
 8001108:	431a      	orrs	r2, r3
 800110a:	0312      	lsls	r2, r2, #12
 800110c:	0b12      	lsrs	r2, r2, #12
 800110e:	46bc      	mov	ip, r7
 8001110:	4c8a      	ldr	r4, [pc, #552]	; (800133c <__aeabi_ddiv+0x664>)
 8001112:	e6af      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 8001114:	0003      	movs	r3, r0
 8001116:	465a      	mov	r2, fp
 8001118:	3b28      	subs	r3, #40	; 0x28
 800111a:	409a      	lsls	r2, r3
 800111c:	2300      	movs	r3, #0
 800111e:	4691      	mov	r9, r2
 8001120:	4698      	mov	r8, r3
 8001122:	e657      	b.n	8000dd4 <__aeabi_ddiv+0xfc>
 8001124:	4658      	mov	r0, fp
 8001126:	f001 f84f 	bl	80021c8 <__clzsi2>
 800112a:	3020      	adds	r0, #32
 800112c:	e640      	b.n	8000db0 <__aeabi_ddiv+0xd8>
 800112e:	0003      	movs	r3, r0
 8001130:	4652      	mov	r2, sl
 8001132:	3b28      	subs	r3, #40	; 0x28
 8001134:	409a      	lsls	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	4693      	mov	fp, r2
 800113a:	e677      	b.n	8000e2c <__aeabi_ddiv+0x154>
 800113c:	f001 f844 	bl	80021c8 <__clzsi2>
 8001140:	3020      	adds	r0, #32
 8001142:	e65f      	b.n	8000e04 <__aeabi_ddiv+0x12c>
 8001144:	4588      	cmp	r8, r1
 8001146:	d200      	bcs.n	800114a <__aeabi_ddiv+0x472>
 8001148:	e6c7      	b.n	8000eda <__aeabi_ddiv+0x202>
 800114a:	464b      	mov	r3, r9
 800114c:	07de      	lsls	r6, r3, #31
 800114e:	085d      	lsrs	r5, r3, #1
 8001150:	4643      	mov	r3, r8
 8001152:	085b      	lsrs	r3, r3, #1
 8001154:	431e      	orrs	r6, r3
 8001156:	4643      	mov	r3, r8
 8001158:	07db      	lsls	r3, r3, #31
 800115a:	469a      	mov	sl, r3
 800115c:	e6c2      	b.n	8000ee4 <__aeabi_ddiv+0x20c>
 800115e:	2500      	movs	r5, #0
 8001160:	4592      	cmp	sl, r2
 8001162:	d300      	bcc.n	8001166 <__aeabi_ddiv+0x48e>
 8001164:	e733      	b.n	8000fce <__aeabi_ddiv+0x2f6>
 8001166:	9e03      	ldr	r6, [sp, #12]
 8001168:	4659      	mov	r1, fp
 800116a:	46b4      	mov	ip, r6
 800116c:	44e2      	add	sl, ip
 800116e:	45b2      	cmp	sl, r6
 8001170:	41ad      	sbcs	r5, r5
 8001172:	426d      	negs	r5, r5
 8001174:	4445      	add	r5, r8
 8001176:	18eb      	adds	r3, r5, r3
 8001178:	3901      	subs	r1, #1
 800117a:	4598      	cmp	r8, r3
 800117c:	d207      	bcs.n	800118e <__aeabi_ddiv+0x4b6>
 800117e:	4298      	cmp	r0, r3
 8001180:	d900      	bls.n	8001184 <__aeabi_ddiv+0x4ac>
 8001182:	e07f      	b.n	8001284 <__aeabi_ddiv+0x5ac>
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x4b0>
 8001186:	e0bc      	b.n	8001302 <__aeabi_ddiv+0x62a>
 8001188:	1a1d      	subs	r5, r3, r0
 800118a:	468b      	mov	fp, r1
 800118c:	e71f      	b.n	8000fce <__aeabi_ddiv+0x2f6>
 800118e:	4598      	cmp	r8, r3
 8001190:	d1fa      	bne.n	8001188 <__aeabi_ddiv+0x4b0>
 8001192:	9d03      	ldr	r5, [sp, #12]
 8001194:	4555      	cmp	r5, sl
 8001196:	d9f2      	bls.n	800117e <__aeabi_ddiv+0x4a6>
 8001198:	4643      	mov	r3, r8
 800119a:	468b      	mov	fp, r1
 800119c:	1a1d      	subs	r5, r3, r0
 800119e:	e716      	b.n	8000fce <__aeabi_ddiv+0x2f6>
 80011a0:	469b      	mov	fp, r3
 80011a2:	e6ca      	b.n	8000f3a <__aeabi_ddiv+0x262>
 80011a4:	0015      	movs	r5, r2
 80011a6:	e6e7      	b.n	8000f78 <__aeabi_ddiv+0x2a0>
 80011a8:	465a      	mov	r2, fp
 80011aa:	08c9      	lsrs	r1, r1, #3
 80011ac:	0752      	lsls	r2, r2, #29
 80011ae:	430a      	orrs	r2, r1
 80011b0:	055b      	lsls	r3, r3, #21
 80011b2:	4690      	mov	r8, r2
 80011b4:	0d5c      	lsrs	r4, r3, #21
 80011b6:	465a      	mov	r2, fp
 80011b8:	2301      	movs	r3, #1
 80011ba:	9902      	ldr	r1, [sp, #8]
 80011bc:	0252      	lsls	r2, r2, #9
 80011be:	4019      	ands	r1, r3
 80011c0:	0b12      	lsrs	r2, r2, #12
 80011c2:	468c      	mov	ip, r1
 80011c4:	e656      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x4f4>
 80011ca:	e76f      	b.n	80010ac <__aeabi_ddiv+0x3d4>
 80011cc:	4446      	add	r6, r8
 80011ce:	1e4a      	subs	r2, r1, #1
 80011d0:	45b0      	cmp	r8, r6
 80011d2:	d929      	bls.n	8001228 <__aeabi_ddiv+0x550>
 80011d4:	0011      	movs	r1, r2
 80011d6:	4286      	cmp	r6, r0
 80011d8:	d000      	beq.n	80011dc <__aeabi_ddiv+0x504>
 80011da:	e765      	b.n	80010a8 <__aeabi_ddiv+0x3d0>
 80011dc:	9a03      	ldr	r2, [sp, #12]
 80011de:	4293      	cmp	r3, r2
 80011e0:	d000      	beq.n	80011e4 <__aeabi_ddiv+0x50c>
 80011e2:	e761      	b.n	80010a8 <__aeabi_ddiv+0x3d0>
 80011e4:	e762      	b.n	80010ac <__aeabi_ddiv+0x3d4>
 80011e6:	2101      	movs	r1, #1
 80011e8:	4249      	negs	r1, r1
 80011ea:	2001      	movs	r0, #1
 80011ec:	1ac2      	subs	r2, r0, r3
 80011ee:	2a38      	cmp	r2, #56	; 0x38
 80011f0:	dd21      	ble.n	8001236 <__aeabi_ddiv+0x55e>
 80011f2:	9b02      	ldr	r3, [sp, #8]
 80011f4:	4003      	ands	r3, r0
 80011f6:	469c      	mov	ip, r3
 80011f8:	e638      	b.n	8000e6c <__aeabi_ddiv+0x194>
 80011fa:	220f      	movs	r2, #15
 80011fc:	400a      	ands	r2, r1
 80011fe:	2a04      	cmp	r2, #4
 8001200:	d100      	bne.n	8001204 <__aeabi_ddiv+0x52c>
 8001202:	e75b      	b.n	80010bc <__aeabi_ddiv+0x3e4>
 8001204:	000a      	movs	r2, r1
 8001206:	1d11      	adds	r1, r2, #4
 8001208:	4291      	cmp	r1, r2
 800120a:	4192      	sbcs	r2, r2
 800120c:	4252      	negs	r2, r2
 800120e:	4493      	add	fp, r2
 8001210:	e754      	b.n	80010bc <__aeabi_ddiv+0x3e4>
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <__aeabi_ddiv+0x658>)
 8001214:	18e3      	adds	r3, r4, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	dde5      	ble.n	80011e6 <__aeabi_ddiv+0x50e>
 800121a:	2201      	movs	r2, #1
 800121c:	4252      	negs	r2, r2
 800121e:	e7f2      	b.n	8001206 <__aeabi_ddiv+0x52e>
 8001220:	001d      	movs	r5, r3
 8001222:	e6fa      	b.n	800101a <__aeabi_ddiv+0x342>
 8001224:	469a      	mov	sl, r3
 8001226:	e71c      	b.n	8001062 <__aeabi_ddiv+0x38a>
 8001228:	42b0      	cmp	r0, r6
 800122a:	d839      	bhi.n	80012a0 <__aeabi_ddiv+0x5c8>
 800122c:	d06e      	beq.n	800130c <__aeabi_ddiv+0x634>
 800122e:	0011      	movs	r1, r2
 8001230:	e73a      	b.n	80010a8 <__aeabi_ddiv+0x3d0>
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	e73a      	b.n	80010ac <__aeabi_ddiv+0x3d4>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc3c      	bgt.n	80012b4 <__aeabi_ddiv+0x5dc>
 800123a:	2320      	movs	r3, #32
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	000c      	movs	r4, r1
 8001240:	4658      	mov	r0, fp
 8001242:	4099      	lsls	r1, r3
 8001244:	4098      	lsls	r0, r3
 8001246:	1e4b      	subs	r3, r1, #1
 8001248:	4199      	sbcs	r1, r3
 800124a:	465b      	mov	r3, fp
 800124c:	40d4      	lsrs	r4, r2
 800124e:	40d3      	lsrs	r3, r2
 8001250:	4320      	orrs	r0, r4
 8001252:	4308      	orrs	r0, r1
 8001254:	001a      	movs	r2, r3
 8001256:	0743      	lsls	r3, r0, #29
 8001258:	d009      	beq.n	800126e <__aeabi_ddiv+0x596>
 800125a:	230f      	movs	r3, #15
 800125c:	4003      	ands	r3, r0
 800125e:	2b04      	cmp	r3, #4
 8001260:	d005      	beq.n	800126e <__aeabi_ddiv+0x596>
 8001262:	0001      	movs	r1, r0
 8001264:	1d08      	adds	r0, r1, #4
 8001266:	4288      	cmp	r0, r1
 8001268:	419b      	sbcs	r3, r3
 800126a:	425b      	negs	r3, r3
 800126c:	18d2      	adds	r2, r2, r3
 800126e:	0213      	lsls	r3, r2, #8
 8001270:	d53a      	bpl.n	80012e8 <__aeabi_ddiv+0x610>
 8001272:	2301      	movs	r3, #1
 8001274:	9a02      	ldr	r2, [sp, #8]
 8001276:	2401      	movs	r4, #1
 8001278:	401a      	ands	r2, r3
 800127a:	2300      	movs	r3, #0
 800127c:	4694      	mov	ip, r2
 800127e:	4698      	mov	r8, r3
 8001280:	2200      	movs	r2, #0
 8001282:	e5f7      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 8001284:	2102      	movs	r1, #2
 8001286:	4249      	negs	r1, r1
 8001288:	468c      	mov	ip, r1
 800128a:	9d03      	ldr	r5, [sp, #12]
 800128c:	44e3      	add	fp, ip
 800128e:	46ac      	mov	ip, r5
 8001290:	44e2      	add	sl, ip
 8001292:	45aa      	cmp	sl, r5
 8001294:	41ad      	sbcs	r5, r5
 8001296:	426d      	negs	r5, r5
 8001298:	4445      	add	r5, r8
 800129a:	18ed      	adds	r5, r5, r3
 800129c:	1a2d      	subs	r5, r5, r0
 800129e:	e696      	b.n	8000fce <__aeabi_ddiv+0x2f6>
 80012a0:	1e8a      	subs	r2, r1, #2
 80012a2:	9903      	ldr	r1, [sp, #12]
 80012a4:	004d      	lsls	r5, r1, #1
 80012a6:	428d      	cmp	r5, r1
 80012a8:	4189      	sbcs	r1, r1
 80012aa:	4249      	negs	r1, r1
 80012ac:	4441      	add	r1, r8
 80012ae:	1876      	adds	r6, r6, r1
 80012b0:	9503      	str	r5, [sp, #12]
 80012b2:	e78f      	b.n	80011d4 <__aeabi_ddiv+0x4fc>
 80012b4:	201f      	movs	r0, #31
 80012b6:	4240      	negs	r0, r0
 80012b8:	1ac3      	subs	r3, r0, r3
 80012ba:	4658      	mov	r0, fp
 80012bc:	40d8      	lsrs	r0, r3
 80012be:	0003      	movs	r3, r0
 80012c0:	2a20      	cmp	r2, #32
 80012c2:	d028      	beq.n	8001316 <__aeabi_ddiv+0x63e>
 80012c4:	2040      	movs	r0, #64	; 0x40
 80012c6:	465d      	mov	r5, fp
 80012c8:	1a82      	subs	r2, r0, r2
 80012ca:	4095      	lsls	r5, r2
 80012cc:	4329      	orrs	r1, r5
 80012ce:	1e4a      	subs	r2, r1, #1
 80012d0:	4191      	sbcs	r1, r2
 80012d2:	4319      	orrs	r1, r3
 80012d4:	2307      	movs	r3, #7
 80012d6:	2200      	movs	r2, #0
 80012d8:	400b      	ands	r3, r1
 80012da:	d009      	beq.n	80012f0 <__aeabi_ddiv+0x618>
 80012dc:	230f      	movs	r3, #15
 80012de:	2200      	movs	r2, #0
 80012e0:	400b      	ands	r3, r1
 80012e2:	0008      	movs	r0, r1
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d1bd      	bne.n	8001264 <__aeabi_ddiv+0x58c>
 80012e8:	0001      	movs	r1, r0
 80012ea:	0753      	lsls	r3, r2, #29
 80012ec:	0252      	lsls	r2, r2, #9
 80012ee:	0b12      	lsrs	r2, r2, #12
 80012f0:	08c9      	lsrs	r1, r1, #3
 80012f2:	4319      	orrs	r1, r3
 80012f4:	2301      	movs	r3, #1
 80012f6:	4688      	mov	r8, r1
 80012f8:	9902      	ldr	r1, [sp, #8]
 80012fa:	2400      	movs	r4, #0
 80012fc:	4019      	ands	r1, r3
 80012fe:	468c      	mov	ip, r1
 8001300:	e5b8      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 8001302:	4552      	cmp	r2, sl
 8001304:	d8be      	bhi.n	8001284 <__aeabi_ddiv+0x5ac>
 8001306:	468b      	mov	fp, r1
 8001308:	2500      	movs	r5, #0
 800130a:	e660      	b.n	8000fce <__aeabi_ddiv+0x2f6>
 800130c:	9d03      	ldr	r5, [sp, #12]
 800130e:	429d      	cmp	r5, r3
 8001310:	d3c6      	bcc.n	80012a0 <__aeabi_ddiv+0x5c8>
 8001312:	0011      	movs	r1, r2
 8001314:	e762      	b.n	80011dc <__aeabi_ddiv+0x504>
 8001316:	2500      	movs	r5, #0
 8001318:	e7d8      	b.n	80012cc <__aeabi_ddiv+0x5f4>
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	465b      	mov	r3, fp
 800131e:	0312      	lsls	r2, r2, #12
 8001320:	431a      	orrs	r2, r3
 8001322:	9b01      	ldr	r3, [sp, #4]
 8001324:	0312      	lsls	r2, r2, #12
 8001326:	0b12      	lsrs	r2, r2, #12
 8001328:	469c      	mov	ip, r3
 800132a:	4688      	mov	r8, r1
 800132c:	4c03      	ldr	r4, [pc, #12]	; (800133c <__aeabi_ddiv+0x664>)
 800132e:	e5a1      	b.n	8000e74 <__aeabi_ddiv+0x19c>
 8001330:	000003ff 	.word	0x000003ff
 8001334:	feffffff 	.word	0xfeffffff
 8001338:	000007fe 	.word	0x000007fe
 800133c:	000007ff 	.word	0x000007ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464f      	mov	r7, r9
 8001344:	4646      	mov	r6, r8
 8001346:	46d6      	mov	lr, sl
 8001348:	005c      	lsls	r4, r3, #1
 800134a:	b5c0      	push	{r6, r7, lr}
 800134c:	031f      	lsls	r7, r3, #12
 800134e:	0fdb      	lsrs	r3, r3, #31
 8001350:	469a      	mov	sl, r3
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <__eqdf2+0x70>)
 8001354:	030e      	lsls	r6, r1, #12
 8001356:	004d      	lsls	r5, r1, #1
 8001358:	4684      	mov	ip, r0
 800135a:	4680      	mov	r8, r0
 800135c:	0b36      	lsrs	r6, r6, #12
 800135e:	0d6d      	lsrs	r5, r5, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	4691      	mov	r9, r2
 8001364:	0b3f      	lsrs	r7, r7, #12
 8001366:	0d64      	lsrs	r4, r4, #21
 8001368:	2001      	movs	r0, #1
 800136a:	429d      	cmp	r5, r3
 800136c:	d008      	beq.n	8001380 <__eqdf2+0x40>
 800136e:	429c      	cmp	r4, r3
 8001370:	d001      	beq.n	8001376 <__eqdf2+0x36>
 8001372:	42a5      	cmp	r5, r4
 8001374:	d00b      	beq.n	800138e <__eqdf2+0x4e>
 8001376:	bc1c      	pop	{r2, r3, r4}
 8001378:	4690      	mov	r8, r2
 800137a:	4699      	mov	r9, r3
 800137c:	46a2      	mov	sl, r4
 800137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001380:	4663      	mov	r3, ip
 8001382:	4333      	orrs	r3, r6
 8001384:	d1f7      	bne.n	8001376 <__eqdf2+0x36>
 8001386:	42ac      	cmp	r4, r5
 8001388:	d1f5      	bne.n	8001376 <__eqdf2+0x36>
 800138a:	433a      	orrs	r2, r7
 800138c:	d1f3      	bne.n	8001376 <__eqdf2+0x36>
 800138e:	2001      	movs	r0, #1
 8001390:	42be      	cmp	r6, r7
 8001392:	d1f0      	bne.n	8001376 <__eqdf2+0x36>
 8001394:	45c8      	cmp	r8, r9
 8001396:	d1ee      	bne.n	8001376 <__eqdf2+0x36>
 8001398:	4551      	cmp	r1, sl
 800139a:	d007      	beq.n	80013ac <__eqdf2+0x6c>
 800139c:	2d00      	cmp	r5, #0
 800139e:	d1ea      	bne.n	8001376 <__eqdf2+0x36>
 80013a0:	4663      	mov	r3, ip
 80013a2:	431e      	orrs	r6, r3
 80013a4:	0030      	movs	r0, r6
 80013a6:	1e46      	subs	r6, r0, #1
 80013a8:	41b0      	sbcs	r0, r6
 80013aa:	e7e4      	b.n	8001376 <__eqdf2+0x36>
 80013ac:	2000      	movs	r0, #0
 80013ae:	e7e2      	b.n	8001376 <__eqdf2+0x36>
 80013b0:	000007ff 	.word	0x000007ff

080013b4 <__gedf2>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	4645      	mov	r5, r8
 80013b8:	46de      	mov	lr, fp
 80013ba:	4657      	mov	r7, sl
 80013bc:	464e      	mov	r6, r9
 80013be:	b5e0      	push	{r5, r6, r7, lr}
 80013c0:	031f      	lsls	r7, r3, #12
 80013c2:	0b3d      	lsrs	r5, r7, #12
 80013c4:	4f2c      	ldr	r7, [pc, #176]	; (8001478 <__gedf2+0xc4>)
 80013c6:	030e      	lsls	r6, r1, #12
 80013c8:	004c      	lsls	r4, r1, #1
 80013ca:	46ab      	mov	fp, r5
 80013cc:	005d      	lsls	r5, r3, #1
 80013ce:	4684      	mov	ip, r0
 80013d0:	0b36      	lsrs	r6, r6, #12
 80013d2:	0d64      	lsrs	r4, r4, #21
 80013d4:	0fc9      	lsrs	r1, r1, #31
 80013d6:	4690      	mov	r8, r2
 80013d8:	0d6d      	lsrs	r5, r5, #21
 80013da:	0fdb      	lsrs	r3, r3, #31
 80013dc:	42bc      	cmp	r4, r7
 80013de:	d02a      	beq.n	8001436 <__gedf2+0x82>
 80013e0:	4f25      	ldr	r7, [pc, #148]	; (8001478 <__gedf2+0xc4>)
 80013e2:	42bd      	cmp	r5, r7
 80013e4:	d02d      	beq.n	8001442 <__gedf2+0x8e>
 80013e6:	2c00      	cmp	r4, #0
 80013e8:	d10f      	bne.n	800140a <__gedf2+0x56>
 80013ea:	4330      	orrs	r0, r6
 80013ec:	0007      	movs	r7, r0
 80013ee:	4681      	mov	r9, r0
 80013f0:	4278      	negs	r0, r7
 80013f2:	4178      	adcs	r0, r7
 80013f4:	b2c0      	uxtb	r0, r0
 80013f6:	2d00      	cmp	r5, #0
 80013f8:	d117      	bne.n	800142a <__gedf2+0x76>
 80013fa:	465f      	mov	r7, fp
 80013fc:	433a      	orrs	r2, r7
 80013fe:	d114      	bne.n	800142a <__gedf2+0x76>
 8001400:	464b      	mov	r3, r9
 8001402:	2000      	movs	r0, #0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00a      	beq.n	800141e <__gedf2+0x6a>
 8001408:	e006      	b.n	8001418 <__gedf2+0x64>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d102      	bne.n	8001414 <__gedf2+0x60>
 800140e:	4658      	mov	r0, fp
 8001410:	4302      	orrs	r2, r0
 8001412:	d001      	beq.n	8001418 <__gedf2+0x64>
 8001414:	4299      	cmp	r1, r3
 8001416:	d018      	beq.n	800144a <__gedf2+0x96>
 8001418:	4248      	negs	r0, r1
 800141a:	2101      	movs	r1, #1
 800141c:	4308      	orrs	r0, r1
 800141e:	bc3c      	pop	{r2, r3, r4, r5}
 8001420:	4690      	mov	r8, r2
 8001422:	4699      	mov	r9, r3
 8001424:	46a2      	mov	sl, r4
 8001426:	46ab      	mov	fp, r5
 8001428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142a:	2800      	cmp	r0, #0
 800142c:	d0f2      	beq.n	8001414 <__gedf2+0x60>
 800142e:	2001      	movs	r0, #1
 8001430:	3b01      	subs	r3, #1
 8001432:	4318      	orrs	r0, r3
 8001434:	e7f3      	b.n	800141e <__gedf2+0x6a>
 8001436:	0037      	movs	r7, r6
 8001438:	4307      	orrs	r7, r0
 800143a:	d0d1      	beq.n	80013e0 <__gedf2+0x2c>
 800143c:	2002      	movs	r0, #2
 800143e:	4240      	negs	r0, r0
 8001440:	e7ed      	b.n	800141e <__gedf2+0x6a>
 8001442:	465f      	mov	r7, fp
 8001444:	4317      	orrs	r7, r2
 8001446:	d0ce      	beq.n	80013e6 <__gedf2+0x32>
 8001448:	e7f8      	b.n	800143c <__gedf2+0x88>
 800144a:	42ac      	cmp	r4, r5
 800144c:	dce4      	bgt.n	8001418 <__gedf2+0x64>
 800144e:	da03      	bge.n	8001458 <__gedf2+0xa4>
 8001450:	1e48      	subs	r0, r1, #1
 8001452:	2101      	movs	r1, #1
 8001454:	4308      	orrs	r0, r1
 8001456:	e7e2      	b.n	800141e <__gedf2+0x6a>
 8001458:	455e      	cmp	r6, fp
 800145a:	d8dd      	bhi.n	8001418 <__gedf2+0x64>
 800145c:	d006      	beq.n	800146c <__gedf2+0xb8>
 800145e:	2000      	movs	r0, #0
 8001460:	455e      	cmp	r6, fp
 8001462:	d2dc      	bcs.n	800141e <__gedf2+0x6a>
 8001464:	2301      	movs	r3, #1
 8001466:	1e48      	subs	r0, r1, #1
 8001468:	4318      	orrs	r0, r3
 800146a:	e7d8      	b.n	800141e <__gedf2+0x6a>
 800146c:	45c4      	cmp	ip, r8
 800146e:	d8d3      	bhi.n	8001418 <__gedf2+0x64>
 8001470:	2000      	movs	r0, #0
 8001472:	45c4      	cmp	ip, r8
 8001474:	d3f6      	bcc.n	8001464 <__gedf2+0xb0>
 8001476:	e7d2      	b.n	800141e <__gedf2+0x6a>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__ledf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	464e      	mov	r6, r9
 8001480:	4645      	mov	r5, r8
 8001482:	46de      	mov	lr, fp
 8001484:	4657      	mov	r7, sl
 8001486:	005c      	lsls	r4, r3, #1
 8001488:	b5e0      	push	{r5, r6, r7, lr}
 800148a:	031f      	lsls	r7, r3, #12
 800148c:	0fdb      	lsrs	r3, r3, #31
 800148e:	4699      	mov	r9, r3
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <__ledf2+0xc0>)
 8001492:	030e      	lsls	r6, r1, #12
 8001494:	004d      	lsls	r5, r1, #1
 8001496:	0fc9      	lsrs	r1, r1, #31
 8001498:	4684      	mov	ip, r0
 800149a:	0b36      	lsrs	r6, r6, #12
 800149c:	0d6d      	lsrs	r5, r5, #21
 800149e:	468b      	mov	fp, r1
 80014a0:	4690      	mov	r8, r2
 80014a2:	0b3f      	lsrs	r7, r7, #12
 80014a4:	0d64      	lsrs	r4, r4, #21
 80014a6:	429d      	cmp	r5, r3
 80014a8:	d020      	beq.n	80014ec <__ledf2+0x70>
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <__ledf2+0xc0>)
 80014ac:	429c      	cmp	r4, r3
 80014ae:	d022      	beq.n	80014f6 <__ledf2+0x7a>
 80014b0:	2d00      	cmp	r5, #0
 80014b2:	d112      	bne.n	80014da <__ledf2+0x5e>
 80014b4:	4330      	orrs	r0, r6
 80014b6:	4243      	negs	r3, r0
 80014b8:	4143      	adcs	r3, r0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d01f      	beq.n	8001500 <__ledf2+0x84>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00c      	beq.n	80014de <__ledf2+0x62>
 80014c4:	464b      	mov	r3, r9
 80014c6:	2001      	movs	r0, #1
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4303      	orrs	r3, r0
 80014cc:	0018      	movs	r0, r3
 80014ce:	bc3c      	pop	{r2, r3, r4, r5}
 80014d0:	4690      	mov	r8, r2
 80014d2:	4699      	mov	r9, r3
 80014d4:	46a2      	mov	sl, r4
 80014d6:	46ab      	mov	fp, r5
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014da:	2c00      	cmp	r4, #0
 80014dc:	d016      	beq.n	800150c <__ledf2+0x90>
 80014de:	45cb      	cmp	fp, r9
 80014e0:	d017      	beq.n	8001512 <__ledf2+0x96>
 80014e2:	465b      	mov	r3, fp
 80014e4:	4259      	negs	r1, r3
 80014e6:	2301      	movs	r3, #1
 80014e8:	430b      	orrs	r3, r1
 80014ea:	e7ef      	b.n	80014cc <__ledf2+0x50>
 80014ec:	0031      	movs	r1, r6
 80014ee:	2302      	movs	r3, #2
 80014f0:	4301      	orrs	r1, r0
 80014f2:	d1eb      	bne.n	80014cc <__ledf2+0x50>
 80014f4:	e7d9      	b.n	80014aa <__ledf2+0x2e>
 80014f6:	0039      	movs	r1, r7
 80014f8:	2302      	movs	r3, #2
 80014fa:	4311      	orrs	r1, r2
 80014fc:	d1e6      	bne.n	80014cc <__ledf2+0x50>
 80014fe:	e7d7      	b.n	80014b0 <__ledf2+0x34>
 8001500:	433a      	orrs	r2, r7
 8001502:	d1dd      	bne.n	80014c0 <__ledf2+0x44>
 8001504:	2300      	movs	r3, #0
 8001506:	2800      	cmp	r0, #0
 8001508:	d0e0      	beq.n	80014cc <__ledf2+0x50>
 800150a:	e7ea      	b.n	80014e2 <__ledf2+0x66>
 800150c:	433a      	orrs	r2, r7
 800150e:	d1e6      	bne.n	80014de <__ledf2+0x62>
 8001510:	e7e7      	b.n	80014e2 <__ledf2+0x66>
 8001512:	42a5      	cmp	r5, r4
 8001514:	dce5      	bgt.n	80014e2 <__ledf2+0x66>
 8001516:	db05      	blt.n	8001524 <__ledf2+0xa8>
 8001518:	42be      	cmp	r6, r7
 800151a:	d8e2      	bhi.n	80014e2 <__ledf2+0x66>
 800151c:	d007      	beq.n	800152e <__ledf2+0xb2>
 800151e:	2300      	movs	r3, #0
 8001520:	42be      	cmp	r6, r7
 8001522:	d2d3      	bcs.n	80014cc <__ledf2+0x50>
 8001524:	4659      	mov	r1, fp
 8001526:	2301      	movs	r3, #1
 8001528:	3901      	subs	r1, #1
 800152a:	430b      	orrs	r3, r1
 800152c:	e7ce      	b.n	80014cc <__ledf2+0x50>
 800152e:	45c4      	cmp	ip, r8
 8001530:	d8d7      	bhi.n	80014e2 <__ledf2+0x66>
 8001532:	2300      	movs	r3, #0
 8001534:	45c4      	cmp	ip, r8
 8001536:	d3f5      	bcc.n	8001524 <__ledf2+0xa8>
 8001538:	e7c8      	b.n	80014cc <__ledf2+0x50>
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	000007ff 	.word	0x000007ff

08001540 <__aeabi_dmul>:
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	4657      	mov	r7, sl
 8001544:	4645      	mov	r5, r8
 8001546:	46de      	mov	lr, fp
 8001548:	464e      	mov	r6, r9
 800154a:	b5e0      	push	{r5, r6, r7, lr}
 800154c:	030c      	lsls	r4, r1, #12
 800154e:	4698      	mov	r8, r3
 8001550:	004e      	lsls	r6, r1, #1
 8001552:	0b23      	lsrs	r3, r4, #12
 8001554:	b087      	sub	sp, #28
 8001556:	0007      	movs	r7, r0
 8001558:	4692      	mov	sl, r2
 800155a:	469b      	mov	fp, r3
 800155c:	0d76      	lsrs	r6, r6, #21
 800155e:	0fcd      	lsrs	r5, r1, #31
 8001560:	2e00      	cmp	r6, #0
 8001562:	d06b      	beq.n	800163c <__aeabi_dmul+0xfc>
 8001564:	4b6d      	ldr	r3, [pc, #436]	; (800171c <__aeabi_dmul+0x1dc>)
 8001566:	429e      	cmp	r6, r3
 8001568:	d035      	beq.n	80015d6 <__aeabi_dmul+0x96>
 800156a:	2480      	movs	r4, #128	; 0x80
 800156c:	465b      	mov	r3, fp
 800156e:	0f42      	lsrs	r2, r0, #29
 8001570:	0424      	lsls	r4, r4, #16
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4314      	orrs	r4, r2
 8001576:	431c      	orrs	r4, r3
 8001578:	00c3      	lsls	r3, r0, #3
 800157a:	4699      	mov	r9, r3
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <__aeabi_dmul+0x1e0>)
 800157e:	46a3      	mov	fp, r4
 8001580:	469c      	mov	ip, r3
 8001582:	2300      	movs	r3, #0
 8001584:	2700      	movs	r7, #0
 8001586:	4466      	add	r6, ip
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	4643      	mov	r3, r8
 800158c:	031c      	lsls	r4, r3, #12
 800158e:	005a      	lsls	r2, r3, #1
 8001590:	0fdb      	lsrs	r3, r3, #31
 8001592:	4650      	mov	r0, sl
 8001594:	0b24      	lsrs	r4, r4, #12
 8001596:	0d52      	lsrs	r2, r2, #21
 8001598:	4698      	mov	r8, r3
 800159a:	d100      	bne.n	800159e <__aeabi_dmul+0x5e>
 800159c:	e076      	b.n	800168c <__aeabi_dmul+0x14c>
 800159e:	4b5f      	ldr	r3, [pc, #380]	; (800171c <__aeabi_dmul+0x1dc>)
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d06d      	beq.n	8001680 <__aeabi_dmul+0x140>
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	0f41      	lsrs	r1, r0, #29
 80015a8:	041b      	lsls	r3, r3, #16
 80015aa:	430b      	orrs	r3, r1
 80015ac:	495c      	ldr	r1, [pc, #368]	; (8001720 <__aeabi_dmul+0x1e0>)
 80015ae:	00e4      	lsls	r4, r4, #3
 80015b0:	468c      	mov	ip, r1
 80015b2:	431c      	orrs	r4, r3
 80015b4:	00c3      	lsls	r3, r0, #3
 80015b6:	2000      	movs	r0, #0
 80015b8:	4462      	add	r2, ip
 80015ba:	4641      	mov	r1, r8
 80015bc:	18b6      	adds	r6, r6, r2
 80015be:	4069      	eors	r1, r5
 80015c0:	1c72      	adds	r2, r6, #1
 80015c2:	9101      	str	r1, [sp, #4]
 80015c4:	4694      	mov	ip, r2
 80015c6:	4307      	orrs	r7, r0
 80015c8:	2f0f      	cmp	r7, #15
 80015ca:	d900      	bls.n	80015ce <__aeabi_dmul+0x8e>
 80015cc:	e0b0      	b.n	8001730 <__aeabi_dmul+0x1f0>
 80015ce:	4a55      	ldr	r2, [pc, #340]	; (8001724 <__aeabi_dmul+0x1e4>)
 80015d0:	00bf      	lsls	r7, r7, #2
 80015d2:	59d2      	ldr	r2, [r2, r7]
 80015d4:	4697      	mov	pc, r2
 80015d6:	465b      	mov	r3, fp
 80015d8:	4303      	orrs	r3, r0
 80015da:	4699      	mov	r9, r3
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dmul+0xa0>
 80015de:	e087      	b.n	80016f0 <__aeabi_dmul+0x1b0>
 80015e0:	2300      	movs	r3, #0
 80015e2:	469b      	mov	fp, r3
 80015e4:	3302      	adds	r3, #2
 80015e6:	2708      	movs	r7, #8
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	e7ce      	b.n	800158a <__aeabi_dmul+0x4a>
 80015ec:	4642      	mov	r2, r8
 80015ee:	9201      	str	r2, [sp, #4]
 80015f0:	2802      	cmp	r0, #2
 80015f2:	d067      	beq.n	80016c4 <__aeabi_dmul+0x184>
 80015f4:	2803      	cmp	r0, #3
 80015f6:	d100      	bne.n	80015fa <__aeabi_dmul+0xba>
 80015f8:	e20e      	b.n	8001a18 <__aeabi_dmul+0x4d8>
 80015fa:	2801      	cmp	r0, #1
 80015fc:	d000      	beq.n	8001600 <__aeabi_dmul+0xc0>
 80015fe:	e162      	b.n	80018c6 <__aeabi_dmul+0x386>
 8001600:	2300      	movs	r3, #0
 8001602:	2400      	movs	r4, #0
 8001604:	2200      	movs	r2, #0
 8001606:	4699      	mov	r9, r3
 8001608:	9901      	ldr	r1, [sp, #4]
 800160a:	4001      	ands	r1, r0
 800160c:	b2cd      	uxtb	r5, r1
 800160e:	2100      	movs	r1, #0
 8001610:	0312      	lsls	r2, r2, #12
 8001612:	0d0b      	lsrs	r3, r1, #20
 8001614:	0b12      	lsrs	r2, r2, #12
 8001616:	051b      	lsls	r3, r3, #20
 8001618:	4313      	orrs	r3, r2
 800161a:	4a43      	ldr	r2, [pc, #268]	; (8001728 <__aeabi_dmul+0x1e8>)
 800161c:	0524      	lsls	r4, r4, #20
 800161e:	4013      	ands	r3, r2
 8001620:	431c      	orrs	r4, r3
 8001622:	0064      	lsls	r4, r4, #1
 8001624:	07ed      	lsls	r5, r5, #31
 8001626:	0864      	lsrs	r4, r4, #1
 8001628:	432c      	orrs	r4, r5
 800162a:	4648      	mov	r0, r9
 800162c:	0021      	movs	r1, r4
 800162e:	b007      	add	sp, #28
 8001630:	bc3c      	pop	{r2, r3, r4, r5}
 8001632:	4690      	mov	r8, r2
 8001634:	4699      	mov	r9, r3
 8001636:	46a2      	mov	sl, r4
 8001638:	46ab      	mov	fp, r5
 800163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163c:	4303      	orrs	r3, r0
 800163e:	4699      	mov	r9, r3
 8001640:	d04f      	beq.n	80016e2 <__aeabi_dmul+0x1a2>
 8001642:	465b      	mov	r3, fp
 8001644:	2b00      	cmp	r3, #0
 8001646:	d100      	bne.n	800164a <__aeabi_dmul+0x10a>
 8001648:	e189      	b.n	800195e <__aeabi_dmul+0x41e>
 800164a:	4658      	mov	r0, fp
 800164c:	f000 fdbc 	bl	80021c8 <__clzsi2>
 8001650:	0003      	movs	r3, r0
 8001652:	3b0b      	subs	r3, #11
 8001654:	2b1c      	cmp	r3, #28
 8001656:	dd00      	ble.n	800165a <__aeabi_dmul+0x11a>
 8001658:	e17a      	b.n	8001950 <__aeabi_dmul+0x410>
 800165a:	221d      	movs	r2, #29
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	003a      	movs	r2, r7
 8001660:	0001      	movs	r1, r0
 8001662:	465c      	mov	r4, fp
 8001664:	40da      	lsrs	r2, r3
 8001666:	3908      	subs	r1, #8
 8001668:	408c      	lsls	r4, r1
 800166a:	0013      	movs	r3, r2
 800166c:	408f      	lsls	r7, r1
 800166e:	4323      	orrs	r3, r4
 8001670:	469b      	mov	fp, r3
 8001672:	46b9      	mov	r9, r7
 8001674:	2300      	movs	r3, #0
 8001676:	4e2d      	ldr	r6, [pc, #180]	; (800172c <__aeabi_dmul+0x1ec>)
 8001678:	2700      	movs	r7, #0
 800167a:	1a36      	subs	r6, r6, r0
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	e784      	b.n	800158a <__aeabi_dmul+0x4a>
 8001680:	4653      	mov	r3, sl
 8001682:	4323      	orrs	r3, r4
 8001684:	d12a      	bne.n	80016dc <__aeabi_dmul+0x19c>
 8001686:	2400      	movs	r4, #0
 8001688:	2002      	movs	r0, #2
 800168a:	e796      	b.n	80015ba <__aeabi_dmul+0x7a>
 800168c:	4653      	mov	r3, sl
 800168e:	4323      	orrs	r3, r4
 8001690:	d020      	beq.n	80016d4 <__aeabi_dmul+0x194>
 8001692:	2c00      	cmp	r4, #0
 8001694:	d100      	bne.n	8001698 <__aeabi_dmul+0x158>
 8001696:	e157      	b.n	8001948 <__aeabi_dmul+0x408>
 8001698:	0020      	movs	r0, r4
 800169a:	f000 fd95 	bl	80021c8 <__clzsi2>
 800169e:	0003      	movs	r3, r0
 80016a0:	3b0b      	subs	r3, #11
 80016a2:	2b1c      	cmp	r3, #28
 80016a4:	dd00      	ble.n	80016a8 <__aeabi_dmul+0x168>
 80016a6:	e149      	b.n	800193c <__aeabi_dmul+0x3fc>
 80016a8:	211d      	movs	r1, #29
 80016aa:	1acb      	subs	r3, r1, r3
 80016ac:	4651      	mov	r1, sl
 80016ae:	0002      	movs	r2, r0
 80016b0:	40d9      	lsrs	r1, r3
 80016b2:	4653      	mov	r3, sl
 80016b4:	3a08      	subs	r2, #8
 80016b6:	4094      	lsls	r4, r2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	430c      	orrs	r4, r1
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <__aeabi_dmul+0x1ec>)
 80016be:	1a12      	subs	r2, r2, r0
 80016c0:	2000      	movs	r0, #0
 80016c2:	e77a      	b.n	80015ba <__aeabi_dmul+0x7a>
 80016c4:	2501      	movs	r5, #1
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	4c14      	ldr	r4, [pc, #80]	; (800171c <__aeabi_dmul+0x1dc>)
 80016ca:	401d      	ands	r5, r3
 80016cc:	2300      	movs	r3, #0
 80016ce:	2200      	movs	r2, #0
 80016d0:	4699      	mov	r9, r3
 80016d2:	e79c      	b.n	800160e <__aeabi_dmul+0xce>
 80016d4:	2400      	movs	r4, #0
 80016d6:	2200      	movs	r2, #0
 80016d8:	2001      	movs	r0, #1
 80016da:	e76e      	b.n	80015ba <__aeabi_dmul+0x7a>
 80016dc:	4653      	mov	r3, sl
 80016de:	2003      	movs	r0, #3
 80016e0:	e76b      	b.n	80015ba <__aeabi_dmul+0x7a>
 80016e2:	2300      	movs	r3, #0
 80016e4:	469b      	mov	fp, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	2704      	movs	r7, #4
 80016ea:	2600      	movs	r6, #0
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	e74c      	b.n	800158a <__aeabi_dmul+0x4a>
 80016f0:	2303      	movs	r3, #3
 80016f2:	4681      	mov	r9, r0
 80016f4:	270c      	movs	r7, #12
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	e747      	b.n	800158a <__aeabi_dmul+0x4a>
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	2300      	movs	r3, #0
 80016fe:	2500      	movs	r5, #0
 8001700:	0312      	lsls	r2, r2, #12
 8001702:	4699      	mov	r9, r3
 8001704:	4c05      	ldr	r4, [pc, #20]	; (800171c <__aeabi_dmul+0x1dc>)
 8001706:	e782      	b.n	800160e <__aeabi_dmul+0xce>
 8001708:	465c      	mov	r4, fp
 800170a:	464b      	mov	r3, r9
 800170c:	9802      	ldr	r0, [sp, #8]
 800170e:	e76f      	b.n	80015f0 <__aeabi_dmul+0xb0>
 8001710:	465c      	mov	r4, fp
 8001712:	464b      	mov	r3, r9
 8001714:	9501      	str	r5, [sp, #4]
 8001716:	9802      	ldr	r0, [sp, #8]
 8001718:	e76a      	b.n	80015f0 <__aeabi_dmul+0xb0>
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	000007ff 	.word	0x000007ff
 8001720:	fffffc01 	.word	0xfffffc01
 8001724:	08005ae8 	.word	0x08005ae8
 8001728:	800fffff 	.word	0x800fffff
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	464a      	mov	r2, r9
 8001732:	4649      	mov	r1, r9
 8001734:	0c17      	lsrs	r7, r2, #16
 8001736:	0c1a      	lsrs	r2, r3, #16
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	0c1b      	lsrs	r3, r3, #16
 800173c:	0408      	lsls	r0, r1, #16
 800173e:	0019      	movs	r1, r3
 8001740:	0c00      	lsrs	r0, r0, #16
 8001742:	4341      	muls	r1, r0
 8001744:	0015      	movs	r5, r2
 8001746:	4688      	mov	r8, r1
 8001748:	0019      	movs	r1, r3
 800174a:	437d      	muls	r5, r7
 800174c:	4379      	muls	r1, r7
 800174e:	9503      	str	r5, [sp, #12]
 8001750:	4689      	mov	r9, r1
 8001752:	0029      	movs	r1, r5
 8001754:	0015      	movs	r5, r2
 8001756:	4345      	muls	r5, r0
 8001758:	444d      	add	r5, r9
 800175a:	9502      	str	r5, [sp, #8]
 800175c:	4645      	mov	r5, r8
 800175e:	0c2d      	lsrs	r5, r5, #16
 8001760:	46aa      	mov	sl, r5
 8001762:	9d02      	ldr	r5, [sp, #8]
 8001764:	4455      	add	r5, sl
 8001766:	45a9      	cmp	r9, r5
 8001768:	d906      	bls.n	8001778 <__aeabi_dmul+0x238>
 800176a:	468a      	mov	sl, r1
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0249      	lsls	r1, r1, #9
 8001770:	4689      	mov	r9, r1
 8001772:	44ca      	add	sl, r9
 8001774:	4651      	mov	r1, sl
 8001776:	9103      	str	r1, [sp, #12]
 8001778:	0c29      	lsrs	r1, r5, #16
 800177a:	9104      	str	r1, [sp, #16]
 800177c:	4641      	mov	r1, r8
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	042d      	lsls	r5, r5, #16
 8001782:	0c09      	lsrs	r1, r1, #16
 8001784:	4688      	mov	r8, r1
 8001786:	0029      	movs	r1, r5
 8001788:	0c25      	lsrs	r5, r4, #16
 800178a:	0424      	lsls	r4, r4, #16
 800178c:	4441      	add	r1, r8
 800178e:	0c24      	lsrs	r4, r4, #16
 8001790:	9105      	str	r1, [sp, #20]
 8001792:	0021      	movs	r1, r4
 8001794:	4341      	muls	r1, r0
 8001796:	4688      	mov	r8, r1
 8001798:	0021      	movs	r1, r4
 800179a:	4379      	muls	r1, r7
 800179c:	468a      	mov	sl, r1
 800179e:	4368      	muls	r0, r5
 80017a0:	4641      	mov	r1, r8
 80017a2:	4450      	add	r0, sl
 80017a4:	4681      	mov	r9, r0
 80017a6:	0c08      	lsrs	r0, r1, #16
 80017a8:	4448      	add	r0, r9
 80017aa:	436f      	muls	r7, r5
 80017ac:	4582      	cmp	sl, r0
 80017ae:	d903      	bls.n	80017b8 <__aeabi_dmul+0x278>
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	0249      	lsls	r1, r1, #9
 80017b4:	4689      	mov	r9, r1
 80017b6:	444f      	add	r7, r9
 80017b8:	0c01      	lsrs	r1, r0, #16
 80017ba:	4689      	mov	r9, r1
 80017bc:	0039      	movs	r1, r7
 80017be:	4449      	add	r1, r9
 80017c0:	9102      	str	r1, [sp, #8]
 80017c2:	4641      	mov	r1, r8
 80017c4:	040f      	lsls	r7, r1, #16
 80017c6:	9904      	ldr	r1, [sp, #16]
 80017c8:	0c3f      	lsrs	r7, r7, #16
 80017ca:	4688      	mov	r8, r1
 80017cc:	0400      	lsls	r0, r0, #16
 80017ce:	19c0      	adds	r0, r0, r7
 80017d0:	4480      	add	r8, r0
 80017d2:	4641      	mov	r1, r8
 80017d4:	9104      	str	r1, [sp, #16]
 80017d6:	4659      	mov	r1, fp
 80017d8:	0c0f      	lsrs	r7, r1, #16
 80017da:	0409      	lsls	r1, r1, #16
 80017dc:	0c09      	lsrs	r1, r1, #16
 80017de:	4688      	mov	r8, r1
 80017e0:	4359      	muls	r1, r3
 80017e2:	468a      	mov	sl, r1
 80017e4:	0039      	movs	r1, r7
 80017e6:	4351      	muls	r1, r2
 80017e8:	4689      	mov	r9, r1
 80017ea:	4641      	mov	r1, r8
 80017ec:	434a      	muls	r2, r1
 80017ee:	4651      	mov	r1, sl
 80017f0:	0c09      	lsrs	r1, r1, #16
 80017f2:	468b      	mov	fp, r1
 80017f4:	437b      	muls	r3, r7
 80017f6:	18d2      	adds	r2, r2, r3
 80017f8:	445a      	add	r2, fp
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d903      	bls.n	8001806 <__aeabi_dmul+0x2c6>
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	025b      	lsls	r3, r3, #9
 8001802:	469b      	mov	fp, r3
 8001804:	44d9      	add	r9, fp
 8001806:	4651      	mov	r1, sl
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	0c09      	lsrs	r1, r1, #16
 800180c:	468a      	mov	sl, r1
 800180e:	4641      	mov	r1, r8
 8001810:	4361      	muls	r1, r4
 8001812:	437c      	muls	r4, r7
 8001814:	0c13      	lsrs	r3, r2, #16
 8001816:	0412      	lsls	r2, r2, #16
 8001818:	444b      	add	r3, r9
 800181a:	4452      	add	r2, sl
 800181c:	46a1      	mov	r9, r4
 800181e:	468a      	mov	sl, r1
 8001820:	003c      	movs	r4, r7
 8001822:	4641      	mov	r1, r8
 8001824:	436c      	muls	r4, r5
 8001826:	434d      	muls	r5, r1
 8001828:	4651      	mov	r1, sl
 800182a:	444d      	add	r5, r9
 800182c:	0c0f      	lsrs	r7, r1, #16
 800182e:	197d      	adds	r5, r7, r5
 8001830:	45a9      	cmp	r9, r5
 8001832:	d903      	bls.n	800183c <__aeabi_dmul+0x2fc>
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0249      	lsls	r1, r1, #9
 8001838:	4688      	mov	r8, r1
 800183a:	4444      	add	r4, r8
 800183c:	9f04      	ldr	r7, [sp, #16]
 800183e:	9903      	ldr	r1, [sp, #12]
 8001840:	46b8      	mov	r8, r7
 8001842:	4441      	add	r1, r8
 8001844:	468b      	mov	fp, r1
 8001846:	4583      	cmp	fp, r0
 8001848:	4180      	sbcs	r0, r0
 800184a:	4241      	negs	r1, r0
 800184c:	4688      	mov	r8, r1
 800184e:	4651      	mov	r1, sl
 8001850:	0408      	lsls	r0, r1, #16
 8001852:	042f      	lsls	r7, r5, #16
 8001854:	0c00      	lsrs	r0, r0, #16
 8001856:	183f      	adds	r7, r7, r0
 8001858:	4658      	mov	r0, fp
 800185a:	9902      	ldr	r1, [sp, #8]
 800185c:	1810      	adds	r0, r2, r0
 800185e:	4689      	mov	r9, r1
 8001860:	4290      	cmp	r0, r2
 8001862:	4192      	sbcs	r2, r2
 8001864:	444f      	add	r7, r9
 8001866:	46ba      	mov	sl, r7
 8001868:	4252      	negs	r2, r2
 800186a:	4699      	mov	r9, r3
 800186c:	4693      	mov	fp, r2
 800186e:	44c2      	add	sl, r8
 8001870:	44d1      	add	r9, sl
 8001872:	44cb      	add	fp, r9
 8001874:	428f      	cmp	r7, r1
 8001876:	41bf      	sbcs	r7, r7
 8001878:	45c2      	cmp	sl, r8
 800187a:	4189      	sbcs	r1, r1
 800187c:	4599      	cmp	r9, r3
 800187e:	419b      	sbcs	r3, r3
 8001880:	4593      	cmp	fp, r2
 8001882:	4192      	sbcs	r2, r2
 8001884:	427f      	negs	r7, r7
 8001886:	4249      	negs	r1, r1
 8001888:	0c2d      	lsrs	r5, r5, #16
 800188a:	4252      	negs	r2, r2
 800188c:	430f      	orrs	r7, r1
 800188e:	425b      	negs	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	197f      	adds	r7, r7, r5
 8001894:	18ff      	adds	r7, r7, r3
 8001896:	465b      	mov	r3, fp
 8001898:	193c      	adds	r4, r7, r4
 800189a:	0ddb      	lsrs	r3, r3, #23
 800189c:	9a05      	ldr	r2, [sp, #20]
 800189e:	0264      	lsls	r4, r4, #9
 80018a0:	431c      	orrs	r4, r3
 80018a2:	0243      	lsls	r3, r0, #9
 80018a4:	4313      	orrs	r3, r2
 80018a6:	1e5d      	subs	r5, r3, #1
 80018a8:	41ab      	sbcs	r3, r5
 80018aa:	465a      	mov	r2, fp
 80018ac:	0dc0      	lsrs	r0, r0, #23
 80018ae:	4303      	orrs	r3, r0
 80018b0:	0252      	lsls	r2, r2, #9
 80018b2:	4313      	orrs	r3, r2
 80018b4:	01e2      	lsls	r2, r4, #7
 80018b6:	d556      	bpl.n	8001966 <__aeabi_dmul+0x426>
 80018b8:	2001      	movs	r0, #1
 80018ba:	085a      	lsrs	r2, r3, #1
 80018bc:	4003      	ands	r3, r0
 80018be:	4313      	orrs	r3, r2
 80018c0:	07e2      	lsls	r2, r4, #31
 80018c2:	4313      	orrs	r3, r2
 80018c4:	0864      	lsrs	r4, r4, #1
 80018c6:	485a      	ldr	r0, [pc, #360]	; (8001a30 <__aeabi_dmul+0x4f0>)
 80018c8:	4460      	add	r0, ip
 80018ca:	2800      	cmp	r0, #0
 80018cc:	dd4d      	ble.n	800196a <__aeabi_dmul+0x42a>
 80018ce:	075a      	lsls	r2, r3, #29
 80018d0:	d009      	beq.n	80018e6 <__aeabi_dmul+0x3a6>
 80018d2:	220f      	movs	r2, #15
 80018d4:	401a      	ands	r2, r3
 80018d6:	2a04      	cmp	r2, #4
 80018d8:	d005      	beq.n	80018e6 <__aeabi_dmul+0x3a6>
 80018da:	1d1a      	adds	r2, r3, #4
 80018dc:	429a      	cmp	r2, r3
 80018de:	419b      	sbcs	r3, r3
 80018e0:	425b      	negs	r3, r3
 80018e2:	18e4      	adds	r4, r4, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	01e2      	lsls	r2, r4, #7
 80018e8:	d504      	bpl.n	80018f4 <__aeabi_dmul+0x3b4>
 80018ea:	2080      	movs	r0, #128	; 0x80
 80018ec:	4a51      	ldr	r2, [pc, #324]	; (8001a34 <__aeabi_dmul+0x4f4>)
 80018ee:	00c0      	lsls	r0, r0, #3
 80018f0:	4014      	ands	r4, r2
 80018f2:	4460      	add	r0, ip
 80018f4:	4a50      	ldr	r2, [pc, #320]	; (8001a38 <__aeabi_dmul+0x4f8>)
 80018f6:	4290      	cmp	r0, r2
 80018f8:	dd00      	ble.n	80018fc <__aeabi_dmul+0x3bc>
 80018fa:	e6e3      	b.n	80016c4 <__aeabi_dmul+0x184>
 80018fc:	2501      	movs	r5, #1
 80018fe:	08db      	lsrs	r3, r3, #3
 8001900:	0762      	lsls	r2, r4, #29
 8001902:	431a      	orrs	r2, r3
 8001904:	0264      	lsls	r4, r4, #9
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	4691      	mov	r9, r2
 800190a:	0b22      	lsrs	r2, r4, #12
 800190c:	0544      	lsls	r4, r0, #21
 800190e:	0d64      	lsrs	r4, r4, #21
 8001910:	401d      	ands	r5, r3
 8001912:	e67c      	b.n	800160e <__aeabi_dmul+0xce>
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	4659      	mov	r1, fp
 8001918:	0312      	lsls	r2, r2, #12
 800191a:	4211      	tst	r1, r2
 800191c:	d008      	beq.n	8001930 <__aeabi_dmul+0x3f0>
 800191e:	4214      	tst	r4, r2
 8001920:	d106      	bne.n	8001930 <__aeabi_dmul+0x3f0>
 8001922:	4322      	orrs	r2, r4
 8001924:	0312      	lsls	r2, r2, #12
 8001926:	0b12      	lsrs	r2, r2, #12
 8001928:	4645      	mov	r5, r8
 800192a:	4699      	mov	r9, r3
 800192c:	4c43      	ldr	r4, [pc, #268]	; (8001a3c <__aeabi_dmul+0x4fc>)
 800192e:	e66e      	b.n	800160e <__aeabi_dmul+0xce>
 8001930:	465b      	mov	r3, fp
 8001932:	431a      	orrs	r2, r3
 8001934:	0312      	lsls	r2, r2, #12
 8001936:	0b12      	lsrs	r2, r2, #12
 8001938:	4c40      	ldr	r4, [pc, #256]	; (8001a3c <__aeabi_dmul+0x4fc>)
 800193a:	e668      	b.n	800160e <__aeabi_dmul+0xce>
 800193c:	0003      	movs	r3, r0
 800193e:	4654      	mov	r4, sl
 8001940:	3b28      	subs	r3, #40	; 0x28
 8001942:	409c      	lsls	r4, r3
 8001944:	2300      	movs	r3, #0
 8001946:	e6b9      	b.n	80016bc <__aeabi_dmul+0x17c>
 8001948:	f000 fc3e 	bl	80021c8 <__clzsi2>
 800194c:	3020      	adds	r0, #32
 800194e:	e6a6      	b.n	800169e <__aeabi_dmul+0x15e>
 8001950:	0003      	movs	r3, r0
 8001952:	3b28      	subs	r3, #40	; 0x28
 8001954:	409f      	lsls	r7, r3
 8001956:	2300      	movs	r3, #0
 8001958:	46bb      	mov	fp, r7
 800195a:	4699      	mov	r9, r3
 800195c:	e68a      	b.n	8001674 <__aeabi_dmul+0x134>
 800195e:	f000 fc33 	bl	80021c8 <__clzsi2>
 8001962:	3020      	adds	r0, #32
 8001964:	e674      	b.n	8001650 <__aeabi_dmul+0x110>
 8001966:	46b4      	mov	ip, r6
 8001968:	e7ad      	b.n	80018c6 <__aeabi_dmul+0x386>
 800196a:	2501      	movs	r5, #1
 800196c:	1a2a      	subs	r2, r5, r0
 800196e:	2a38      	cmp	r2, #56	; 0x38
 8001970:	dd06      	ble.n	8001980 <__aeabi_dmul+0x440>
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	2400      	movs	r4, #0
 8001976:	401d      	ands	r5, r3
 8001978:	2300      	movs	r3, #0
 800197a:	2200      	movs	r2, #0
 800197c:	4699      	mov	r9, r3
 800197e:	e646      	b.n	800160e <__aeabi_dmul+0xce>
 8001980:	2a1f      	cmp	r2, #31
 8001982:	dc21      	bgt.n	80019c8 <__aeabi_dmul+0x488>
 8001984:	2520      	movs	r5, #32
 8001986:	0020      	movs	r0, r4
 8001988:	1aad      	subs	r5, r5, r2
 800198a:	001e      	movs	r6, r3
 800198c:	40ab      	lsls	r3, r5
 800198e:	40a8      	lsls	r0, r5
 8001990:	40d6      	lsrs	r6, r2
 8001992:	1e5d      	subs	r5, r3, #1
 8001994:	41ab      	sbcs	r3, r5
 8001996:	4330      	orrs	r0, r6
 8001998:	4318      	orrs	r0, r3
 800199a:	40d4      	lsrs	r4, r2
 800199c:	0743      	lsls	r3, r0, #29
 800199e:	d009      	beq.n	80019b4 <__aeabi_dmul+0x474>
 80019a0:	230f      	movs	r3, #15
 80019a2:	4003      	ands	r3, r0
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d005      	beq.n	80019b4 <__aeabi_dmul+0x474>
 80019a8:	0003      	movs	r3, r0
 80019aa:	1d18      	adds	r0, r3, #4
 80019ac:	4298      	cmp	r0, r3
 80019ae:	419b      	sbcs	r3, r3
 80019b0:	425b      	negs	r3, r3
 80019b2:	18e4      	adds	r4, r4, r3
 80019b4:	0223      	lsls	r3, r4, #8
 80019b6:	d521      	bpl.n	80019fc <__aeabi_dmul+0x4bc>
 80019b8:	2501      	movs	r5, #1
 80019ba:	9b01      	ldr	r3, [sp, #4]
 80019bc:	2401      	movs	r4, #1
 80019be:	401d      	ands	r5, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	2200      	movs	r2, #0
 80019c4:	4699      	mov	r9, r3
 80019c6:	e622      	b.n	800160e <__aeabi_dmul+0xce>
 80019c8:	251f      	movs	r5, #31
 80019ca:	0021      	movs	r1, r4
 80019cc:	426d      	negs	r5, r5
 80019ce:	1a28      	subs	r0, r5, r0
 80019d0:	40c1      	lsrs	r1, r0
 80019d2:	0008      	movs	r0, r1
 80019d4:	2a20      	cmp	r2, #32
 80019d6:	d01d      	beq.n	8001a14 <__aeabi_dmul+0x4d4>
 80019d8:	355f      	adds	r5, #95	; 0x5f
 80019da:	1aaa      	subs	r2, r5, r2
 80019dc:	4094      	lsls	r4, r2
 80019de:	4323      	orrs	r3, r4
 80019e0:	1e5c      	subs	r4, r3, #1
 80019e2:	41a3      	sbcs	r3, r4
 80019e4:	2507      	movs	r5, #7
 80019e6:	4303      	orrs	r3, r0
 80019e8:	401d      	ands	r5, r3
 80019ea:	2200      	movs	r2, #0
 80019ec:	2d00      	cmp	r5, #0
 80019ee:	d009      	beq.n	8001a04 <__aeabi_dmul+0x4c4>
 80019f0:	220f      	movs	r2, #15
 80019f2:	2400      	movs	r4, #0
 80019f4:	401a      	ands	r2, r3
 80019f6:	0018      	movs	r0, r3
 80019f8:	2a04      	cmp	r2, #4
 80019fa:	d1d6      	bne.n	80019aa <__aeabi_dmul+0x46a>
 80019fc:	0003      	movs	r3, r0
 80019fe:	0765      	lsls	r5, r4, #29
 8001a00:	0264      	lsls	r4, r4, #9
 8001a02:	0b22      	lsrs	r2, r4, #12
 8001a04:	08db      	lsrs	r3, r3, #3
 8001a06:	432b      	orrs	r3, r5
 8001a08:	2501      	movs	r5, #1
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	9b01      	ldr	r3, [sp, #4]
 8001a0e:	2400      	movs	r4, #0
 8001a10:	401d      	ands	r5, r3
 8001a12:	e5fc      	b.n	800160e <__aeabi_dmul+0xce>
 8001a14:	2400      	movs	r4, #0
 8001a16:	e7e2      	b.n	80019de <__aeabi_dmul+0x49e>
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	2501      	movs	r5, #1
 8001a1c:	0312      	lsls	r2, r2, #12
 8001a1e:	4322      	orrs	r2, r4
 8001a20:	9901      	ldr	r1, [sp, #4]
 8001a22:	0312      	lsls	r2, r2, #12
 8001a24:	0b12      	lsrs	r2, r2, #12
 8001a26:	400d      	ands	r5, r1
 8001a28:	4699      	mov	r9, r3
 8001a2a:	4c04      	ldr	r4, [pc, #16]	; (8001a3c <__aeabi_dmul+0x4fc>)
 8001a2c:	e5ef      	b.n	800160e <__aeabi_dmul+0xce>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	000003ff 	.word	0x000003ff
 8001a34:	feffffff 	.word	0xfeffffff
 8001a38:	000007fe 	.word	0x000007fe
 8001a3c:	000007ff 	.word	0x000007ff

08001a40 <__aeabi_dsub>:
 8001a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a42:	4646      	mov	r6, r8
 8001a44:	46d6      	mov	lr, sl
 8001a46:	464f      	mov	r7, r9
 8001a48:	030c      	lsls	r4, r1, #12
 8001a4a:	b5c0      	push	{r6, r7, lr}
 8001a4c:	0fcd      	lsrs	r5, r1, #31
 8001a4e:	004e      	lsls	r6, r1, #1
 8001a50:	0a61      	lsrs	r1, r4, #9
 8001a52:	0f44      	lsrs	r4, r0, #29
 8001a54:	430c      	orrs	r4, r1
 8001a56:	00c1      	lsls	r1, r0, #3
 8001a58:	0058      	lsls	r0, r3, #1
 8001a5a:	0d40      	lsrs	r0, r0, #21
 8001a5c:	4684      	mov	ip, r0
 8001a5e:	468a      	mov	sl, r1
 8001a60:	000f      	movs	r7, r1
 8001a62:	0319      	lsls	r1, r3, #12
 8001a64:	0f50      	lsrs	r0, r2, #29
 8001a66:	0a49      	lsrs	r1, r1, #9
 8001a68:	4301      	orrs	r1, r0
 8001a6a:	48c6      	ldr	r0, [pc, #792]	; (8001d84 <__aeabi_dsub+0x344>)
 8001a6c:	0d76      	lsrs	r6, r6, #21
 8001a6e:	46a8      	mov	r8, r5
 8001a70:	0fdb      	lsrs	r3, r3, #31
 8001a72:	00d2      	lsls	r2, r2, #3
 8001a74:	4584      	cmp	ip, r0
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dsub+0x3a>
 8001a78:	e0d8      	b.n	8001c2c <__aeabi_dsub+0x1ec>
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	4043      	eors	r3, r0
 8001a7e:	42ab      	cmp	r3, r5
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x44>
 8001a82:	e0a6      	b.n	8001bd2 <__aeabi_dsub+0x192>
 8001a84:	4660      	mov	r0, ip
 8001a86:	1a35      	subs	r5, r6, r0
 8001a88:	2d00      	cmp	r5, #0
 8001a8a:	dc00      	bgt.n	8001a8e <__aeabi_dsub+0x4e>
 8001a8c:	e105      	b.n	8001c9a <__aeabi_dsub+0x25a>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d110      	bne.n	8001ab4 <__aeabi_dsub+0x74>
 8001a92:	000b      	movs	r3, r1
 8001a94:	4313      	orrs	r3, r2
 8001a96:	d100      	bne.n	8001a9a <__aeabi_dsub+0x5a>
 8001a98:	e0d7      	b.n	8001c4a <__aeabi_dsub+0x20a>
 8001a9a:	1e6b      	subs	r3, r5, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_dsub+0x62>
 8001aa0:	e14b      	b.n	8001d3a <__aeabi_dsub+0x2fa>
 8001aa2:	4653      	mov	r3, sl
 8001aa4:	1a9f      	subs	r7, r3, r2
 8001aa6:	45ba      	cmp	sl, r7
 8001aa8:	4180      	sbcs	r0, r0
 8001aaa:	1a64      	subs	r4, r4, r1
 8001aac:	4240      	negs	r0, r0
 8001aae:	1a24      	subs	r4, r4, r0
 8001ab0:	2601      	movs	r6, #1
 8001ab2:	e01e      	b.n	8001af2 <__aeabi_dsub+0xb2>
 8001ab4:	4bb3      	ldr	r3, [pc, #716]	; (8001d84 <__aeabi_dsub+0x344>)
 8001ab6:	429e      	cmp	r6, r3
 8001ab8:	d048      	beq.n	8001b4c <__aeabi_dsub+0x10c>
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	4319      	orrs	r1, r3
 8001ac0:	2d38      	cmp	r5, #56	; 0x38
 8001ac2:	dd00      	ble.n	8001ac6 <__aeabi_dsub+0x86>
 8001ac4:	e119      	b.n	8001cfa <__aeabi_dsub+0x2ba>
 8001ac6:	2d1f      	cmp	r5, #31
 8001ac8:	dd00      	ble.n	8001acc <__aeabi_dsub+0x8c>
 8001aca:	e14c      	b.n	8001d66 <__aeabi_dsub+0x326>
 8001acc:	2320      	movs	r3, #32
 8001ace:	000f      	movs	r7, r1
 8001ad0:	1b5b      	subs	r3, r3, r5
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	409f      	lsls	r7, r3
 8001ad8:	40e8      	lsrs	r0, r5
 8001ada:	1e53      	subs	r3, r2, #1
 8001adc:	419a      	sbcs	r2, r3
 8001ade:	40e9      	lsrs	r1, r5
 8001ae0:	4307      	orrs	r7, r0
 8001ae2:	4317      	orrs	r7, r2
 8001ae4:	4653      	mov	r3, sl
 8001ae6:	1bdf      	subs	r7, r3, r7
 8001ae8:	1a61      	subs	r1, r4, r1
 8001aea:	45ba      	cmp	sl, r7
 8001aec:	41a4      	sbcs	r4, r4
 8001aee:	4264      	negs	r4, r4
 8001af0:	1b0c      	subs	r4, r1, r4
 8001af2:	0223      	lsls	r3, r4, #8
 8001af4:	d400      	bmi.n	8001af8 <__aeabi_dsub+0xb8>
 8001af6:	e0c5      	b.n	8001c84 <__aeabi_dsub+0x244>
 8001af8:	0264      	lsls	r4, r4, #9
 8001afa:	0a65      	lsrs	r5, r4, #9
 8001afc:	2d00      	cmp	r5, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0xc2>
 8001b00:	e0f6      	b.n	8001cf0 <__aeabi_dsub+0x2b0>
 8001b02:	0028      	movs	r0, r5
 8001b04:	f000 fb60 	bl	80021c8 <__clzsi2>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	3b08      	subs	r3, #8
 8001b0c:	2b1f      	cmp	r3, #31
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0xd2>
 8001b10:	e0e9      	b.n	8001ce6 <__aeabi_dsub+0x2a6>
 8001b12:	2220      	movs	r2, #32
 8001b14:	003c      	movs	r4, r7
 8001b16:	1ad2      	subs	r2, r2, r3
 8001b18:	409d      	lsls	r5, r3
 8001b1a:	40d4      	lsrs	r4, r2
 8001b1c:	409f      	lsls	r7, r3
 8001b1e:	4325      	orrs	r5, r4
 8001b20:	429e      	cmp	r6, r3
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0xe6>
 8001b24:	e0db      	b.n	8001cde <__aeabi_dsub+0x29e>
 8001b26:	1b9e      	subs	r6, r3, r6
 8001b28:	1c73      	adds	r3, r6, #1
 8001b2a:	2b1f      	cmp	r3, #31
 8001b2c:	dd00      	ble.n	8001b30 <__aeabi_dsub+0xf0>
 8001b2e:	e10a      	b.n	8001d46 <__aeabi_dsub+0x306>
 8001b30:	2220      	movs	r2, #32
 8001b32:	0038      	movs	r0, r7
 8001b34:	1ad2      	subs	r2, r2, r3
 8001b36:	0029      	movs	r1, r5
 8001b38:	4097      	lsls	r7, r2
 8001b3a:	002c      	movs	r4, r5
 8001b3c:	4091      	lsls	r1, r2
 8001b3e:	40d8      	lsrs	r0, r3
 8001b40:	1e7a      	subs	r2, r7, #1
 8001b42:	4197      	sbcs	r7, r2
 8001b44:	40dc      	lsrs	r4, r3
 8001b46:	2600      	movs	r6, #0
 8001b48:	4301      	orrs	r1, r0
 8001b4a:	430f      	orrs	r7, r1
 8001b4c:	077b      	lsls	r3, r7, #29
 8001b4e:	d009      	beq.n	8001b64 <__aeabi_dsub+0x124>
 8001b50:	230f      	movs	r3, #15
 8001b52:	403b      	ands	r3, r7
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d005      	beq.n	8001b64 <__aeabi_dsub+0x124>
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	42bb      	cmp	r3, r7
 8001b5c:	41bf      	sbcs	r7, r7
 8001b5e:	427f      	negs	r7, r7
 8001b60:	19e4      	adds	r4, r4, r7
 8001b62:	001f      	movs	r7, r3
 8001b64:	0223      	lsls	r3, r4, #8
 8001b66:	d525      	bpl.n	8001bb4 <__aeabi_dsub+0x174>
 8001b68:	4b86      	ldr	r3, [pc, #536]	; (8001d84 <__aeabi_dsub+0x344>)
 8001b6a:	3601      	adds	r6, #1
 8001b6c:	429e      	cmp	r6, r3
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x132>
 8001b70:	e0af      	b.n	8001cd2 <__aeabi_dsub+0x292>
 8001b72:	4b85      	ldr	r3, [pc, #532]	; (8001d88 <__aeabi_dsub+0x348>)
 8001b74:	2501      	movs	r5, #1
 8001b76:	401c      	ands	r4, r3
 8001b78:	4643      	mov	r3, r8
 8001b7a:	0762      	lsls	r2, r4, #29
 8001b7c:	08ff      	lsrs	r7, r7, #3
 8001b7e:	0264      	lsls	r4, r4, #9
 8001b80:	0576      	lsls	r6, r6, #21
 8001b82:	4317      	orrs	r7, r2
 8001b84:	0b24      	lsrs	r4, r4, #12
 8001b86:	0d76      	lsrs	r6, r6, #21
 8001b88:	401d      	ands	r5, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	0324      	lsls	r4, r4, #12
 8001b8e:	0b23      	lsrs	r3, r4, #12
 8001b90:	0d0c      	lsrs	r4, r1, #20
 8001b92:	4a7e      	ldr	r2, [pc, #504]	; (8001d8c <__aeabi_dsub+0x34c>)
 8001b94:	0524      	lsls	r4, r4, #20
 8001b96:	431c      	orrs	r4, r3
 8001b98:	4014      	ands	r4, r2
 8001b9a:	0533      	lsls	r3, r6, #20
 8001b9c:	4323      	orrs	r3, r4
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	07ed      	lsls	r5, r5, #31
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	432b      	orrs	r3, r5
 8001ba6:	0038      	movs	r0, r7
 8001ba8:	0019      	movs	r1, r3
 8001baa:	bc1c      	pop	{r2, r3, r4}
 8001bac:	4690      	mov	r8, r2
 8001bae:	4699      	mov	r9, r3
 8001bb0:	46a2      	mov	sl, r4
 8001bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb4:	2501      	movs	r5, #1
 8001bb6:	4643      	mov	r3, r8
 8001bb8:	0762      	lsls	r2, r4, #29
 8001bba:	08ff      	lsrs	r7, r7, #3
 8001bbc:	4317      	orrs	r7, r2
 8001bbe:	08e4      	lsrs	r4, r4, #3
 8001bc0:	401d      	ands	r5, r3
 8001bc2:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <__aeabi_dsub+0x344>)
 8001bc4:	429e      	cmp	r6, r3
 8001bc6:	d036      	beq.n	8001c36 <__aeabi_dsub+0x1f6>
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	0576      	lsls	r6, r6, #21
 8001bcc:	0b24      	lsrs	r4, r4, #12
 8001bce:	0d76      	lsrs	r6, r6, #21
 8001bd0:	e7db      	b.n	8001b8a <__aeabi_dsub+0x14a>
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	1af3      	subs	r3, r6, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	dc00      	bgt.n	8001bdc <__aeabi_dsub+0x19c>
 8001bda:	e094      	b.n	8001d06 <__aeabi_dsub+0x2c6>
 8001bdc:	4660      	mov	r0, ip
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d035      	beq.n	8001c4e <__aeabi_dsub+0x20e>
 8001be2:	4868      	ldr	r0, [pc, #416]	; (8001d84 <__aeabi_dsub+0x344>)
 8001be4:	4286      	cmp	r6, r0
 8001be6:	d0b1      	beq.n	8001b4c <__aeabi_dsub+0x10c>
 8001be8:	2780      	movs	r7, #128	; 0x80
 8001bea:	043f      	lsls	r7, r7, #16
 8001bec:	4339      	orrs	r1, r7
 8001bee:	2b38      	cmp	r3, #56	; 0x38
 8001bf0:	dc00      	bgt.n	8001bf4 <__aeabi_dsub+0x1b4>
 8001bf2:	e0fd      	b.n	8001df0 <__aeabi_dsub+0x3b0>
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	0017      	movs	r7, r2
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	1e7a      	subs	r2, r7, #1
 8001bfc:	4197      	sbcs	r7, r2
 8001bfe:	4457      	add	r7, sl
 8001c00:	4557      	cmp	r7, sl
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	4244      	negs	r4, r0
 8001c08:	190c      	adds	r4, r1, r4
 8001c0a:	0223      	lsls	r3, r4, #8
 8001c0c:	d53a      	bpl.n	8001c84 <__aeabi_dsub+0x244>
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <__aeabi_dsub+0x344>)
 8001c10:	3601      	adds	r6, #1
 8001c12:	429e      	cmp	r6, r3
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1d8>
 8001c16:	e14b      	b.n	8001eb0 <__aeabi_dsub+0x470>
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <__aeabi_dsub+0x348>)
 8001c1c:	401c      	ands	r4, r3
 8001c1e:	087b      	lsrs	r3, r7, #1
 8001c20:	4017      	ands	r7, r2
 8001c22:	431f      	orrs	r7, r3
 8001c24:	07e2      	lsls	r2, r4, #31
 8001c26:	4317      	orrs	r7, r2
 8001c28:	0864      	lsrs	r4, r4, #1
 8001c2a:	e78f      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001c2c:	0008      	movs	r0, r1
 8001c2e:	4310      	orrs	r0, r2
 8001c30:	d000      	beq.n	8001c34 <__aeabi_dsub+0x1f4>
 8001c32:	e724      	b.n	8001a7e <__aeabi_dsub+0x3e>
 8001c34:	e721      	b.n	8001a7a <__aeabi_dsub+0x3a>
 8001c36:	0023      	movs	r3, r4
 8001c38:	433b      	orrs	r3, r7
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dsub+0x1fe>
 8001c3c:	e1b9      	b.n	8001fb2 <__aeabi_dsub+0x572>
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	0312      	lsls	r2, r2, #12
 8001c42:	4314      	orrs	r4, r2
 8001c44:	0324      	lsls	r4, r4, #12
 8001c46:	0b24      	lsrs	r4, r4, #12
 8001c48:	e79f      	b.n	8001b8a <__aeabi_dsub+0x14a>
 8001c4a:	002e      	movs	r6, r5
 8001c4c:	e77e      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001c4e:	0008      	movs	r0, r1
 8001c50:	4310      	orrs	r0, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x216>
 8001c54:	e0ca      	b.n	8001dec <__aeabi_dsub+0x3ac>
 8001c56:	1e58      	subs	r0, r3, #1
 8001c58:	4684      	mov	ip, r0
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_dsub+0x220>
 8001c5e:	e0e7      	b.n	8001e30 <__aeabi_dsub+0x3f0>
 8001c60:	4452      	add	r2, sl
 8001c62:	4552      	cmp	r2, sl
 8001c64:	4180      	sbcs	r0, r0
 8001c66:	1864      	adds	r4, r4, r1
 8001c68:	4240      	negs	r0, r0
 8001c6a:	1824      	adds	r4, r4, r0
 8001c6c:	0017      	movs	r7, r2
 8001c6e:	2601      	movs	r6, #1
 8001c70:	0223      	lsls	r3, r4, #8
 8001c72:	d507      	bpl.n	8001c84 <__aeabi_dsub+0x244>
 8001c74:	2602      	movs	r6, #2
 8001c76:	e7cf      	b.n	8001c18 <__aeabi_dsub+0x1d8>
 8001c78:	4664      	mov	r4, ip
 8001c7a:	432c      	orrs	r4, r5
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x240>
 8001c7e:	e1b3      	b.n	8001fe8 <__aeabi_dsub+0x5a8>
 8001c80:	002c      	movs	r4, r5
 8001c82:	4667      	mov	r7, ip
 8001c84:	077b      	lsls	r3, r7, #29
 8001c86:	d000      	beq.n	8001c8a <__aeabi_dsub+0x24a>
 8001c88:	e762      	b.n	8001b50 <__aeabi_dsub+0x110>
 8001c8a:	0763      	lsls	r3, r4, #29
 8001c8c:	08ff      	lsrs	r7, r7, #3
 8001c8e:	431f      	orrs	r7, r3
 8001c90:	2501      	movs	r5, #1
 8001c92:	4643      	mov	r3, r8
 8001c94:	08e4      	lsrs	r4, r4, #3
 8001c96:	401d      	ands	r5, r3
 8001c98:	e793      	b.n	8001bc2 <__aeabi_dsub+0x182>
 8001c9a:	2d00      	cmp	r5, #0
 8001c9c:	d178      	bne.n	8001d90 <__aeabi_dsub+0x350>
 8001c9e:	1c75      	adds	r5, r6, #1
 8001ca0:	056d      	lsls	r5, r5, #21
 8001ca2:	0d6d      	lsrs	r5, r5, #21
 8001ca4:	2d01      	cmp	r5, #1
 8001ca6:	dc00      	bgt.n	8001caa <__aeabi_dsub+0x26a>
 8001ca8:	e0f2      	b.n	8001e90 <__aeabi_dsub+0x450>
 8001caa:	4650      	mov	r0, sl
 8001cac:	1a80      	subs	r0, r0, r2
 8001cae:	4582      	cmp	sl, r0
 8001cb0:	41bf      	sbcs	r7, r7
 8001cb2:	1a65      	subs	r5, r4, r1
 8001cb4:	427f      	negs	r7, r7
 8001cb6:	1bed      	subs	r5, r5, r7
 8001cb8:	4684      	mov	ip, r0
 8001cba:	0228      	lsls	r0, r5, #8
 8001cbc:	d400      	bmi.n	8001cc0 <__aeabi_dsub+0x280>
 8001cbe:	e08c      	b.n	8001dda <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	1a17      	subs	r7, r2, r0
 8001cc4:	42ba      	cmp	r2, r7
 8001cc6:	4192      	sbcs	r2, r2
 8001cc8:	1b0c      	subs	r4, r1, r4
 8001cca:	4255      	negs	r5, r2
 8001ccc:	1b65      	subs	r5, r4, r5
 8001cce:	4698      	mov	r8, r3
 8001cd0:	e714      	b.n	8001afc <__aeabi_dsub+0xbc>
 8001cd2:	2501      	movs	r5, #1
 8001cd4:	4643      	mov	r3, r8
 8001cd6:	2400      	movs	r4, #0
 8001cd8:	401d      	ands	r5, r3
 8001cda:	2700      	movs	r7, #0
 8001cdc:	e755      	b.n	8001b8a <__aeabi_dsub+0x14a>
 8001cde:	4c2a      	ldr	r4, [pc, #168]	; (8001d88 <__aeabi_dsub+0x348>)
 8001ce0:	1af6      	subs	r6, r6, r3
 8001ce2:	402c      	ands	r4, r5
 8001ce4:	e732      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001ce6:	003d      	movs	r5, r7
 8001ce8:	3828      	subs	r0, #40	; 0x28
 8001cea:	4085      	lsls	r5, r0
 8001cec:	2700      	movs	r7, #0
 8001cee:	e717      	b.n	8001b20 <__aeabi_dsub+0xe0>
 8001cf0:	0038      	movs	r0, r7
 8001cf2:	f000 fa69 	bl	80021c8 <__clzsi2>
 8001cf6:	3020      	adds	r0, #32
 8001cf8:	e706      	b.n	8001b08 <__aeabi_dsub+0xc8>
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	0017      	movs	r7, r2
 8001cfe:	2100      	movs	r1, #0
 8001d00:	1e7a      	subs	r2, r7, #1
 8001d02:	4197      	sbcs	r7, r2
 8001d04:	e6ee      	b.n	8001ae4 <__aeabi_dsub+0xa4>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dsub+0x2cc>
 8001d0a:	e0e5      	b.n	8001ed8 <__aeabi_dsub+0x498>
 8001d0c:	1c73      	adds	r3, r6, #1
 8001d0e:	469c      	mov	ip, r3
 8001d10:	055b      	lsls	r3, r3, #21
 8001d12:	0d5b      	lsrs	r3, r3, #21
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x2da>
 8001d18:	e09f      	b.n	8001e5a <__aeabi_dsub+0x41a>
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <__aeabi_dsub+0x344>)
 8001d1c:	459c      	cmp	ip, r3
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x2e2>
 8001d20:	e0c5      	b.n	8001eae <__aeabi_dsub+0x46e>
 8001d22:	4452      	add	r2, sl
 8001d24:	4552      	cmp	r2, sl
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	1864      	adds	r4, r4, r1
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1824      	adds	r4, r4, r0
 8001d2e:	07e7      	lsls	r7, r4, #31
 8001d30:	0852      	lsrs	r2, r2, #1
 8001d32:	4317      	orrs	r7, r2
 8001d34:	0864      	lsrs	r4, r4, #1
 8001d36:	4666      	mov	r6, ip
 8001d38:	e708      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001d3a:	4812      	ldr	r0, [pc, #72]	; (8001d84 <__aeabi_dsub+0x344>)
 8001d3c:	4285      	cmp	r5, r0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x302>
 8001d40:	e085      	b.n	8001e4e <__aeabi_dsub+0x40e>
 8001d42:	001d      	movs	r5, r3
 8001d44:	e6bc      	b.n	8001ac0 <__aeabi_dsub+0x80>
 8001d46:	0029      	movs	r1, r5
 8001d48:	3e1f      	subs	r6, #31
 8001d4a:	40f1      	lsrs	r1, r6
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x312>
 8001d50:	e07f      	b.n	8001e52 <__aeabi_dsub+0x412>
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	409d      	lsls	r5, r3
 8001d58:	432f      	orrs	r7, r5
 8001d5a:	1e7d      	subs	r5, r7, #1
 8001d5c:	41af      	sbcs	r7, r5
 8001d5e:	2400      	movs	r4, #0
 8001d60:	430f      	orrs	r7, r1
 8001d62:	2600      	movs	r6, #0
 8001d64:	e78e      	b.n	8001c84 <__aeabi_dsub+0x244>
 8001d66:	002b      	movs	r3, r5
 8001d68:	000f      	movs	r7, r1
 8001d6a:	3b20      	subs	r3, #32
 8001d6c:	40df      	lsrs	r7, r3
 8001d6e:	2d20      	cmp	r5, #32
 8001d70:	d071      	beq.n	8001e56 <__aeabi_dsub+0x416>
 8001d72:	2340      	movs	r3, #64	; 0x40
 8001d74:	1b5d      	subs	r5, r3, r5
 8001d76:	40a9      	lsls	r1, r5
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	1e51      	subs	r1, r2, #1
 8001d7c:	418a      	sbcs	r2, r1
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4317      	orrs	r7, r2
 8001d82:	e6af      	b.n	8001ae4 <__aeabi_dsub+0xa4>
 8001d84:	000007ff 	.word	0x000007ff
 8001d88:	ff7fffff 	.word	0xff7fffff
 8001d8c:	800fffff 	.word	0x800fffff
 8001d90:	2e00      	cmp	r6, #0
 8001d92:	d03e      	beq.n	8001e12 <__aeabi_dsub+0x3d2>
 8001d94:	4eb3      	ldr	r6, [pc, #716]	; (8002064 <__aeabi_dsub+0x624>)
 8001d96:	45b4      	cmp	ip, r6
 8001d98:	d045      	beq.n	8001e26 <__aeabi_dsub+0x3e6>
 8001d9a:	2680      	movs	r6, #128	; 0x80
 8001d9c:	0436      	lsls	r6, r6, #16
 8001d9e:	426d      	negs	r5, r5
 8001da0:	4334      	orrs	r4, r6
 8001da2:	2d38      	cmp	r5, #56	; 0x38
 8001da4:	dd00      	ble.n	8001da8 <__aeabi_dsub+0x368>
 8001da6:	e0a8      	b.n	8001efa <__aeabi_dsub+0x4ba>
 8001da8:	2d1f      	cmp	r5, #31
 8001daa:	dd00      	ble.n	8001dae <__aeabi_dsub+0x36e>
 8001dac:	e11f      	b.n	8001fee <__aeabi_dsub+0x5ae>
 8001dae:	2620      	movs	r6, #32
 8001db0:	0027      	movs	r7, r4
 8001db2:	4650      	mov	r0, sl
 8001db4:	1b76      	subs	r6, r6, r5
 8001db6:	40b7      	lsls	r7, r6
 8001db8:	40e8      	lsrs	r0, r5
 8001dba:	4307      	orrs	r7, r0
 8001dbc:	4650      	mov	r0, sl
 8001dbe:	40b0      	lsls	r0, r6
 8001dc0:	1e46      	subs	r6, r0, #1
 8001dc2:	41b0      	sbcs	r0, r6
 8001dc4:	40ec      	lsrs	r4, r5
 8001dc6:	4338      	orrs	r0, r7
 8001dc8:	1a17      	subs	r7, r2, r0
 8001dca:	42ba      	cmp	r2, r7
 8001dcc:	4192      	sbcs	r2, r2
 8001dce:	1b0c      	subs	r4, r1, r4
 8001dd0:	4252      	negs	r2, r2
 8001dd2:	1aa4      	subs	r4, r4, r2
 8001dd4:	4666      	mov	r6, ip
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	e68b      	b.n	8001af2 <__aeabi_dsub+0xb2>
 8001dda:	4664      	mov	r4, ip
 8001ddc:	4667      	mov	r7, ip
 8001dde:	432c      	orrs	r4, r5
 8001de0:	d000      	beq.n	8001de4 <__aeabi_dsub+0x3a4>
 8001de2:	e68b      	b.n	8001afc <__aeabi_dsub+0xbc>
 8001de4:	2500      	movs	r5, #0
 8001de6:	2600      	movs	r6, #0
 8001de8:	2700      	movs	r7, #0
 8001dea:	e6ea      	b.n	8001bc2 <__aeabi_dsub+0x182>
 8001dec:	001e      	movs	r6, r3
 8001dee:	e6ad      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001df0:	2b1f      	cmp	r3, #31
 8001df2:	dc60      	bgt.n	8001eb6 <__aeabi_dsub+0x476>
 8001df4:	2720      	movs	r7, #32
 8001df6:	1af8      	subs	r0, r7, r3
 8001df8:	000f      	movs	r7, r1
 8001dfa:	4684      	mov	ip, r0
 8001dfc:	4087      	lsls	r7, r0
 8001dfe:	0010      	movs	r0, r2
 8001e00:	40d8      	lsrs	r0, r3
 8001e02:	4307      	orrs	r7, r0
 8001e04:	4660      	mov	r0, ip
 8001e06:	4082      	lsls	r2, r0
 8001e08:	1e50      	subs	r0, r2, #1
 8001e0a:	4182      	sbcs	r2, r0
 8001e0c:	40d9      	lsrs	r1, r3
 8001e0e:	4317      	orrs	r7, r2
 8001e10:	e6f5      	b.n	8001bfe <__aeabi_dsub+0x1be>
 8001e12:	0026      	movs	r6, r4
 8001e14:	4650      	mov	r0, sl
 8001e16:	4306      	orrs	r6, r0
 8001e18:	d005      	beq.n	8001e26 <__aeabi_dsub+0x3e6>
 8001e1a:	43ed      	mvns	r5, r5
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	d0d3      	beq.n	8001dc8 <__aeabi_dsub+0x388>
 8001e20:	4e90      	ldr	r6, [pc, #576]	; (8002064 <__aeabi_dsub+0x624>)
 8001e22:	45b4      	cmp	ip, r6
 8001e24:	d1bd      	bne.n	8001da2 <__aeabi_dsub+0x362>
 8001e26:	000c      	movs	r4, r1
 8001e28:	0017      	movs	r7, r2
 8001e2a:	4666      	mov	r6, ip
 8001e2c:	4698      	mov	r8, r3
 8001e2e:	e68d      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001e30:	488c      	ldr	r0, [pc, #560]	; (8002064 <__aeabi_dsub+0x624>)
 8001e32:	4283      	cmp	r3, r0
 8001e34:	d00b      	beq.n	8001e4e <__aeabi_dsub+0x40e>
 8001e36:	4663      	mov	r3, ip
 8001e38:	e6d9      	b.n	8001bee <__aeabi_dsub+0x1ae>
 8001e3a:	2d00      	cmp	r5, #0
 8001e3c:	d000      	beq.n	8001e40 <__aeabi_dsub+0x400>
 8001e3e:	e096      	b.n	8001f6e <__aeabi_dsub+0x52e>
 8001e40:	0008      	movs	r0, r1
 8001e42:	4310      	orrs	r0, r2
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x408>
 8001e46:	e0e2      	b.n	800200e <__aeabi_dsub+0x5ce>
 8001e48:	000c      	movs	r4, r1
 8001e4a:	0017      	movs	r7, r2
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	4e85      	ldr	r6, [pc, #532]	; (8002064 <__aeabi_dsub+0x624>)
 8001e50:	e67c      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001e52:	2500      	movs	r5, #0
 8001e54:	e780      	b.n	8001d58 <__aeabi_dsub+0x318>
 8001e56:	2100      	movs	r1, #0
 8001e58:	e78e      	b.n	8001d78 <__aeabi_dsub+0x338>
 8001e5a:	0023      	movs	r3, r4
 8001e5c:	4650      	mov	r0, sl
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	2e00      	cmp	r6, #0
 8001e62:	d000      	beq.n	8001e66 <__aeabi_dsub+0x426>
 8001e64:	e0a8      	b.n	8001fb8 <__aeabi_dsub+0x578>
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x42c>
 8001e6a:	e0de      	b.n	800202a <__aeabi_dsub+0x5ea>
 8001e6c:	000b      	movs	r3, r1
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x434>
 8001e72:	e66b      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001e74:	4452      	add	r2, sl
 8001e76:	4552      	cmp	r2, sl
 8001e78:	4180      	sbcs	r0, r0
 8001e7a:	1864      	adds	r4, r4, r1
 8001e7c:	4240      	negs	r0, r0
 8001e7e:	1824      	adds	r4, r4, r0
 8001e80:	0017      	movs	r7, r2
 8001e82:	0223      	lsls	r3, r4, #8
 8001e84:	d400      	bmi.n	8001e88 <__aeabi_dsub+0x448>
 8001e86:	e6fd      	b.n	8001c84 <__aeabi_dsub+0x244>
 8001e88:	4b77      	ldr	r3, [pc, #476]	; (8002068 <__aeabi_dsub+0x628>)
 8001e8a:	4666      	mov	r6, ip
 8001e8c:	401c      	ands	r4, r3
 8001e8e:	e65d      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001e90:	0025      	movs	r5, r4
 8001e92:	4650      	mov	r0, sl
 8001e94:	4305      	orrs	r5, r0
 8001e96:	2e00      	cmp	r6, #0
 8001e98:	d1cf      	bne.n	8001e3a <__aeabi_dsub+0x3fa>
 8001e9a:	2d00      	cmp	r5, #0
 8001e9c:	d14f      	bne.n	8001f3e <__aeabi_dsub+0x4fe>
 8001e9e:	000c      	movs	r4, r1
 8001ea0:	4314      	orrs	r4, r2
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x466>
 8001ea4:	e0a0      	b.n	8001fe8 <__aeabi_dsub+0x5a8>
 8001ea6:	000c      	movs	r4, r1
 8001ea8:	0017      	movs	r7, r2
 8001eaa:	4698      	mov	r8, r3
 8001eac:	e64e      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001eae:	4666      	mov	r6, ip
 8001eb0:	2400      	movs	r4, #0
 8001eb2:	2700      	movs	r7, #0
 8001eb4:	e685      	b.n	8001bc2 <__aeabi_dsub+0x182>
 8001eb6:	001f      	movs	r7, r3
 8001eb8:	0008      	movs	r0, r1
 8001eba:	3f20      	subs	r7, #32
 8001ebc:	40f8      	lsrs	r0, r7
 8001ebe:	0007      	movs	r7, r0
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x486>
 8001ec4:	e08e      	b.n	8001fe4 <__aeabi_dsub+0x5a4>
 8001ec6:	2040      	movs	r0, #64	; 0x40
 8001ec8:	1ac3      	subs	r3, r0, r3
 8001eca:	4099      	lsls	r1, r3
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	1e51      	subs	r1, r2, #1
 8001ed0:	418a      	sbcs	r2, r1
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4317      	orrs	r7, r2
 8001ed6:	e692      	b.n	8001bfe <__aeabi_dsub+0x1be>
 8001ed8:	2e00      	cmp	r6, #0
 8001eda:	d114      	bne.n	8001f06 <__aeabi_dsub+0x4c6>
 8001edc:	0026      	movs	r6, r4
 8001ede:	4650      	mov	r0, sl
 8001ee0:	4306      	orrs	r6, r0
 8001ee2:	d062      	beq.n	8001faa <__aeabi_dsub+0x56a>
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d15c      	bne.n	8001fa4 <__aeabi_dsub+0x564>
 8001eea:	1887      	adds	r7, r0, r2
 8001eec:	4297      	cmp	r7, r2
 8001eee:	4192      	sbcs	r2, r2
 8001ef0:	1864      	adds	r4, r4, r1
 8001ef2:	4252      	negs	r2, r2
 8001ef4:	18a4      	adds	r4, r4, r2
 8001ef6:	4666      	mov	r6, ip
 8001ef8:	e687      	b.n	8001c0a <__aeabi_dsub+0x1ca>
 8001efa:	4650      	mov	r0, sl
 8001efc:	4320      	orrs	r0, r4
 8001efe:	1e44      	subs	r4, r0, #1
 8001f00:	41a0      	sbcs	r0, r4
 8001f02:	2400      	movs	r4, #0
 8001f04:	e760      	b.n	8001dc8 <__aeabi_dsub+0x388>
 8001f06:	4e57      	ldr	r6, [pc, #348]	; (8002064 <__aeabi_dsub+0x624>)
 8001f08:	45b4      	cmp	ip, r6
 8001f0a:	d04e      	beq.n	8001faa <__aeabi_dsub+0x56a>
 8001f0c:	2680      	movs	r6, #128	; 0x80
 8001f0e:	0436      	lsls	r6, r6, #16
 8001f10:	425b      	negs	r3, r3
 8001f12:	4334      	orrs	r4, r6
 8001f14:	2b38      	cmp	r3, #56	; 0x38
 8001f16:	dd00      	ble.n	8001f1a <__aeabi_dsub+0x4da>
 8001f18:	e07f      	b.n	800201a <__aeabi_dsub+0x5da>
 8001f1a:	2b1f      	cmp	r3, #31
 8001f1c:	dd00      	ble.n	8001f20 <__aeabi_dsub+0x4e0>
 8001f1e:	e08b      	b.n	8002038 <__aeabi_dsub+0x5f8>
 8001f20:	2620      	movs	r6, #32
 8001f22:	0027      	movs	r7, r4
 8001f24:	4650      	mov	r0, sl
 8001f26:	1af6      	subs	r6, r6, r3
 8001f28:	40b7      	lsls	r7, r6
 8001f2a:	40d8      	lsrs	r0, r3
 8001f2c:	4307      	orrs	r7, r0
 8001f2e:	4650      	mov	r0, sl
 8001f30:	40b0      	lsls	r0, r6
 8001f32:	1e46      	subs	r6, r0, #1
 8001f34:	41b0      	sbcs	r0, r6
 8001f36:	4307      	orrs	r7, r0
 8001f38:	40dc      	lsrs	r4, r3
 8001f3a:	18bf      	adds	r7, r7, r2
 8001f3c:	e7d6      	b.n	8001eec <__aeabi_dsub+0x4ac>
 8001f3e:	000d      	movs	r5, r1
 8001f40:	4315      	orrs	r5, r2
 8001f42:	d100      	bne.n	8001f46 <__aeabi_dsub+0x506>
 8001f44:	e602      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001f46:	4650      	mov	r0, sl
 8001f48:	1a80      	subs	r0, r0, r2
 8001f4a:	4582      	cmp	sl, r0
 8001f4c:	41bf      	sbcs	r7, r7
 8001f4e:	1a65      	subs	r5, r4, r1
 8001f50:	427f      	negs	r7, r7
 8001f52:	1bed      	subs	r5, r5, r7
 8001f54:	4684      	mov	ip, r0
 8001f56:	0228      	lsls	r0, r5, #8
 8001f58:	d400      	bmi.n	8001f5c <__aeabi_dsub+0x51c>
 8001f5a:	e68d      	b.n	8001c78 <__aeabi_dsub+0x238>
 8001f5c:	4650      	mov	r0, sl
 8001f5e:	1a17      	subs	r7, r2, r0
 8001f60:	42ba      	cmp	r2, r7
 8001f62:	4192      	sbcs	r2, r2
 8001f64:	1b0c      	subs	r4, r1, r4
 8001f66:	4252      	negs	r2, r2
 8001f68:	1aa4      	subs	r4, r4, r2
 8001f6a:	4698      	mov	r8, r3
 8001f6c:	e5ee      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001f6e:	000d      	movs	r5, r1
 8001f70:	4315      	orrs	r5, r2
 8001f72:	d100      	bne.n	8001f76 <__aeabi_dsub+0x536>
 8001f74:	e76b      	b.n	8001e4e <__aeabi_dsub+0x40e>
 8001f76:	4650      	mov	r0, sl
 8001f78:	0767      	lsls	r7, r4, #29
 8001f7a:	08c0      	lsrs	r0, r0, #3
 8001f7c:	4307      	orrs	r7, r0
 8001f7e:	2080      	movs	r0, #128	; 0x80
 8001f80:	08e4      	lsrs	r4, r4, #3
 8001f82:	0300      	lsls	r0, r0, #12
 8001f84:	4204      	tst	r4, r0
 8001f86:	d007      	beq.n	8001f98 <__aeabi_dsub+0x558>
 8001f88:	08cd      	lsrs	r5, r1, #3
 8001f8a:	4205      	tst	r5, r0
 8001f8c:	d104      	bne.n	8001f98 <__aeabi_dsub+0x558>
 8001f8e:	002c      	movs	r4, r5
 8001f90:	4698      	mov	r8, r3
 8001f92:	08d7      	lsrs	r7, r2, #3
 8001f94:	0749      	lsls	r1, r1, #29
 8001f96:	430f      	orrs	r7, r1
 8001f98:	0f7b      	lsrs	r3, r7, #29
 8001f9a:	00e4      	lsls	r4, r4, #3
 8001f9c:	431c      	orrs	r4, r3
 8001f9e:	00ff      	lsls	r7, r7, #3
 8001fa0:	4e30      	ldr	r6, [pc, #192]	; (8002064 <__aeabi_dsub+0x624>)
 8001fa2:	e5d3      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001fa4:	4e2f      	ldr	r6, [pc, #188]	; (8002064 <__aeabi_dsub+0x624>)
 8001fa6:	45b4      	cmp	ip, r6
 8001fa8:	d1b4      	bne.n	8001f14 <__aeabi_dsub+0x4d4>
 8001faa:	000c      	movs	r4, r1
 8001fac:	0017      	movs	r7, r2
 8001fae:	4666      	mov	r6, ip
 8001fb0:	e5cc      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8001fb2:	2700      	movs	r7, #0
 8001fb4:	2400      	movs	r4, #0
 8001fb6:	e5e8      	b.n	8001b8a <__aeabi_dsub+0x14a>
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d039      	beq.n	8002030 <__aeabi_dsub+0x5f0>
 8001fbc:	000b      	movs	r3, r1
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x584>
 8001fc2:	e744      	b.n	8001e4e <__aeabi_dsub+0x40e>
 8001fc4:	08c0      	lsrs	r0, r0, #3
 8001fc6:	0767      	lsls	r7, r4, #29
 8001fc8:	4307      	orrs	r7, r0
 8001fca:	2080      	movs	r0, #128	; 0x80
 8001fcc:	08e4      	lsrs	r4, r4, #3
 8001fce:	0300      	lsls	r0, r0, #12
 8001fd0:	4204      	tst	r4, r0
 8001fd2:	d0e1      	beq.n	8001f98 <__aeabi_dsub+0x558>
 8001fd4:	08cb      	lsrs	r3, r1, #3
 8001fd6:	4203      	tst	r3, r0
 8001fd8:	d1de      	bne.n	8001f98 <__aeabi_dsub+0x558>
 8001fda:	08d7      	lsrs	r7, r2, #3
 8001fdc:	0749      	lsls	r1, r1, #29
 8001fde:	430f      	orrs	r7, r1
 8001fe0:	001c      	movs	r4, r3
 8001fe2:	e7d9      	b.n	8001f98 <__aeabi_dsub+0x558>
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	e771      	b.n	8001ecc <__aeabi_dsub+0x48c>
 8001fe8:	2500      	movs	r5, #0
 8001fea:	2700      	movs	r7, #0
 8001fec:	e5e9      	b.n	8001bc2 <__aeabi_dsub+0x182>
 8001fee:	002e      	movs	r6, r5
 8001ff0:	0027      	movs	r7, r4
 8001ff2:	3e20      	subs	r6, #32
 8001ff4:	40f7      	lsrs	r7, r6
 8001ff6:	2d20      	cmp	r5, #32
 8001ff8:	d02f      	beq.n	800205a <__aeabi_dsub+0x61a>
 8001ffa:	2640      	movs	r6, #64	; 0x40
 8001ffc:	1b75      	subs	r5, r6, r5
 8001ffe:	40ac      	lsls	r4, r5
 8002000:	4650      	mov	r0, sl
 8002002:	4320      	orrs	r0, r4
 8002004:	1e44      	subs	r4, r0, #1
 8002006:	41a0      	sbcs	r0, r4
 8002008:	2400      	movs	r4, #0
 800200a:	4338      	orrs	r0, r7
 800200c:	e6dc      	b.n	8001dc8 <__aeabi_dsub+0x388>
 800200e:	2480      	movs	r4, #128	; 0x80
 8002010:	2500      	movs	r5, #0
 8002012:	0324      	lsls	r4, r4, #12
 8002014:	4e13      	ldr	r6, [pc, #76]	; (8002064 <__aeabi_dsub+0x624>)
 8002016:	2700      	movs	r7, #0
 8002018:	e5d3      	b.n	8001bc2 <__aeabi_dsub+0x182>
 800201a:	4650      	mov	r0, sl
 800201c:	4320      	orrs	r0, r4
 800201e:	0007      	movs	r7, r0
 8002020:	1e78      	subs	r0, r7, #1
 8002022:	4187      	sbcs	r7, r0
 8002024:	2400      	movs	r4, #0
 8002026:	18bf      	adds	r7, r7, r2
 8002028:	e760      	b.n	8001eec <__aeabi_dsub+0x4ac>
 800202a:	000c      	movs	r4, r1
 800202c:	0017      	movs	r7, r2
 800202e:	e58d      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8002030:	000c      	movs	r4, r1
 8002032:	0017      	movs	r7, r2
 8002034:	4e0b      	ldr	r6, [pc, #44]	; (8002064 <__aeabi_dsub+0x624>)
 8002036:	e589      	b.n	8001b4c <__aeabi_dsub+0x10c>
 8002038:	001e      	movs	r6, r3
 800203a:	0027      	movs	r7, r4
 800203c:	3e20      	subs	r6, #32
 800203e:	40f7      	lsrs	r7, r6
 8002040:	2b20      	cmp	r3, #32
 8002042:	d00c      	beq.n	800205e <__aeabi_dsub+0x61e>
 8002044:	2640      	movs	r6, #64	; 0x40
 8002046:	1af3      	subs	r3, r6, r3
 8002048:	409c      	lsls	r4, r3
 800204a:	4650      	mov	r0, sl
 800204c:	4320      	orrs	r0, r4
 800204e:	1e44      	subs	r4, r0, #1
 8002050:	41a0      	sbcs	r0, r4
 8002052:	4307      	orrs	r7, r0
 8002054:	2400      	movs	r4, #0
 8002056:	18bf      	adds	r7, r7, r2
 8002058:	e748      	b.n	8001eec <__aeabi_dsub+0x4ac>
 800205a:	2400      	movs	r4, #0
 800205c:	e7d0      	b.n	8002000 <__aeabi_dsub+0x5c0>
 800205e:	2400      	movs	r4, #0
 8002060:	e7f3      	b.n	800204a <__aeabi_dsub+0x60a>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	000007ff 	.word	0x000007ff
 8002068:	ff7fffff 	.word	0xff7fffff

0800206c <__aeabi_d2iz>:
 800206c:	b530      	push	{r4, r5, lr}
 800206e:	4d13      	ldr	r5, [pc, #76]	; (80020bc <__aeabi_d2iz+0x50>)
 8002070:	030a      	lsls	r2, r1, #12
 8002072:	004b      	lsls	r3, r1, #1
 8002074:	0b12      	lsrs	r2, r2, #12
 8002076:	0d5b      	lsrs	r3, r3, #21
 8002078:	0fc9      	lsrs	r1, r1, #31
 800207a:	2400      	movs	r4, #0
 800207c:	42ab      	cmp	r3, r5
 800207e:	dd10      	ble.n	80020a2 <__aeabi_d2iz+0x36>
 8002080:	4c0f      	ldr	r4, [pc, #60]	; (80020c0 <__aeabi_d2iz+0x54>)
 8002082:	42a3      	cmp	r3, r4
 8002084:	dc0f      	bgt.n	80020a6 <__aeabi_d2iz+0x3a>
 8002086:	2480      	movs	r4, #128	; 0x80
 8002088:	4d0e      	ldr	r5, [pc, #56]	; (80020c4 <__aeabi_d2iz+0x58>)
 800208a:	0364      	lsls	r4, r4, #13
 800208c:	4322      	orrs	r2, r4
 800208e:	1aed      	subs	r5, r5, r3
 8002090:	2d1f      	cmp	r5, #31
 8002092:	dd0b      	ble.n	80020ac <__aeabi_d2iz+0x40>
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <__aeabi_d2iz+0x5c>)
 8002096:	1ac3      	subs	r3, r0, r3
 8002098:	40da      	lsrs	r2, r3
 800209a:	4254      	negs	r4, r2
 800209c:	2900      	cmp	r1, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_d2iz+0x36>
 80020a0:	0014      	movs	r4, r2
 80020a2:	0020      	movs	r0, r4
 80020a4:	bd30      	pop	{r4, r5, pc}
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <__aeabi_d2iz+0x60>)
 80020a8:	18cc      	adds	r4, r1, r3
 80020aa:	e7fa      	b.n	80020a2 <__aeabi_d2iz+0x36>
 80020ac:	4c08      	ldr	r4, [pc, #32]	; (80020d0 <__aeabi_d2iz+0x64>)
 80020ae:	40e8      	lsrs	r0, r5
 80020b0:	46a4      	mov	ip, r4
 80020b2:	4463      	add	r3, ip
 80020b4:	409a      	lsls	r2, r3
 80020b6:	4302      	orrs	r2, r0
 80020b8:	e7ef      	b.n	800209a <__aeabi_d2iz+0x2e>
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	000003fe 	.word	0x000003fe
 80020c0:	0000041d 	.word	0x0000041d
 80020c4:	00000433 	.word	0x00000433
 80020c8:	00000413 	.word	0x00000413
 80020cc:	7fffffff 	.word	0x7fffffff
 80020d0:	fffffbed 	.word	0xfffffbed

080020d4 <__aeabi_i2d>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d030      	beq.n	800213c <__aeabi_i2d+0x68>
 80020da:	17c3      	asrs	r3, r0, #31
 80020dc:	18c4      	adds	r4, r0, r3
 80020de:	405c      	eors	r4, r3
 80020e0:	0fc5      	lsrs	r5, r0, #31
 80020e2:	0020      	movs	r0, r4
 80020e4:	f000 f870 	bl	80021c8 <__clzsi2>
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <__aeabi_i2d+0x74>)
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <__aeabi_i2d+0x78>)
 80020ec:	1a1b      	subs	r3, r3, r0
 80020ee:	1ad2      	subs	r2, r2, r3
 80020f0:	2a1f      	cmp	r2, #31
 80020f2:	dd18      	ble.n	8002126 <__aeabi_i2d+0x52>
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <__aeabi_i2d+0x7c>)
 80020f6:	1ad2      	subs	r2, r2, r3
 80020f8:	4094      	lsls	r4, r2
 80020fa:	2200      	movs	r2, #0
 80020fc:	0324      	lsls	r4, r4, #12
 80020fe:	055b      	lsls	r3, r3, #21
 8002100:	0b24      	lsrs	r4, r4, #12
 8002102:	0d5b      	lsrs	r3, r3, #21
 8002104:	2100      	movs	r1, #0
 8002106:	0010      	movs	r0, r2
 8002108:	0324      	lsls	r4, r4, #12
 800210a:	0d0a      	lsrs	r2, r1, #20
 800210c:	0b24      	lsrs	r4, r4, #12
 800210e:	0512      	lsls	r2, r2, #20
 8002110:	4322      	orrs	r2, r4
 8002112:	4c10      	ldr	r4, [pc, #64]	; (8002154 <__aeabi_i2d+0x80>)
 8002114:	051b      	lsls	r3, r3, #20
 8002116:	4022      	ands	r2, r4
 8002118:	4313      	orrs	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	07ed      	lsls	r5, r5, #31
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	432b      	orrs	r3, r5
 8002122:	0019      	movs	r1, r3
 8002124:	bd70      	pop	{r4, r5, r6, pc}
 8002126:	0021      	movs	r1, r4
 8002128:	4091      	lsls	r1, r2
 800212a:	000a      	movs	r2, r1
 800212c:	210b      	movs	r1, #11
 800212e:	1a08      	subs	r0, r1, r0
 8002130:	40c4      	lsrs	r4, r0
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	0324      	lsls	r4, r4, #12
 8002136:	0b24      	lsrs	r4, r4, #12
 8002138:	0d5b      	lsrs	r3, r3, #21
 800213a:	e7e3      	b.n	8002104 <__aeabi_i2d+0x30>
 800213c:	2500      	movs	r5, #0
 800213e:	2300      	movs	r3, #0
 8002140:	2400      	movs	r4, #0
 8002142:	2200      	movs	r2, #0
 8002144:	e7de      	b.n	8002104 <__aeabi_i2d+0x30>
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	0000041e 	.word	0x0000041e
 800214c:	00000433 	.word	0x00000433
 8002150:	00000413 	.word	0x00000413
 8002154:	800fffff 	.word	0x800fffff

08002158 <__aeabi_ui2d>:
 8002158:	b510      	push	{r4, lr}
 800215a:	1e04      	subs	r4, r0, #0
 800215c:	d028      	beq.n	80021b0 <__aeabi_ui2d+0x58>
 800215e:	f000 f833 	bl	80021c8 <__clzsi2>
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <__aeabi_ui2d+0x60>)
 8002164:	4a15      	ldr	r2, [pc, #84]	; (80021bc <__aeabi_ui2d+0x64>)
 8002166:	1a1b      	subs	r3, r3, r0
 8002168:	1ad2      	subs	r2, r2, r3
 800216a:	2a1f      	cmp	r2, #31
 800216c:	dd15      	ble.n	800219a <__aeabi_ui2d+0x42>
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <__aeabi_ui2d+0x68>)
 8002170:	1ad2      	subs	r2, r2, r3
 8002172:	4094      	lsls	r4, r2
 8002174:	2200      	movs	r2, #0
 8002176:	0324      	lsls	r4, r4, #12
 8002178:	055b      	lsls	r3, r3, #21
 800217a:	0b24      	lsrs	r4, r4, #12
 800217c:	0d5b      	lsrs	r3, r3, #21
 800217e:	2100      	movs	r1, #0
 8002180:	0010      	movs	r0, r2
 8002182:	0324      	lsls	r4, r4, #12
 8002184:	0d0a      	lsrs	r2, r1, #20
 8002186:	0b24      	lsrs	r4, r4, #12
 8002188:	0512      	lsls	r2, r2, #20
 800218a:	4322      	orrs	r2, r4
 800218c:	4c0d      	ldr	r4, [pc, #52]	; (80021c4 <__aeabi_ui2d+0x6c>)
 800218e:	051b      	lsls	r3, r3, #20
 8002190:	4022      	ands	r2, r4
 8002192:	4313      	orrs	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	0859      	lsrs	r1, r3, #1
 8002198:	bd10      	pop	{r4, pc}
 800219a:	0021      	movs	r1, r4
 800219c:	4091      	lsls	r1, r2
 800219e:	000a      	movs	r2, r1
 80021a0:	210b      	movs	r1, #11
 80021a2:	1a08      	subs	r0, r1, r0
 80021a4:	40c4      	lsrs	r4, r0
 80021a6:	055b      	lsls	r3, r3, #21
 80021a8:	0324      	lsls	r4, r4, #12
 80021aa:	0b24      	lsrs	r4, r4, #12
 80021ac:	0d5b      	lsrs	r3, r3, #21
 80021ae:	e7e6      	b.n	800217e <__aeabi_ui2d+0x26>
 80021b0:	2300      	movs	r3, #0
 80021b2:	2400      	movs	r4, #0
 80021b4:	2200      	movs	r2, #0
 80021b6:	e7e2      	b.n	800217e <__aeabi_ui2d+0x26>
 80021b8:	0000041e 	.word	0x0000041e
 80021bc:	00000433 	.word	0x00000433
 80021c0:	00000413 	.word	0x00000413
 80021c4:	800fffff 	.word	0x800fffff

080021c8 <__clzsi2>:
 80021c8:	211c      	movs	r1, #28
 80021ca:	2301      	movs	r3, #1
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	4298      	cmp	r0, r3
 80021d0:	d301      	bcc.n	80021d6 <__clzsi2+0xe>
 80021d2:	0c00      	lsrs	r0, r0, #16
 80021d4:	3910      	subs	r1, #16
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	4298      	cmp	r0, r3
 80021da:	d301      	bcc.n	80021e0 <__clzsi2+0x18>
 80021dc:	0a00      	lsrs	r0, r0, #8
 80021de:	3908      	subs	r1, #8
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	4298      	cmp	r0, r3
 80021e4:	d301      	bcc.n	80021ea <__clzsi2+0x22>
 80021e6:	0900      	lsrs	r0, r0, #4
 80021e8:	3904      	subs	r1, #4
 80021ea:	a202      	add	r2, pc, #8	; (adr r2, 80021f4 <__clzsi2+0x2c>)
 80021ec:	5c10      	ldrb	r0, [r2, r0]
 80021ee:	1840      	adds	r0, r0, r1
 80021f0:	4770      	bx	lr
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	02020304 	.word	0x02020304
 80021f8:	01010101 	.word	0x01010101
	...

08002204 <__clzdi2>:
 8002204:	b510      	push	{r4, lr}
 8002206:	2900      	cmp	r1, #0
 8002208:	d103      	bne.n	8002212 <__clzdi2+0xe>
 800220a:	f7ff ffdd 	bl	80021c8 <__clzsi2>
 800220e:	3020      	adds	r0, #32
 8002210:	e002      	b.n	8002218 <__clzdi2+0x14>
 8002212:	1c08      	adds	r0, r1, #0
 8002214:	f7ff ffd8 	bl	80021c8 <__clzsi2>
 8002218:	bd10      	pop	{r4, pc}
 800221a:	46c0      	nop			; (mov r8, r8)

0800221c <LL_GPIO_Init>:
{
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800221c:	23a0      	movs	r3, #160	; 0xa0
{
 800221e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002220:	05db      	lsls	r3, r3, #23
{
 8002222:	0004      	movs	r4, r0
 8002224:	000e      	movs	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002226:	4298      	cmp	r0, r3
 8002228:	d00f      	beq.n	800224a <LL_GPIO_Init+0x2e>
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <LL_GPIO_Init+0x12c>)
 800222c:	4298      	cmp	r0, r3
 800222e:	d00c      	beq.n	800224a <LL_GPIO_Init+0x2e>
 8002230:	4b46      	ldr	r3, [pc, #280]	; (800234c <LL_GPIO_Init+0x130>)
 8002232:	4298      	cmp	r0, r3
 8002234:	d009      	beq.n	800224a <LL_GPIO_Init+0x2e>
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <LL_GPIO_Init+0x134>)
 8002238:	4298      	cmp	r0, r3
 800223a:	d006      	beq.n	800224a <LL_GPIO_Init+0x2e>
 800223c:	4b45      	ldr	r3, [pc, #276]	; (8002354 <LL_GPIO_Init+0x138>)
 800223e:	4298      	cmp	r0, r3
 8002240:	d003      	beq.n	800224a <LL_GPIO_Init+0x2e>
 8002242:	21a1      	movs	r1, #161	; 0xa1
 8002244:	4844      	ldr	r0, [pc, #272]	; (8002358 <LL_GPIO_Init+0x13c>)
 8002246:	f002 f987 	bl	8004558 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 800224a:	6833      	ldr	r3, [r6, #0]
 800224c:	4a43      	ldr	r2, [pc, #268]	; (800235c <LL_GPIO_Init+0x140>)
 800224e:	3b01      	subs	r3, #1
 8002250:	4293      	cmp	r3, r2
 8002252:	d903      	bls.n	800225c <LL_GPIO_Init+0x40>
 8002254:	21a2      	movs	r1, #162	; 0xa2
 8002256:	4840      	ldr	r0, [pc, #256]	; (8002358 <LL_GPIO_Init+0x13c>)
 8002258:	f002 f97e 	bl	8004558 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 800225c:	6873      	ldr	r3, [r6, #4]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d903      	bls.n	800226a <LL_GPIO_Init+0x4e>
 8002262:	21a3      	movs	r1, #163	; 0xa3
 8002264:	483c      	ldr	r0, [pc, #240]	; (8002358 <LL_GPIO_Init+0x13c>)
 8002266:	f002 f977 	bl	8004558 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 800226a:	6933      	ldr	r3, [r6, #16]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d903      	bls.n	8002278 <LL_GPIO_Init+0x5c>
 8002270:	21a4      	movs	r1, #164	; 0xa4
 8002272:	4839      	ldr	r0, [pc, #228]	; (8002358 <LL_GPIO_Init+0x13c>)
 8002274:	f002 f970 	bl	8004558 <assert_failed>
{
 8002278:	2300      	movs	r3, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800227a:	6835      	ldr	r5, [r6, #0]
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 800227c:	9300      	str	r3, [sp, #0]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800227e:	002b      	movs	r3, r5
 8002280:	9a00      	ldr	r2, [sp, #0]
 8002282:	40d3      	lsrs	r3, r2
 8002284:	d113      	bne.n	80022ae <LL_GPIO_Init+0x92>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002286:	6873      	ldr	r3, [r6, #4]
 8002288:	3b01      	subs	r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d80d      	bhi.n	80022aa <LL_GPIO_Init+0x8e>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 800228e:	68f3      	ldr	r3, [r6, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d903      	bls.n	800229c <LL_GPIO_Init+0x80>
 8002294:	21d7      	movs	r1, #215	; 0xd7
 8002296:	4830      	ldr	r0, [pc, #192]	; (8002358 <LL_GPIO_Init+0x13c>)
 8002298:	f002 f95e 	bl	8004558 <assert_failed>

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800229c:	6831      	ldr	r1, [r6, #0]
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800229e:	68f2      	ldr	r2, [r6, #12]
 80022a0:	6863      	ldr	r3, [r4, #4]
 80022a2:	434a      	muls	r2, r1
 80022a4:	438b      	bics	r3, r1
 80022a6:	4313      	orrs	r3, r2
 80022a8:	6063      	str	r3, [r4, #4]

  }
  return (SUCCESS);
}
 80022aa:	2000      	movs	r0, #0
 80022ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80022ae:	2301      	movs	r3, #1
 80022b0:	9a00      	ldr	r2, [sp, #0]
 80022b2:	4093      	lsls	r3, r2
 80022b4:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 80022b6:	d039      	beq.n	800232c <LL_GPIO_Init+0x110>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022b8:	002f      	movs	r7, r5
 80022ba:	2103      	movs	r1, #3
 80022bc:	436f      	muls	r7, r5
 80022be:	4379      	muls	r1, r7
 80022c0:	43c9      	mvns	r1, r1
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	9101      	str	r1, [sp, #4]
 80022c6:	400b      	ands	r3, r1
 80022c8:	0039      	movs	r1, r7
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022ca:	6872      	ldr	r2, [r6, #4]
 80022cc:	4351      	muls	r1, r2
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80022ce:	3a01      	subs	r2, #1
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	2a01      	cmp	r2, #1
 80022d6:	d80d      	bhi.n	80022f4 <LL_GPIO_Init+0xd8>
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 80022d8:	68b3      	ldr	r3, [r6, #8]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d903      	bls.n	80022e6 <LL_GPIO_Init+0xca>
 80022de:	21b8      	movs	r1, #184	; 0xb8
 80022e0:	481d      	ldr	r0, [pc, #116]	; (8002358 <LL_GPIO_Init+0x13c>)
 80022e2:	f002 f939 	bl	8004558 <assert_failed>
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80022e6:	68b3      	ldr	r3, [r6, #8]
 80022e8:	68a2      	ldr	r2, [r4, #8]
 80022ea:	437b      	muls	r3, r7
 80022ec:	9901      	ldr	r1, [sp, #4]
 80022ee:	400a      	ands	r2, r1
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80022f4:	6933      	ldr	r3, [r6, #16]
 80022f6:	68e2      	ldr	r2, [r4, #12]
 80022f8:	437b      	muls	r3, r7
 80022fa:	9901      	ldr	r1, [sp, #4]
 80022fc:	400a      	ands	r2, r1
 80022fe:	4313      	orrs	r3, r2
 8002300:	60e3      	str	r3, [r4, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002302:	6873      	ldr	r3, [r6, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d111      	bne.n	800232c <LL_GPIO_Init+0x110>
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8002308:	6973      	ldr	r3, [r6, #20]
 800230a:	2b07      	cmp	r3, #7
 800230c:	d903      	bls.n	8002316 <LL_GPIO_Init+0xfa>
 800230e:	21c4      	movs	r1, #196	; 0xc4
 8002310:	4811      	ldr	r0, [pc, #68]	; (8002358 <LL_GPIO_Init+0x13c>)
 8002312:	f002 f921 	bl	8004558 <assert_failed>
 8002316:	6972      	ldr	r2, [r6, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8002318:	2dff      	cmp	r5, #255	; 0xff
 800231a:	d80a      	bhi.n	8002332 <LL_GPIO_Init+0x116>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800231c:	210f      	movs	r1, #15
 800231e:	437f      	muls	r7, r7
 8002320:	4379      	muls	r1, r7
 8002322:	437a      	muls	r2, r7
 8002324:	6a23      	ldr	r3, [r4, #32]
 8002326:	438b      	bics	r3, r1
 8002328:	431a      	orrs	r2, r3
 800232a:	6222      	str	r2, [r4, #32]
    pinpos++;
 800232c:	9b00      	ldr	r3, [sp, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	e7a3      	b.n	800227a <LL_GPIO_Init+0x5e>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002332:	210f      	movs	r1, #15
 8002334:	0a2d      	lsrs	r5, r5, #8
 8002336:	436d      	muls	r5, r5
 8002338:	436d      	muls	r5, r5
 800233a:	4369      	muls	r1, r5
 800233c:	4355      	muls	r5, r2
 800233e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002340:	438b      	bics	r3, r1
 8002342:	431d      	orrs	r5, r3
 8002344:	6265      	str	r5, [r4, #36]	; 0x24
 8002346:	e7f1      	b.n	800232c <LL_GPIO_Init+0x110>
 8002348:	50000400 	.word	0x50000400
 800234c:	50000800 	.word	0x50000800
 8002350:	50000c00 	.word	0x50000c00
 8002354:	50001400 	.word	0x50001400
 8002358:	08005b28 	.word	0x08005b28
 800235c:	0000fffe 	.word	0x0000fffe

08002360 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002360:	4b02      	ldr	r3, [pc, #8]	; (800236c <LL_RCC_HSI_IsReady+0xc>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	0540      	lsls	r0, r0, #21
 8002366:	0fc0      	lsrs	r0, r0, #31
}
 8002368:	4770      	bx	lr
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	40021000 	.word	0x40021000

08002370 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <RCC_GetHCLKClockFreq+0x18>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002372:	4a06      	ldr	r2, [pc, #24]	; (800238c <RCC_GetHCLKClockFreq+0x1c>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	051b      	lsls	r3, r3, #20
 8002378:	0f1b      	lsrs	r3, r3, #28
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	589b      	ldr	r3, [r3, r2]
 800237e:	221f      	movs	r2, #31
 8002380:	4013      	ands	r3, r2
 8002382:	40d8      	lsrs	r0, r3
}
 8002384:	4770      	bx	lr
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	40021000 	.word	0x40021000
 800238c:	08005dd4 	.word	0x08005dd4

08002390 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <RCC_GetPCLK1ClockFreq+0x18>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002392:	4a06      	ldr	r2, [pc, #24]	; (80023ac <RCC_GetPCLK1ClockFreq+0x1c>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	045b      	lsls	r3, r3, #17
 8002398:	0f5b      	lsrs	r3, r3, #29
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	589b      	ldr	r3, [r3, r2]
 800239e:	221f      	movs	r2, #31
 80023a0:	4013      	ands	r3, r2
 80023a2:	40d8      	lsrs	r0, r3
}
 80023a4:	4770      	bx	lr
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08005e14 	.word	0x08005e14

080023b0 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <RCC_PLL_GetFreqDomain_SYS+0x34>)
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80023b2:	b510      	push	{r4, lr}
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	43d2      	mvns	r2, r2
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80023b8:	0792      	lsls	r2, r2, #30
 80023ba:	d110      	bne.n	80023de <RCC_PLL_GetFreqDomain_SYS+0x2e>
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <RCC_PLL_GetFreqDomain_SYS+0x38>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023be:	68d8      	ldr	r0, [r3, #12]
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80023c0:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023c2:	0440      	lsls	r0, r0, #17

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80023c4:	0649      	lsls	r1, r1, #25
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80023c6:	68dc      	ldr	r4, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023c8:	0e40      	lsrs	r0, r0, #25
 80023ca:	0f49      	lsrs	r1, r1, #29
 80023cc:	4350      	muls	r0, r2
 80023ce:	3101      	adds	r1, #1
 80023d0:	f7fd fe96 	bl	8000100 <__udivsi3>
 80023d4:	0f61      	lsrs	r1, r4, #29
 80023d6:	3101      	adds	r1, #1
 80023d8:	f7fd fe92 	bl	8000100 <__udivsi3>
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80023dc:	bd10      	pop	{r4, pc}
      pllinputfreq = HSI_VALUE;
 80023de:	4a03      	ldr	r2, [pc, #12]	; (80023ec <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80023e0:	e7ed      	b.n	80023be <RCC_PLL_GetFreqDomain_SYS+0xe>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	007a1200 	.word	0x007a1200
 80023ec:	00f42400 	.word	0x00f42400

080023f0 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023f0:	2138      	movs	r1, #56	; 0x38
 80023f2:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <RCC_GetSystemClockFreq+0x30>)
{
 80023f4:	b510      	push	{r4, lr}
 80023f6:	6893      	ldr	r3, [r2, #8]
 80023f8:	400b      	ands	r3, r1
  switch (LL_RCC_GetSysClkSource())
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d00d      	beq.n	800241a <RCC_GetSystemClockFreq+0x2a>
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d102      	bne.n	8002408 <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002402:	f7ff ffd5 	bl	80023b0 <RCC_PLL_GetFreqDomain_SYS>
}
 8002406:	bd10      	pop	{r4, pc}
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002408:	2101      	movs	r1, #1
 800240a:	6813      	ldr	r3, [r2, #0]
      frequency = (HSI_VALUE / hsidiv);
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <RCC_GetSystemClockFreq+0x34>)
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800240e:	049b      	lsls	r3, r3, #18
 8002410:	0f5b      	lsrs	r3, r3, #29
 8002412:	4099      	lsls	r1, r3
      frequency = (HSI_VALUE / hsidiv);
 8002414:	f7fd fe74 	bl	8000100 <__udivsi3>
 8002418:	e7f5      	b.n	8002406 <RCC_GetSystemClockFreq+0x16>
      frequency = HSE_VALUE;
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <RCC_GetSystemClockFreq+0x38>)
  return frequency;
 800241c:	e7f3      	b.n	8002406 <RCC_GetSystemClockFreq+0x16>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	40021000 	.word	0x40021000
 8002424:	00f42400 	.word	0x00f42400
 8002428:	007a1200 	.word	0x007a1200

0800242c <LL_RCC_GetSystemClocksFreq>:
{
 800242c:	b510      	push	{r4, lr}
 800242e:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002430:	f7ff ffde 	bl	80023f0 <RCC_GetSystemClockFreq>
 8002434:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002436:	f7ff ff9b 	bl	8002370 <RCC_GetHCLKClockFreq>
 800243a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800243c:	f7ff ffa8 	bl	8002390 <RCC_GetPCLK1ClockFreq>
 8002440:	60a0      	str	r0, [r4, #8]
}
 8002442:	bd10      	pop	{r4, pc}

08002444 <LL_RCC_GetUSARTClockFreq>:
{
 8002444:	b510      	push	{r4, lr}
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 8002446:	2803      	cmp	r0, #3
 8002448:	d01a      	beq.n	8002480 <LL_RCC_GetUSARTClockFreq+0x3c>
 800244a:	280c      	cmp	r0, #12
 800244c:	d02a      	beq.n	80024a4 <LL_RCC_GetUSARTClockFreq+0x60>
 800244e:	21de      	movs	r1, #222	; 0xde
 8002450:	481b      	ldr	r0, [pc, #108]	; (80024c0 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8002452:	f002 f881 	bl	8004558 <assert_failed>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002456:	2000      	movs	r0, #0
 8002458:	e004      	b.n	8002464 <LL_RCC_GetUSARTClockFreq+0x20>
        if (LL_RCC_HSI_IsReady() == 1U)
 800245a:	f7ff ff81 	bl	8002360 <LL_RCC_HSI_IsReady>
 800245e:	2801      	cmp	r0, #1
 8002460:	d1f9      	bne.n	8002456 <LL_RCC_GetUSARTClockFreq+0x12>
          usart_frequency = HSI_VALUE;
 8002462:	4818      	ldr	r0, [pc, #96]	; (80024c4 <LL_RCC_GetUSARTClockFreq+0x80>)
}
 8002464:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002466:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002468:	079b      	lsls	r3, r3, #30
 800246a:	d5f4      	bpl.n	8002456 <LL_RCC_GetUSARTClockFreq+0x12>
          usart_frequency = LSE_VALUE;
 800246c:	2080      	movs	r0, #128	; 0x80
 800246e:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8002470:	e7f8      	b.n	8002464 <LL_RCC_GetUSARTClockFreq+0x20>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002472:	f7ff ffbd 	bl	80023f0 <RCC_GetSystemClockFreq>
 8002476:	f7ff ff7b 	bl	8002370 <RCC_GetHCLKClockFreq>
 800247a:	f7ff ff89 	bl	8002390 <RCC_GetPCLK1ClockFreq>
        break;
 800247e:	e7f1      	b.n	8002464 <LL_RCC_GetUSARTClockFreq+0x20>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002480:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002482:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002484:	4003      	ands	r3, r0
 8002486:	20c0      	movs	r0, #192	; 0xc0
 8002488:	0280      	lsls	r0, r0, #10
 800248a:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <LL_RCC_GetUSARTClockFreq+0x88>)
 800248e:	4298      	cmp	r0, r3
 8002490:	d0e3      	beq.n	800245a <LL_RCC_GetUSARTClockFreq+0x16>
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <LL_RCC_GetUSARTClockFreq+0x8c>)
 8002494:	4298      	cmp	r0, r3
 8002496:	d0e6      	beq.n	8002466 <LL_RCC_GetUSARTClockFreq+0x22>
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <LL_RCC_GetUSARTClockFreq+0x90>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800249a:	4298      	cmp	r0, r3
 800249c:	d1e9      	bne.n	8002472 <LL_RCC_GetUSARTClockFreq+0x2e>
        usart_frequency = RCC_GetSystemClockFreq();
 800249e:	f7ff ffa7 	bl	80023f0 <RCC_GetSystemClockFreq>
        break;
 80024a2:	e7df      	b.n	8002464 <LL_RCC_GetUSARTClockFreq+0x20>
 80024a4:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <LL_RCC_GetUSARTClockFreq+0x84>)
 80024a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024a8:	4003      	ands	r3, r0
 80024aa:	20c0      	movs	r0, #192	; 0xc0
 80024ac:	0300      	lsls	r0, r0, #12
 80024ae:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <LL_RCC_GetUSARTClockFreq+0x94>)
 80024b2:	4298      	cmp	r0, r3
 80024b4:	d0d1      	beq.n	800245a <LL_RCC_GetUSARTClockFreq+0x16>
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <LL_RCC_GetUSARTClockFreq+0x98>)
 80024b8:	4298      	cmp	r0, r3
 80024ba:	d0d4      	beq.n	8002466 <LL_RCC_GetUSARTClockFreq+0x22>
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <LL_RCC_GetUSARTClockFreq+0x9c>)
 80024be:	e7ec      	b.n	800249a <LL_RCC_GetUSARTClockFreq+0x56>
 80024c0:	08005b60 	.word	0x08005b60
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	40021000 	.word	0x40021000
 80024cc:	00030002 	.word	0x00030002
 80024d0:	00030003 	.word	0x00030003
 80024d4:	00030001 	.word	0x00030001
 80024d8:	000c0008 	.word	0x000c0008
 80024dc:	000c000c 	.word	0x000c000c
 80024e0:	000c0004 	.word	0x000c0004

080024e4 <LL_SPI_Init>:
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
  ErrorStatus status = ERROR;

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 80024e4:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <LL_SPI_Init+0x174>)
{
 80024e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024e8:	0005      	movs	r5, r0
 80024ea:	000c      	movs	r4, r1
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 80024ec:	4298      	cmp	r0, r3
 80024ee:	d006      	beq.n	80024fe <LL_SPI_Init+0x1a>
 80024f0:	4b5a      	ldr	r3, [pc, #360]	; (800265c <LL_SPI_Init+0x178>)
 80024f2:	4298      	cmp	r0, r3
 80024f4:	d003      	beq.n	80024fe <LL_SPI_Init+0x1a>
 80024f6:	21b6      	movs	r1, #182	; 0xb6
 80024f8:	4859      	ldr	r0, [pc, #356]	; (8002660 <LL_SPI_Init+0x17c>)
 80024fa:	f002 f82d 	bl	8004558 <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	4e58      	ldr	r6, [pc, #352]	; (8002664 <LL_SPI_Init+0x180>)
 8002502:	4233      	tst	r3, r6
 8002504:	d009      	beq.n	800251a <LL_SPI_Init+0x36>
 8002506:	4a58      	ldr	r2, [pc, #352]	; (8002668 <LL_SPI_Init+0x184>)
 8002508:	4013      	ands	r3, r2
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	0212      	lsls	r2, r2, #8
 800250e:	4293      	cmp	r3, r2
 8002510:	d003      	beq.n	800251a <LL_SPI_Init+0x36>
 8002512:	21b9      	movs	r1, #185	; 0xb9
 8002514:	4852      	ldr	r0, [pc, #328]	; (8002660 <LL_SPI_Init+0x17c>)
 8002516:	f002 f81f 	bl	8004558 <assert_failed>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 800251a:	2282      	movs	r2, #130	; 0x82
 800251c:	6863      	ldr	r3, [r4, #4]
 800251e:	0052      	lsls	r2, r2, #1
 8002520:	4293      	cmp	r3, r2
 8002522:	d005      	beq.n	8002530 <LL_SPI_Init+0x4c>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <LL_SPI_Init+0x4c>
 8002528:	21ba      	movs	r1, #186	; 0xba
 800252a:	484d      	ldr	r0, [pc, #308]	; (8002660 <LL_SPI_Init+0x17c>)
 800252c:	f002 f814 	bl	8004558 <assert_failed>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 8002530:	0033      	movs	r3, r6
 8002532:	21c0      	movs	r1, #192	; 0xc0
 8002534:	68a2      	ldr	r2, [r4, #8]
 8002536:	0089      	lsls	r1, r1, #2
 8002538:	4013      	ands	r3, r2
 800253a:	4e4c      	ldr	r6, [pc, #304]	; (800266c <LL_SPI_Init+0x188>)
 800253c:	428b      	cmp	r3, r1
 800253e:	d019      	beq.n	8002574 <LL_SPI_Init+0x90>
 8002540:	4b4b      	ldr	r3, [pc, #300]	; (8002670 <LL_SPI_Init+0x18c>)
 8002542:	3101      	adds	r1, #1
 8002544:	31ff      	adds	r1, #255	; 0xff
 8002546:	4013      	ands	r3, r2
 8002548:	428b      	cmp	r3, r1
 800254a:	d013      	beq.n	8002574 <LL_SPI_Init+0x90>
 800254c:	21c0      	movs	r1, #192	; 0xc0
 800254e:	0013      	movs	r3, r2
 8002550:	00c9      	lsls	r1, r1, #3
 8002552:	4033      	ands	r3, r6
 8002554:	428b      	cmp	r3, r1
 8002556:	d00d      	beq.n	8002574 <LL_SPI_Init+0x90>
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	4b46      	ldr	r3, [pc, #280]	; (8002674 <LL_SPI_Init+0x190>)
 800255c:	0109      	lsls	r1, r1, #4
 800255e:	4013      	ands	r3, r2
 8002560:	428b      	cmp	r3, r1
 8002562:	d007      	beq.n	8002574 <LL_SPI_Init+0x90>
 8002564:	23f0      	movs	r3, #240	; 0xf0
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	429a      	cmp	r2, r3
 800256a:	d003      	beq.n	8002574 <LL_SPI_Init+0x90>
 800256c:	21bb      	movs	r1, #187	; 0xbb
 800256e:	483c      	ldr	r0, [pc, #240]	; (8002660 <LL_SPI_Init+0x17c>)
 8002570:	f001 fff2 	bl	8004558 <assert_failed>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8002574:	2302      	movs	r3, #2
 8002576:	68e2      	ldr	r2, [r4, #12]
 8002578:	439a      	bics	r2, r3
 800257a:	d003      	beq.n	8002584 <LL_SPI_Init+0xa0>
 800257c:	21bc      	movs	r1, #188	; 0xbc
 800257e:	4838      	ldr	r0, [pc, #224]	; (8002660 <LL_SPI_Init+0x17c>)
 8002580:	f001 ffea 	bl	8004558 <assert_failed>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8002584:	6923      	ldr	r3, [r4, #16]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d903      	bls.n	8002592 <LL_SPI_Init+0xae>
 800258a:	21bd      	movs	r1, #189	; 0xbd
 800258c:	4834      	ldr	r0, [pc, #208]	; (8002660 <LL_SPI_Init+0x17c>)
 800258e:	f001 ffe3 	bl	8004558 <assert_failed>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8002592:	6963      	ldr	r3, [r4, #20]
 8002594:	4a38      	ldr	r2, [pc, #224]	; (8002678 <LL_SPI_Init+0x194>)
 8002596:	4213      	tst	r3, r2
 8002598:	d007      	beq.n	80025aa <LL_SPI_Init+0xc6>
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	02d2      	lsls	r2, r2, #11
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <LL_SPI_Init+0xc6>
 80025a2:	21be      	movs	r1, #190	; 0xbe
 80025a4:	482e      	ldr	r0, [pc, #184]	; (8002660 <LL_SPI_Init+0x17c>)
 80025a6:	f001 ffd7 	bl	8004558 <assert_failed>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 80025aa:	2318      	movs	r3, #24
 80025ac:	69a2      	ldr	r2, [r4, #24]
 80025ae:	439a      	bics	r2, r3
 80025b0:	d005      	beq.n	80025be <LL_SPI_Init+0xda>
 80025b2:	2a20      	cmp	r2, #32
 80025b4:	d003      	beq.n	80025be <LL_SPI_Init+0xda>
 80025b6:	21bf      	movs	r1, #191	; 0xbf
 80025b8:	4829      	ldr	r0, [pc, #164]	; (8002660 <LL_SPI_Init+0x17c>)
 80025ba:	f001 ffcd 	bl	8004558 <assert_failed>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	69e2      	ldr	r2, [r4, #28]
 80025c2:	439a      	bics	r2, r3
 80025c4:	d003      	beq.n	80025ce <LL_SPI_Init+0xea>
 80025c6:	21c0      	movs	r1, #192	; 0xc0
 80025c8:	4825      	ldr	r0, [pc, #148]	; (8002660 <LL_SPI_Init+0x17c>)
 80025ca:	f001 ffc5 	bl	8004558 <assert_failed>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <LL_SPI_Init+0x198>)
 80025d0:	6a22      	ldr	r2, [r4, #32]
 80025d2:	421a      	tst	r2, r3
 80025d4:	d003      	beq.n	80025de <LL_SPI_Init+0xfa>
 80025d6:	21c1      	movs	r1, #193	; 0xc1
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <LL_SPI_Init+0x17c>)
 80025da:	f001 ffbd 	bl	8004558 <assert_failed>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80025de:	2340      	movs	r3, #64	; 0x40
 80025e0:	6829      	ldr	r1, [r5, #0]
  ErrorStatus status = ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	4019      	ands	r1, r3
 80025e6:	d00f      	beq.n	8002608 <LL_SPI_Init+0x124>
    status = SUCCESS;
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025e8:	69eb      	ldr	r3, [r5, #28]
 80025ea:	401e      	ands	r6, r3
 80025ec:	61ee      	str	r6, [r5, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 80025ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 80025f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <LL_SPI_Init+0x11a>
 80025f6:	21e6      	movs	r1, #230	; 0xe6
 80025f8:	4819      	ldr	r0, [pc, #100]	; (8002660 <LL_SPI_Init+0x17c>)
 80025fa:	f001 ffad 	bl	8004558 <assert_failed>
 80025fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    status = SUCCESS;
 8002600:	2000      	movs	r0, #0
 8002602:	b29b      	uxth	r3, r3
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002604:	612b      	str	r3, [r5, #16]
 8002606:	e7ef      	b.n	80025e8 <LL_SPI_Init+0x104>
    MODIFY_REG(SPIx->CR1,
 8002608:	682b      	ldr	r3, [r5, #0]
 800260a:	6860      	ldr	r0, [r4, #4]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	6962      	ldr	r2, [r4, #20]
 8002612:	4303      	orrs	r3, r0
 8002614:	68e0      	ldr	r0, [r4, #12]
 8002616:	6a27      	ldr	r7, [r4, #32]
 8002618:	4303      	orrs	r3, r0
 800261a:	6920      	ldr	r0, [r4, #16]
 800261c:	4303      	orrs	r3, r0
 800261e:	69a0      	ldr	r0, [r4, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	4303      	orrs	r3, r0
 8002624:	69e0      	ldr	r0, [r4, #28]
    MODIFY_REG(SPIx->CR2,
 8002626:	0c12      	lsrs	r2, r2, #16
    MODIFY_REG(SPIx->CR1,
 8002628:	4303      	orrs	r3, r0
 800262a:	433b      	orrs	r3, r7
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	4814      	ldr	r0, [pc, #80]	; (8002680 <LL_SPI_Init+0x19c>)
 8002630:	9b00      	ldr	r3, [sp, #0]
 8002632:	4003      	ands	r3, r0
 8002634:	0018      	movs	r0, r3
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	4318      	orrs	r0, r3
 800263a:	6028      	str	r0, [r5, #0]
    MODIFY_REG(SPIx->CR2,
 800263c:	68a0      	ldr	r0, [r4, #8]
 800263e:	686b      	ldr	r3, [r5, #4]
 8002640:	4302      	orrs	r2, r0
 8002642:	4810      	ldr	r0, [pc, #64]	; (8002684 <LL_SPI_Init+0x1a0>)
 8002644:	4003      	ands	r3, r0
 8002646:	431a      	orrs	r2, r3
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002648:	2380      	movs	r3, #128	; 0x80
    MODIFY_REG(SPIx->CR2,
 800264a:	606a      	str	r2, [r5, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	429f      	cmp	r7, r3
 8002650:	d0ce      	beq.n	80025f0 <LL_SPI_Init+0x10c>
    status = SUCCESS;
 8002652:	0008      	movs	r0, r1
 8002654:	e7c8      	b.n	80025e8 <LL_SPI_Init+0x104>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	40013000 	.word	0x40013000
 800265c:	40003800 	.word	0x40003800
 8002660:	08005b97 	.word	0x08005b97
 8002664:	fffffbff 	.word	0xfffffbff
 8002668:	ffffbfff 	.word	0xffffbfff
 800266c:	fffff7ff 	.word	0xfffff7ff
 8002670:	fffff6ff 	.word	0xfffff6ff
 8002674:	fffffcff 	.word	0xfffffcff
 8002678:	fffffdff 	.word	0xfffffdff
 800267c:	ffffdfff 	.word	0xffffdfff
 8002680:	ffff0040 	.word	0xffff0040
 8002684:	fffff0fb 	.word	0xfffff0fb

08002688 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002688:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 800268a:	4e3a      	ldr	r6, [pc, #232]	; (8002774 <LL_TIM_Init+0xec>)
{
 800268c:	0004      	movs	r4, r0
 800268e:	000d      	movs	r5, r1
  assert_param(IS_TIM_INSTANCE(TIMx));
 8002690:	42b0      	cmp	r0, r6
 8002692:	d019      	beq.n	80026c8 <LL_TIM_Init+0x40>
 8002694:	4b38      	ldr	r3, [pc, #224]	; (8002778 <LL_TIM_Init+0xf0>)
 8002696:	4298      	cmp	r0, r3
 8002698:	d016      	beq.n	80026c8 <LL_TIM_Init+0x40>
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <LL_TIM_Init+0xf4>)
 800269c:	4298      	cmp	r0, r3
 800269e:	d013      	beq.n	80026c8 <LL_TIM_Init+0x40>
 80026a0:	4b37      	ldr	r3, [pc, #220]	; (8002780 <LL_TIM_Init+0xf8>)
 80026a2:	4298      	cmp	r0, r3
 80026a4:	d010      	beq.n	80026c8 <LL_TIM_Init+0x40>
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <LL_TIM_Init+0xfc>)
 80026a8:	4298      	cmp	r0, r3
 80026aa:	d00d      	beq.n	80026c8 <LL_TIM_Init+0x40>
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <LL_TIM_Init+0x100>)
 80026ae:	4298      	cmp	r0, r3
 80026b0:	d00a      	beq.n	80026c8 <LL_TIM_Init+0x40>
 80026b2:	4b36      	ldr	r3, [pc, #216]	; (800278c <LL_TIM_Init+0x104>)
 80026b4:	4298      	cmp	r0, r3
 80026b6:	d007      	beq.n	80026c8 <LL_TIM_Init+0x40>
 80026b8:	4b35      	ldr	r3, [pc, #212]	; (8002790 <LL_TIM_Init+0x108>)
 80026ba:	4298      	cmp	r0, r3
 80026bc:	d004      	beq.n	80026c8 <LL_TIM_Init+0x40>
 80026be:	21a2      	movs	r1, #162	; 0xa2
 80026c0:	4834      	ldr	r0, [pc, #208]	; (8002794 <LL_TIM_Init+0x10c>)
 80026c2:	0049      	lsls	r1, r1, #1
 80026c4:	f001 ff48 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 80026c8:	686b      	ldr	r3, [r5, #4]
 80026ca:	2210      	movs	r2, #16
 80026cc:	0019      	movs	r1, r3
 80026ce:	4391      	bics	r1, r2
 80026d0:	d00b      	beq.n	80026ea <LL_TIM_Init+0x62>
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	0019      	movs	r1, r3
 80026d6:	4391      	bics	r1, r2
 80026d8:	2920      	cmp	r1, #32
 80026da:	d006      	beq.n	80026ea <LL_TIM_Init+0x62>
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d004      	beq.n	80026ea <LL_TIM_Init+0x62>
 80026e0:	2146      	movs	r1, #70	; 0x46
 80026e2:	482c      	ldr	r0, [pc, #176]	; (8002794 <LL_TIM_Init+0x10c>)
 80026e4:	31ff      	adds	r1, #255	; 0xff
 80026e6:	f001 ff37 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 80026ea:	68eb      	ldr	r3, [r5, #12]
 80026ec:	4a2a      	ldr	r2, [pc, #168]	; (8002798 <LL_TIM_Init+0x110>)
 80026ee:	4213      	tst	r3, r2
 80026f0:	d008      	beq.n	8002704 <LL_TIM_Init+0x7c>
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <LL_TIM_Init+0x7c>
 80026fa:	21a3      	movs	r1, #163	; 0xa3
 80026fc:	4825      	ldr	r0, [pc, #148]	; (8002794 <LL_TIM_Init+0x10c>)
 80026fe:	0049      	lsls	r1, r1, #1
 8002700:	f001 ff2a 	bl	8004558 <assert_failed>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002704:	6823      	ldr	r3, [r4, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002706:	42b4      	cmp	r4, r6
 8002708:	d002      	beq.n	8002710 <LL_TIM_Init+0x88>
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <LL_TIM_Init+0xf0>)
 800270c:	4294      	cmp	r4, r2
 800270e:	d108      	bne.n	8002722 <LL_TIM_Init+0x9a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002710:	2270      	movs	r2, #112	; 0x70
 8002712:	4393      	bics	r3, r2
 8002714:	686a      	ldr	r2, [r5, #4]
 8002716:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002718:	42b4      	cmp	r4, r6
 800271a:	d00e      	beq.n	800273a <LL_TIM_Init+0xb2>
 800271c:	4a16      	ldr	r2, [pc, #88]	; (8002778 <LL_TIM_Init+0xf0>)
 800271e:	4294      	cmp	r4, r2
 8002720:	d00b      	beq.n	800273a <LL_TIM_Init+0xb2>
 8002722:	4a18      	ldr	r2, [pc, #96]	; (8002784 <LL_TIM_Init+0xfc>)
 8002724:	4294      	cmp	r4, r2
 8002726:	d008      	beq.n	800273a <LL_TIM_Init+0xb2>
 8002728:	4a17      	ldr	r2, [pc, #92]	; (8002788 <LL_TIM_Init+0x100>)
 800272a:	4294      	cmp	r4, r2
 800272c:	d005      	beq.n	800273a <LL_TIM_Init+0xb2>
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <LL_TIM_Init+0x104>)
 8002730:	4294      	cmp	r4, r2
 8002732:	d002      	beq.n	800273a <LL_TIM_Init+0xb2>
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <LL_TIM_Init+0x108>)
 8002736:	4294      	cmp	r4, r2
 8002738:	d103      	bne.n	8002742 <LL_TIM_Init+0xba>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <LL_TIM_Init+0x114>)
 800273c:	4013      	ands	r3, r2
 800273e:	68ea      	ldr	r2, [r5, #12]
 8002740:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002742:	6023      	str	r3, [r4, #0]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 8002744:	68ab      	ldr	r3, [r5, #8]
 8002746:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002748:	882b      	ldrh	r3, [r5, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800274a:	62a3      	str	r3, [r4, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800274c:	42b4      	cmp	r4, r6
 800274e:	d008      	beq.n	8002762 <LL_TIM_Init+0xda>
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <LL_TIM_Init+0x100>)
 8002752:	429c      	cmp	r4, r3
 8002754:	d005      	beq.n	8002762 <LL_TIM_Init+0xda>
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <LL_TIM_Init+0x104>)
 8002758:	429c      	cmp	r4, r3
 800275a:	d002      	beq.n	8002762 <LL_TIM_Init+0xda>
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <LL_TIM_Init+0x108>)
 800275e:	429c      	cmp	r4, r3
 8002760:	d101      	bne.n	8002766 <LL_TIM_Init+0xde>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002762:	7c2b      	ldrb	r3, [r5, #16]
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002764:	6323      	str	r3, [r4, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002766:	2301      	movs	r3, #1
 8002768:	6962      	ldr	r2, [r4, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 800276a:	2000      	movs	r0, #0
 800276c:	4313      	orrs	r3, r2
 800276e:	6163      	str	r3, [r4, #20]
 8002770:	bd70      	pop	{r4, r5, r6, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40000400 	.word	0x40000400
 800277c:	40001000 	.word	0x40001000
 8002780:	40001400 	.word	0x40001400
 8002784:	40002000 	.word	0x40002000
 8002788:	40014000 	.word	0x40014000
 800278c:	40014400 	.word	0x40014400
 8002790:	40014800 	.word	0x40014800
 8002794:	08005bce 	.word	0x08005bce
 8002798:	fffffeff 	.word	0xfffffeff
 800279c:	fffffcff 	.word	0xfffffcff

080027a0 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80027a0:	2380      	movs	r3, #128	; 0x80
{
 80027a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (Channel)
 80027a4:	005b      	lsls	r3, r3, #1
{
 80027a6:	0004      	movs	r4, r0
 80027a8:	0015      	movs	r5, r2
  switch (Channel)
 80027aa:	4299      	cmp	r1, r3
 80027ac:	d100      	bne.n	80027b0 <LL_TIM_OC_Init+0x10>
 80027ae:	e1f3      	b.n	8002b98 <LL_TIM_OC_Init+0x3f8>
 80027b0:	d807      	bhi.n	80027c2 <LL_TIM_OC_Init+0x22>
 80027b2:	2901      	cmp	r1, #1
 80027b4:	d100      	bne.n	80027b8 <LL_TIM_OC_Init+0x18>
 80027b6:	e090      	b.n	80028da <LL_TIM_OC_Init+0x13a>
 80027b8:	2910      	cmp	r1, #16
 80027ba:	d100      	bne.n	80027be <LL_TIM_OC_Init+0x1e>
 80027bc:	e15a      	b.n	8002a74 <LL_TIM_OC_Init+0x2d4>
  ErrorStatus result = ERROR;
 80027be:	2001      	movs	r0, #1
 80027c0:	e277      	b.n	8002cb2 <LL_TIM_OC_Init+0x512>
  switch (Channel)
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	025b      	lsls	r3, r3, #9
 80027c6:	4299      	cmp	r1, r3
 80027c8:	d100      	bne.n	80027cc <LL_TIM_OC_Init+0x2c>
 80027ca:	e2ab      	b.n	8002d24 <LL_TIM_OC_Init+0x584>
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	035b      	lsls	r3, r3, #13
 80027d0:	4299      	cmp	r1, r3
 80027d2:	d100      	bne.n	80027d6 <LL_TIM_OC_Init+0x36>
 80027d4:	e31c      	b.n	8002e10 <LL_TIM_OC_Init+0x670>
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	015b      	lsls	r3, r3, #5
 80027da:	4299      	cmp	r1, r3
 80027dc:	d1ef      	bne.n	80027be <LL_TIM_OC_Init+0x1e>
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
 80027de:	4f8a      	ldr	r7, [pc, #552]	; (8002a08 <LL_TIM_OC_Init+0x268>)
 80027e0:	42b8      	cmp	r0, r7
 80027e2:	d006      	beq.n	80027f2 <LL_TIM_OC_Init+0x52>
 80027e4:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <LL_TIM_OC_Init+0x26c>)
 80027e6:	4298      	cmp	r0, r3
 80027e8:	d003      	beq.n	80027f2 <LL_TIM_OC_Init+0x52>
 80027ea:	4989      	ldr	r1, [pc, #548]	; (8002a10 <LL_TIM_OC_Init+0x270>)
 80027ec:	4889      	ldr	r0, [pc, #548]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 80027ee:	f001 feb3 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 80027f2:	682b      	ldr	r3, [r5, #0]
 80027f4:	2210      	movs	r2, #16
 80027f6:	0019      	movs	r1, r3
 80027f8:	0018      	movs	r0, r3
 80027fa:	4391      	bics	r1, r2
 80027fc:	3220      	adds	r2, #32
 80027fe:	4390      	bics	r0, r2
 8002800:	d00e      	beq.n	8002820 <LL_TIM_OC_Init+0x80>
 8002802:	2840      	cmp	r0, #64	; 0x40
 8002804:	d00c      	beq.n	8002820 <LL_TIM_OC_Init+0x80>
 8002806:	2250      	movs	r2, #80	; 0x50
 8002808:	4393      	bics	r3, r2
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	0252      	lsls	r2, r2, #9
 800280e:	4293      	cmp	r3, r2
 8002810:	d006      	beq.n	8002820 <LL_TIM_OC_Init+0x80>
 8002812:	4b81      	ldr	r3, [pc, #516]	; (8002a18 <LL_TIM_OC_Init+0x278>)
 8002814:	4299      	cmp	r1, r3
 8002816:	d003      	beq.n	8002820 <LL_TIM_OC_Init+0x80>
 8002818:	4980      	ldr	r1, [pc, #512]	; (8002a1c <LL_TIM_OC_Init+0x27c>)
 800281a:	487e      	ldr	r0, [pc, #504]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 800281c:	f001 fe9c 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8002820:	686b      	ldr	r3, [r5, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d903      	bls.n	800282e <LL_TIM_OC_Init+0x8e>
 8002826:	497e      	ldr	r1, [pc, #504]	; (8002a20 <LL_TIM_OC_Init+0x280>)
 8002828:	487a      	ldr	r0, [pc, #488]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 800282a:	f001 fe95 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 800282e:	2302      	movs	r3, #2
 8002830:	692a      	ldr	r2, [r5, #16]
 8002832:	439a      	bics	r2, r3
 8002834:	d003      	beq.n	800283e <LL_TIM_OC_Init+0x9e>
 8002836:	497b      	ldr	r1, [pc, #492]	; (8002a24 <LL_TIM_OC_Init+0x284>)
 8002838:	4876      	ldr	r0, [pc, #472]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 800283a:	f001 fe8d 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 800283e:	2302      	movs	r3, #2
 8002840:	696a      	ldr	r2, [r5, #20]
 8002842:	439a      	bics	r2, r3
 8002844:	d004      	beq.n	8002850 <LL_TIM_OC_Init+0xb0>
 8002846:	2181      	movs	r1, #129	; 0x81
 8002848:	4872      	ldr	r0, [pc, #456]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 800284a:	00c9      	lsls	r1, r1, #3
 800284c:	f001 fe84 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8002850:	68ab      	ldr	r3, [r5, #8]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d903      	bls.n	800285e <LL_TIM_OC_Init+0xbe>
 8002856:	4974      	ldr	r1, [pc, #464]	; (8002a28 <LL_TIM_OC_Init+0x288>)
 8002858:	486e      	ldr	r0, [pc, #440]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 800285a:	f001 fe7d 	bl	8004558 <assert_failed>

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800285e:	6a23      	ldr	r3, [r4, #32]
 8002860:	4972      	ldr	r1, [pc, #456]	; (8002a2c <LL_TIM_OC_Init+0x28c>)

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002862:	4873      	ldr	r0, [pc, #460]	; (8002a30 <LL_TIM_OC_Init+0x290>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002864:	400b      	ands	r3, r1
 8002866:	6223      	str	r3, [r4, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002868:	6a23      	ldr	r3, [r4, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800286a:	6866      	ldr	r6, [r4, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800286c:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800286e:	4002      	ands	r2, r0
 8002870:	6828      	ldr	r0, [r5, #0]
 8002872:	0200      	lsls	r0, r0, #8
 8002874:	4310      	orrs	r0, r2

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002876:	4a6f      	ldr	r2, [pc, #444]	; (8002a34 <LL_TIM_OC_Init+0x294>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002878:	9000      	str	r0, [sp, #0]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800287a:	401a      	ands	r2, r3
 800287c:	692b      	ldr	r3, [r5, #16]
 800287e:	031b      	lsls	r3, r3, #12
 8002880:	4313      	orrs	r3, r2

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002882:	686a      	ldr	r2, [r5, #4]
 8002884:	400b      	ands	r3, r1
 8002886:	0312      	lsls	r2, r2, #12
 8002888:	431a      	orrs	r2, r3
 800288a:	9201      	str	r2, [sp, #4]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288c:	42bc      	cmp	r4, r7
 800288e:	d008      	beq.n	80028a2 <LL_TIM_OC_Init+0x102>
 8002890:	4b69      	ldr	r3, [pc, #420]	; (8002a38 <LL_TIM_OC_Init+0x298>)
 8002892:	429c      	cmp	r4, r3
 8002894:	d005      	beq.n	80028a2 <LL_TIM_OC_Init+0x102>
 8002896:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <LL_TIM_OC_Init+0x29c>)
 8002898:	429c      	cmp	r4, r3
 800289a:	d002      	beq.n	80028a2 <LL_TIM_OC_Init+0x102>
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <LL_TIM_OC_Init+0x2a0>)
 800289e:	429c      	cmp	r4, r3
 80028a0:	d113      	bne.n	80028ca <LL_TIM_OC_Init+0x12a>
 80028a2:	4f68      	ldr	r7, [pc, #416]	; (8002a44 <LL_TIM_OC_Init+0x2a4>)
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 80028a4:	69eb      	ldr	r3, [r5, #28]
 80028a6:	423b      	tst	r3, r7
 80028a8:	d003      	beq.n	80028b2 <LL_TIM_OC_Init+0x112>
 80028aa:	4967      	ldr	r1, [pc, #412]	; (8002a48 <LL_TIM_OC_Init+0x2a8>)
 80028ac:	4859      	ldr	r0, [pc, #356]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 80028ae:	f001 fe53 	bl	8004558 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 80028b2:	69ab      	ldr	r3, [r5, #24]
 80028b4:	423b      	tst	r3, r7
 80028b6:	d003      	beq.n	80028c0 <LL_TIM_OC_Init+0x120>
 80028b8:	4964      	ldr	r1, [pc, #400]	; (8002a4c <LL_TIM_OC_Init+0x2ac>)
 80028ba:	4856      	ldr	r0, [pc, #344]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 80028bc:	f001 fe4c 	bl	8004558 <assert_failed>

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80028c0:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <LL_TIM_OC_Init+0x2b0>)
 80028c2:	401e      	ands	r6, r3
 80028c4:	69ab      	ldr	r3, [r5, #24]
 80028c6:	019b      	lsls	r3, r3, #6
 80028c8:	431e      	orrs	r6, r3

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80028ca:	9b00      	ldr	r3, [sp, #0]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028cc:	6066      	str	r6, [r4, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80028ce:	61e3      	str	r3, [r4, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80028d0:	68eb      	ldr	r3, [r5, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80028d2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028d4:	9b01      	ldr	r3, [sp, #4]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028d6:	6223      	str	r3, [r4, #32]
 80028d8:	e1ea      	b.n	8002cb0 <LL_TIM_OC_Init+0x510>
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80028da:	4e4b      	ldr	r6, [pc, #300]	; (8002a08 <LL_TIM_OC_Init+0x268>)
 80028dc:	42b0      	cmp	r0, r6
 80028de:	d012      	beq.n	8002906 <LL_TIM_OC_Init+0x166>
 80028e0:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <LL_TIM_OC_Init+0x26c>)
 80028e2:	4298      	cmp	r0, r3
 80028e4:	d00f      	beq.n	8002906 <LL_TIM_OC_Init+0x166>
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <LL_TIM_OC_Init+0x2b4>)
 80028e8:	4298      	cmp	r0, r3
 80028ea:	d00c      	beq.n	8002906 <LL_TIM_OC_Init+0x166>
 80028ec:	4b52      	ldr	r3, [pc, #328]	; (8002a38 <LL_TIM_OC_Init+0x298>)
 80028ee:	4298      	cmp	r0, r3
 80028f0:	d009      	beq.n	8002906 <LL_TIM_OC_Init+0x166>
 80028f2:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <LL_TIM_OC_Init+0x29c>)
 80028f4:	4298      	cmp	r0, r3
 80028f6:	d006      	beq.n	8002906 <LL_TIM_OC_Init+0x166>
 80028f8:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <LL_TIM_OC_Init+0x2a0>)
 80028fa:	4298      	cmp	r0, r3
 80028fc:	d003      	beq.n	8002906 <LL_TIM_OC_Init+0x166>
 80028fe:	4956      	ldr	r1, [pc, #344]	; (8002a58 <LL_TIM_OC_Init+0x2b8>)
 8002900:	4844      	ldr	r0, [pc, #272]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 8002902:	f001 fe29 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8002906:	682b      	ldr	r3, [r5, #0]
 8002908:	2210      	movs	r2, #16
 800290a:	0019      	movs	r1, r3
 800290c:	0018      	movs	r0, r3
 800290e:	4391      	bics	r1, r2
 8002910:	3220      	adds	r2, #32
 8002912:	4390      	bics	r0, r2
 8002914:	d00f      	beq.n	8002936 <LL_TIM_OC_Init+0x196>
 8002916:	2840      	cmp	r0, #64	; 0x40
 8002918:	d00d      	beq.n	8002936 <LL_TIM_OC_Init+0x196>
 800291a:	2250      	movs	r2, #80	; 0x50
 800291c:	4393      	bics	r3, r2
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	0252      	lsls	r2, r2, #9
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <LL_TIM_OC_Init+0x196>
 8002926:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <LL_TIM_OC_Init+0x278>)
 8002928:	4299      	cmp	r1, r3
 800292a:	d004      	beq.n	8002936 <LL_TIM_OC_Init+0x196>
 800292c:	21c6      	movs	r1, #198	; 0xc6
 800292e:	4839      	ldr	r0, [pc, #228]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 8002930:	0089      	lsls	r1, r1, #2
 8002932:	f001 fe11 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8002936:	686b      	ldr	r3, [r5, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d903      	bls.n	8002944 <LL_TIM_OC_Init+0x1a4>
 800293c:	4947      	ldr	r1, [pc, #284]	; (8002a5c <LL_TIM_OC_Init+0x2bc>)
 800293e:	4835      	ldr	r0, [pc, #212]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 8002940:	f001 fe0a 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8002944:	2302      	movs	r3, #2
 8002946:	692a      	ldr	r2, [r5, #16]
 8002948:	439a      	bics	r2, r3
 800294a:	d003      	beq.n	8002954 <LL_TIM_OC_Init+0x1b4>
 800294c:	4944      	ldr	r1, [pc, #272]	; (8002a60 <LL_TIM_OC_Init+0x2c0>)
 800294e:	4831      	ldr	r0, [pc, #196]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 8002950:	f001 fe02 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8002954:	68ab      	ldr	r3, [r5, #8]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d903      	bls.n	8002962 <LL_TIM_OC_Init+0x1c2>
 800295a:	4942      	ldr	r1, [pc, #264]	; (8002a64 <LL_TIM_OC_Init+0x2c4>)
 800295c:	482d      	ldr	r0, [pc, #180]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 800295e:	f001 fdfb 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8002962:	2302      	movs	r3, #2
 8002964:	696a      	ldr	r2, [r5, #20]
 8002966:	439a      	bics	r2, r3
 8002968:	d004      	beq.n	8002974 <LL_TIM_OC_Init+0x1d4>
 800296a:	21c7      	movs	r1, #199	; 0xc7
 800296c:	4829      	ldr	r0, [pc, #164]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 800296e:	0089      	lsls	r1, r1, #2
 8002970:	f001 fdf2 	bl	8004558 <assert_failed>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002974:	2101      	movs	r1, #1
 8002976:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002978:	483b      	ldr	r0, [pc, #236]	; (8002a68 <LL_TIM_OC_Init+0x2c8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800297a:	438b      	bics	r3, r1
 800297c:	6223      	str	r3, [r4, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800297e:	6a23      	ldr	r3, [r4, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002980:	6867      	ldr	r7, [r4, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002982:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002984:	4002      	ands	r2, r0
 8002986:	6828      	ldr	r0, [r5, #0]
 8002988:	4310      	orrs	r0, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800298a:	2202      	movs	r2, #2
 800298c:	4393      	bics	r3, r2
 800298e:	692a      	ldr	r2, [r5, #16]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002990:	9001      	str	r0, [sp, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002992:	4313      	orrs	r3, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002994:	686a      	ldr	r2, [r5, #4]
 8002996:	438b      	bics	r3, r1
 8002998:	431a      	orrs	r2, r3
 800299a:	9200      	str	r2, [sp, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299c:	42b4      	cmp	r4, r6
 800299e:	d008      	beq.n	80029b2 <LL_TIM_OC_Init+0x212>
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <LL_TIM_OC_Init+0x298>)
 80029a2:	429c      	cmp	r4, r3
 80029a4:	d005      	beq.n	80029b2 <LL_TIM_OC_Init+0x212>
 80029a6:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <LL_TIM_OC_Init+0x29c>)
 80029a8:	429c      	cmp	r4, r3
 80029aa:	d002      	beq.n	80029b2 <LL_TIM_OC_Init+0x212>
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <LL_TIM_OC_Init+0x2a0>)
 80029ae:	429c      	cmp	r4, r3
 80029b0:	d123      	bne.n	80029fa <LL_TIM_OC_Init+0x25a>
 80029b2:	4e24      	ldr	r6, [pc, #144]	; (8002a44 <LL_TIM_OC_Init+0x2a4>)
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 80029b4:	69eb      	ldr	r3, [r5, #28]
 80029b6:	4233      	tst	r3, r6
 80029b8:	d004      	beq.n	80029c4 <LL_TIM_OC_Init+0x224>
 80029ba:	21ce      	movs	r1, #206	; 0xce
 80029bc:	4815      	ldr	r0, [pc, #84]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 80029be:	0089      	lsls	r1, r1, #2
 80029c0:	f001 fdca 	bl	8004558 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 80029c4:	69ab      	ldr	r3, [r5, #24]
 80029c6:	4233      	tst	r3, r6
 80029c8:	d003      	beq.n	80029d2 <LL_TIM_OC_Init+0x232>
 80029ca:	4928      	ldr	r1, [pc, #160]	; (8002a6c <LL_TIM_OC_Init+0x2cc>)
 80029cc:	4811      	ldr	r0, [pc, #68]	; (8002a14 <LL_TIM_OC_Init+0x274>)
 80029ce:	f001 fdc3 	bl	8004558 <assert_failed>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80029d2:	2308      	movs	r3, #8
 80029d4:	9a00      	ldr	r2, [sp, #0]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80029d6:	403e      	ands	r6, r7
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80029d8:	439a      	bics	r2, r3
 80029da:	696b      	ldr	r3, [r5, #20]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80029dc:	4f24      	ldr	r7, [pc, #144]	; (8002a70 <LL_TIM_OC_Init+0x2d0>)
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4313      	orrs	r3, r2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80029e2:	2204      	movs	r2, #4
 80029e4:	4393      	bics	r3, r2
 80029e6:	68aa      	ldr	r2, [r5, #8]
 80029e8:	0092      	lsls	r2, r2, #2
 80029ea:	431a      	orrs	r2, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80029ec:	69ab      	ldr	r3, [r5, #24]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80029ee:	9200      	str	r2, [sp, #0]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80029f0:	431e      	orrs	r6, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80029f2:	69eb      	ldr	r3, [r5, #28]
 80029f4:	403e      	ands	r6, r7
 80029f6:	005f      	lsls	r7, r3, #1
 80029f8:	4337      	orrs	r7, r6
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80029fa:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029fc:	6067      	str	r7, [r4, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80029fe:	61a3      	str	r3, [r4, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002a00:	68eb      	ldr	r3, [r5, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002a02:	6363      	str	r3, [r4, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a04:	9b00      	ldr	r3, [sp, #0]
 8002a06:	e766      	b.n	80028d6 <LL_TIM_OC_Init+0x136>
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	00000404 	.word	0x00000404
 8002a14:	08005bce 	.word	0x08005bce
 8002a18:	00010060 	.word	0x00010060
 8002a1c:	00000405 	.word	0x00000405
 8002a20:	00000406 	.word	0x00000406
 8002a24:	00000407 	.word	0x00000407
 8002a28:	00000409 	.word	0x00000409
 8002a2c:	ffffefff 	.word	0xffffefff
 8002a30:	feff8cff 	.word	0xfeff8cff
 8002a34:	ffffdfff 	.word	0xffffdfff
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	40014400 	.word	0x40014400
 8002a40:	40014800 	.word	0x40014800
 8002a44:	fffffeff 	.word	0xfffffeff
 8002a48:	00000425 	.word	0x00000425
 8002a4c:	00000426 	.word	0x00000426
 8002a50:	ffffbfff 	.word	0xffffbfff
 8002a54:	40002000 	.word	0x40002000
 8002a58:	00000317 	.word	0x00000317
 8002a5c:	00000319 	.word	0x00000319
 8002a60:	0000031a 	.word	0x0000031a
 8002a64:	0000031b 	.word	0x0000031b
 8002a68:	fffeff8c 	.word	0xfffeff8c
 8002a6c:	00000339 	.word	0x00000339
 8002a70:	fffffdff 	.word	0xfffffdff
  assert_param(IS_TIM_CC2_INSTANCE(TIMx));
 8002a74:	4f8f      	ldr	r7, [pc, #572]	; (8002cb4 <LL_TIM_OC_Init+0x514>)
 8002a76:	42b8      	cmp	r0, r7
 8002a78:	d009      	beq.n	8002a8e <LL_TIM_OC_Init+0x2ee>
 8002a7a:	4b8f      	ldr	r3, [pc, #572]	; (8002cb8 <LL_TIM_OC_Init+0x518>)
 8002a7c:	4298      	cmp	r0, r3
 8002a7e:	d006      	beq.n	8002a8e <LL_TIM_OC_Init+0x2ee>
 8002a80:	4b8e      	ldr	r3, [pc, #568]	; (8002cbc <LL_TIM_OC_Init+0x51c>)
 8002a82:	4298      	cmp	r0, r3
 8002a84:	d003      	beq.n	8002a8e <LL_TIM_OC_Init+0x2ee>
 8002a86:	498e      	ldr	r1, [pc, #568]	; (8002cc0 <LL_TIM_OC_Init+0x520>)
 8002a88:	488e      	ldr	r0, [pc, #568]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002a8a:	f001 fd65 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8002a8e:	682b      	ldr	r3, [r5, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	0019      	movs	r1, r3
 8002a94:	0018      	movs	r0, r3
 8002a96:	4391      	bics	r1, r2
 8002a98:	3220      	adds	r2, #32
 8002a9a:	4390      	bics	r0, r2
 8002a9c:	d00e      	beq.n	8002abc <LL_TIM_OC_Init+0x31c>
 8002a9e:	2840      	cmp	r0, #64	; 0x40
 8002aa0:	d00c      	beq.n	8002abc <LL_TIM_OC_Init+0x31c>
 8002aa2:	2250      	movs	r2, #80	; 0x50
 8002aa4:	4393      	bics	r3, r2
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	0252      	lsls	r2, r2, #9
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d006      	beq.n	8002abc <LL_TIM_OC_Init+0x31c>
 8002aae:	4b86      	ldr	r3, [pc, #536]	; (8002cc8 <LL_TIM_OC_Init+0x528>)
 8002ab0:	4299      	cmp	r1, r3
 8002ab2:	d003      	beq.n	8002abc <LL_TIM_OC_Init+0x31c>
 8002ab4:	4985      	ldr	r1, [pc, #532]	; (8002ccc <LL_TIM_OC_Init+0x52c>)
 8002ab6:	4883      	ldr	r0, [pc, #524]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002ab8:	f001 fd4e 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8002abc:	686b      	ldr	r3, [r5, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d904      	bls.n	8002acc <LL_TIM_OC_Init+0x32c>
 8002ac2:	21da      	movs	r1, #218	; 0xda
 8002ac4:	487f      	ldr	r0, [pc, #508]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002ac6:	0089      	lsls	r1, r1, #2
 8002ac8:	f001 fd46 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8002acc:	2302      	movs	r3, #2
 8002ace:	692a      	ldr	r2, [r5, #16]
 8002ad0:	439a      	bics	r2, r3
 8002ad2:	d003      	beq.n	8002adc <LL_TIM_OC_Init+0x33c>
 8002ad4:	497e      	ldr	r1, [pc, #504]	; (8002cd0 <LL_TIM_OC_Init+0x530>)
 8002ad6:	487b      	ldr	r0, [pc, #492]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002ad8:	f001 fd3e 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8002adc:	68ab      	ldr	r3, [r5, #8]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d903      	bls.n	8002aea <LL_TIM_OC_Init+0x34a>
 8002ae2:	497c      	ldr	r1, [pc, #496]	; (8002cd4 <LL_TIM_OC_Init+0x534>)
 8002ae4:	4877      	ldr	r0, [pc, #476]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002ae6:	f001 fd37 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8002aea:	2302      	movs	r3, #2
 8002aec:	696a      	ldr	r2, [r5, #20]
 8002aee:	439a      	bics	r2, r3
 8002af0:	d003      	beq.n	8002afa <LL_TIM_OC_Init+0x35a>
 8002af2:	4979      	ldr	r1, [pc, #484]	; (8002cd8 <LL_TIM_OC_Init+0x538>)
 8002af4:	4873      	ldr	r0, [pc, #460]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002af6:	f001 fd2f 	bl	8004558 <assert_failed>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002afa:	2110      	movs	r1, #16
 8002afc:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002afe:	4877      	ldr	r0, [pc, #476]	; (8002cdc <LL_TIM_OC_Init+0x53c>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002b00:	438b      	bics	r3, r1
 8002b02:	6223      	str	r3, [r4, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b04:	6a23      	ldr	r3, [r4, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b06:	6866      	ldr	r6, [r4, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b08:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002b0a:	4002      	ands	r2, r0
 8002b0c:	6828      	ldr	r0, [r5, #0]
 8002b0e:	0200      	lsls	r0, r0, #8
 8002b10:	4310      	orrs	r0, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002b12:	2220      	movs	r2, #32
 8002b14:	4393      	bics	r3, r2
 8002b16:	001a      	movs	r2, r3
 8002b18:	692b      	ldr	r3, [r5, #16]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002b1a:	9001      	str	r0, [sp, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002b20:	686a      	ldr	r2, [r5, #4]
 8002b22:	438b      	bics	r3, r1
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	431a      	orrs	r2, r3
 8002b28:	9200      	str	r2, [sp, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2a:	42bc      	cmp	r4, r7
 8002b2c:	d008      	beq.n	8002b40 <LL_TIM_OC_Init+0x3a0>
 8002b2e:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <LL_TIM_OC_Init+0x51c>)
 8002b30:	429c      	cmp	r4, r3
 8002b32:	d005      	beq.n	8002b40 <LL_TIM_OC_Init+0x3a0>
 8002b34:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <LL_TIM_OC_Init+0x540>)
 8002b36:	429c      	cmp	r4, r3
 8002b38:	d002      	beq.n	8002b40 <LL_TIM_OC_Init+0x3a0>
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <LL_TIM_OC_Init+0x544>)
 8002b3c:	429c      	cmp	r4, r3
 8002b3e:	d125      	bne.n	8002b8c <LL_TIM_OC_Init+0x3ec>
 8002b40:	4f69      	ldr	r7, [pc, #420]	; (8002ce8 <LL_TIM_OC_Init+0x548>)
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8002b42:	69eb      	ldr	r3, [r5, #28]
 8002b44:	423b      	tst	r3, r7
 8002b46:	d003      	beq.n	8002b50 <LL_TIM_OC_Init+0x3b0>
 8002b48:	4968      	ldr	r1, [pc, #416]	; (8002cec <LL_TIM_OC_Init+0x54c>)
 8002b4a:	485e      	ldr	r0, [pc, #376]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002b4c:	f001 fd04 	bl	8004558 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8002b50:	69ab      	ldr	r3, [r5, #24]
 8002b52:	423b      	tst	r3, r7
 8002b54:	d004      	beq.n	8002b60 <LL_TIM_OC_Init+0x3c0>
 8002b56:	21e2      	movs	r1, #226	; 0xe2
 8002b58:	485a      	ldr	r0, [pc, #360]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002b5a:	0089      	lsls	r1, r1, #2
 8002b5c:	f001 fcfc 	bl	8004558 <assert_failed>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	9a00      	ldr	r2, [sp, #0]
 8002b64:	439a      	bics	r2, r3
 8002b66:	696b      	ldr	r3, [r5, #20]
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	4313      	orrs	r3, r2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002b6c:	2240      	movs	r2, #64	; 0x40
 8002b6e:	4393      	bics	r3, r2
 8002b70:	68aa      	ldr	r2, [r5, #8]
 8002b72:	0192      	lsls	r2, r2, #6
 8002b74:	431a      	orrs	r2, r3
 8002b76:	9200      	str	r2, [sp, #0]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002b78:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <LL_TIM_OC_Init+0x550>)
 8002b7a:	69aa      	ldr	r2, [r5, #24]
 8002b7c:	4033      	ands	r3, r6
 8002b7e:	0096      	lsls	r6, r2, #2
 8002b80:	431e      	orrs	r6, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002b82:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <LL_TIM_OC_Init+0x554>)
 8002b84:	401e      	ands	r6, r3
 8002b86:	69eb      	ldr	r3, [r5, #28]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	431e      	orrs	r6, r3
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b8c:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b8e:	6066      	str	r6, [r4, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b90:	61a3      	str	r3, [r4, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002b92:	68eb      	ldr	r3, [r5, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b94:	63a3      	str	r3, [r4, #56]	; 0x38
 8002b96:	e735      	b.n	8002a04 <LL_TIM_OC_Init+0x264>
  assert_param(IS_TIM_CC3_INSTANCE(TIMx));
 8002b98:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <LL_TIM_OC_Init+0x514>)
 8002b9a:	4298      	cmp	r0, r3
 8002b9c:	d006      	beq.n	8002bac <LL_TIM_OC_Init+0x40c>
 8002b9e:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <LL_TIM_OC_Init+0x518>)
 8002ba0:	4298      	cmp	r0, r3
 8002ba2:	d003      	beq.n	8002bac <LL_TIM_OC_Init+0x40c>
 8002ba4:	4954      	ldr	r1, [pc, #336]	; (8002cf8 <LL_TIM_OC_Init+0x558>)
 8002ba6:	4847      	ldr	r0, [pc, #284]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002ba8:	f001 fcd6 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	2210      	movs	r2, #16
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	4391      	bics	r1, r2
 8002bb6:	3220      	adds	r2, #32
 8002bb8:	4390      	bics	r0, r2
 8002bba:	d00e      	beq.n	8002bda <LL_TIM_OC_Init+0x43a>
 8002bbc:	2840      	cmp	r0, #64	; 0x40
 8002bbe:	d00c      	beq.n	8002bda <LL_TIM_OC_Init+0x43a>
 8002bc0:	2250      	movs	r2, #80	; 0x50
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	0252      	lsls	r2, r2, #9
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d006      	beq.n	8002bda <LL_TIM_OC_Init+0x43a>
 8002bcc:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <LL_TIM_OC_Init+0x528>)
 8002bce:	4299      	cmp	r1, r3
 8002bd0:	d003      	beq.n	8002bda <LL_TIM_OC_Init+0x43a>
 8002bd2:	494a      	ldr	r1, [pc, #296]	; (8002cfc <LL_TIM_OC_Init+0x55c>)
 8002bd4:	483b      	ldr	r0, [pc, #236]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002bd6:	f001 fcbf 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8002bda:	686b      	ldr	r3, [r5, #4]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d903      	bls.n	8002be8 <LL_TIM_OC_Init+0x448>
 8002be0:	4947      	ldr	r1, [pc, #284]	; (8002d00 <LL_TIM_OC_Init+0x560>)
 8002be2:	4838      	ldr	r0, [pc, #224]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002be4:	f001 fcb8 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8002be8:	2302      	movs	r3, #2
 8002bea:	692a      	ldr	r2, [r5, #16]
 8002bec:	439a      	bics	r2, r3
 8002bee:	d004      	beq.n	8002bfa <LL_TIM_OC_Init+0x45a>
 8002bf0:	21ee      	movs	r1, #238	; 0xee
 8002bf2:	4834      	ldr	r0, [pc, #208]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002bf4:	0089      	lsls	r1, r1, #2
 8002bf6:	f001 fcaf 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8002bfa:	68ab      	ldr	r3, [r5, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d903      	bls.n	8002c08 <LL_TIM_OC_Init+0x468>
 8002c00:	4940      	ldr	r1, [pc, #256]	; (8002d04 <LL_TIM_OC_Init+0x564>)
 8002c02:	4830      	ldr	r0, [pc, #192]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002c04:	f001 fca8 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8002c08:	2302      	movs	r3, #2
 8002c0a:	696a      	ldr	r2, [r5, #20]
 8002c0c:	439a      	bics	r2, r3
 8002c0e:	d003      	beq.n	8002c18 <LL_TIM_OC_Init+0x478>
 8002c10:	493d      	ldr	r1, [pc, #244]	; (8002d08 <LL_TIM_OC_Init+0x568>)
 8002c12:	482c      	ldr	r0, [pc, #176]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002c14:	f001 fca0 	bl	8004558 <assert_failed>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c18:	6a22      	ldr	r2, [r4, #32]
 8002c1a:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <LL_TIM_OC_Init+0x548>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c1c:	493b      	ldr	r1, [pc, #236]	; (8002d0c <LL_TIM_OC_Init+0x56c>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c1e:	401a      	ands	r2, r3
 8002c20:	6222      	str	r2, [r4, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c22:	6a26      	ldr	r6, [r4, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c24:	6867      	ldr	r7, [r4, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c26:	69e2      	ldr	r2, [r4, #28]
 8002c28:	9300      	str	r3, [sp, #0]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	6829      	ldr	r1, [r5, #0]
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	9101      	str	r1, [sp, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c32:	4a37      	ldr	r2, [pc, #220]	; (8002d10 <LL_TIM_OC_Init+0x570>)
 8002c34:	6929      	ldr	r1, [r5, #16]
 8002c36:	4032      	ands	r2, r6
 8002c38:	020e      	lsls	r6, r1, #8
 8002c3a:	4316      	orrs	r6, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c3c:	686a      	ldr	r2, [r5, #4]
 8002c3e:	401e      	ands	r6, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <LL_TIM_OC_Init+0x514>)
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c42:	0212      	lsls	r2, r2, #8
 8002c44:	4316      	orrs	r6, r2
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	429c      	cmp	r4, r3
 8002c48:	d008      	beq.n	8002c5c <LL_TIM_OC_Init+0x4bc>
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <LL_TIM_OC_Init+0x51c>)
 8002c4c:	429c      	cmp	r4, r3
 8002c4e:	d005      	beq.n	8002c5c <LL_TIM_OC_Init+0x4bc>
 8002c50:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <LL_TIM_OC_Init+0x540>)
 8002c52:	429c      	cmp	r4, r3
 8002c54:	d002      	beq.n	8002c5c <LL_TIM_OC_Init+0x4bc>
 8002c56:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <LL_TIM_OC_Init+0x544>)
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	d123      	bne.n	8002ca4 <LL_TIM_OC_Init+0x504>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8002c5c:	69eb      	ldr	r3, [r5, #28]
 8002c5e:	9a00      	ldr	r2, [sp, #0]
 8002c60:	4213      	tst	r3, r2
 8002c62:	d003      	beq.n	8002c6c <LL_TIM_OC_Init+0x4cc>
 8002c64:	492b      	ldr	r1, [pc, #172]	; (8002d14 <LL_TIM_OC_Init+0x574>)
 8002c66:	4817      	ldr	r0, [pc, #92]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002c68:	f001 fc76 	bl	8004558 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8002c6c:	69ab      	ldr	r3, [r5, #24]
 8002c6e:	9a00      	ldr	r2, [sp, #0]
 8002c70:	4213      	tst	r3, r2
 8002c72:	d003      	beq.n	8002c7c <LL_TIM_OC_Init+0x4dc>
 8002c74:	4928      	ldr	r1, [pc, #160]	; (8002d18 <LL_TIM_OC_Init+0x578>)
 8002c76:	4813      	ldr	r0, [pc, #76]	; (8002cc4 <LL_TIM_OC_Init+0x524>)
 8002c78:	f001 fc6e 	bl	8004558 <assert_failed>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002c7c:	696a      	ldr	r2, [r5, #20]
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <LL_TIM_OC_Init+0x554>)
 8002c80:	4033      	ands	r3, r6
 8002c82:	0296      	lsls	r6, r2, #10
 8002c84:	431e      	orrs	r6, r3
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <LL_TIM_OC_Init+0x550>)
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002c88:	69aa      	ldr	r2, [r5, #24]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002c8a:	401e      	ands	r6, r3
 8002c8c:	68ab      	ldr	r3, [r5, #8]
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	431e      	orrs	r6, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <LL_TIM_OC_Init+0x57c>)
 8002c94:	403b      	ands	r3, r7
 8002c96:	0117      	lsls	r7, r2, #4
 8002c98:	431f      	orrs	r7, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002c9a:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <LL_TIM_OC_Init+0x580>)
 8002c9c:	401f      	ands	r7, r3
 8002c9e:	69eb      	ldr	r3, [r5, #28]
 8002ca0:	015b      	lsls	r3, r3, #5
 8002ca2:	431f      	orrs	r7, r3
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ca4:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ca6:	6067      	str	r7, [r4, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ca8:	61e3      	str	r3, [r4, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002caa:	68eb      	ldr	r3, [r5, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002cac:	63e3      	str	r3, [r4, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cae:	6226      	str	r6, [r4, #32]
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002cb0:	2000      	movs	r0, #0
}
 8002cb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40014000 	.word	0x40014000
 8002cc0:	00000366 	.word	0x00000366
 8002cc4:	08005bce 	.word	0x08005bce
 8002cc8:	00010060 	.word	0x00010060
 8002ccc:	00000367 	.word	0x00000367
 8002cd0:	00000369 	.word	0x00000369
 8002cd4:	0000036a 	.word	0x0000036a
 8002cd8:	0000036b 	.word	0x0000036b
 8002cdc:	feff8cff 	.word	0xfeff8cff
 8002ce0:	40014400 	.word	0x40014400
 8002ce4:	40014800 	.word	0x40014800
 8002ce8:	fffffeff 	.word	0xfffffeff
 8002cec:	00000387 	.word	0x00000387
 8002cf0:	fffffbff 	.word	0xfffffbff
 8002cf4:	fffff7ff 	.word	0xfffff7ff
 8002cf8:	000003b5 	.word	0x000003b5
 8002cfc:	000003b6 	.word	0x000003b6
 8002d00:	000003b7 	.word	0x000003b7
 8002d04:	000003b9 	.word	0x000003b9
 8002d08:	000003ba 	.word	0x000003ba
 8002d0c:	fffeff8c 	.word	0xfffeff8c
 8002d10:	fffffdff 	.word	0xfffffdff
 8002d14:	000003d6 	.word	0x000003d6
 8002d18:	000003d7 	.word	0x000003d7
 8002d1c:	ffffefff 	.word	0xffffefff
 8002d20:	ffffdfff 	.word	0xffffdfff
  assert_param(IS_TIM_CC5_INSTANCE(TIMx));
 8002d24:	4f76      	ldr	r7, [pc, #472]	; (8002f00 <LL_TIM_OC_Init+0x760>)
 8002d26:	42b8      	cmp	r0, r7
 8002d28:	d003      	beq.n	8002d32 <LL_TIM_OC_Init+0x592>
 8002d2a:	4976      	ldr	r1, [pc, #472]	; (8002f04 <LL_TIM_OC_Init+0x764>)
 8002d2c:	4876      	ldr	r0, [pc, #472]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002d2e:	f001 fc13 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8002d32:	682b      	ldr	r3, [r5, #0]
 8002d34:	2210      	movs	r2, #16
 8002d36:	0019      	movs	r1, r3
 8002d38:	0018      	movs	r0, r3
 8002d3a:	4391      	bics	r1, r2
 8002d3c:	3220      	adds	r2, #32
 8002d3e:	4390      	bics	r0, r2
 8002d40:	d00e      	beq.n	8002d60 <LL_TIM_OC_Init+0x5c0>
 8002d42:	2840      	cmp	r0, #64	; 0x40
 8002d44:	d00c      	beq.n	8002d60 <LL_TIM_OC_Init+0x5c0>
 8002d46:	2250      	movs	r2, #80	; 0x50
 8002d48:	4393      	bics	r3, r2
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	0252      	lsls	r2, r2, #9
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d006      	beq.n	8002d60 <LL_TIM_OC_Init+0x5c0>
 8002d52:	4b6e      	ldr	r3, [pc, #440]	; (8002f0c <LL_TIM_OC_Init+0x76c>)
 8002d54:	4299      	cmp	r1, r3
 8002d56:	d003      	beq.n	8002d60 <LL_TIM_OC_Init+0x5c0>
 8002d58:	496d      	ldr	r1, [pc, #436]	; (8002f10 <LL_TIM_OC_Init+0x770>)
 8002d5a:	486b      	ldr	r0, [pc, #428]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002d5c:	f001 fbfc 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8002d60:	686b      	ldr	r3, [r5, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d903      	bls.n	8002d6e <LL_TIM_OC_Init+0x5ce>
 8002d66:	496b      	ldr	r1, [pc, #428]	; (8002f14 <LL_TIM_OC_Init+0x774>)
 8002d68:	4867      	ldr	r0, [pc, #412]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002d6a:	f001 fbf5 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8002d6e:	2302      	movs	r3, #2
 8002d70:	692a      	ldr	r2, [r5, #16]
 8002d72:	439a      	bics	r2, r3
 8002d74:	d003      	beq.n	8002d7e <LL_TIM_OC_Init+0x5de>
 8002d76:	4968      	ldr	r1, [pc, #416]	; (8002f18 <LL_TIM_OC_Init+0x778>)
 8002d78:	4863      	ldr	r0, [pc, #396]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002d7a:	f001 fbed 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8002d7e:	2302      	movs	r3, #2
 8002d80:	696a      	ldr	r2, [r5, #20]
 8002d82:	439a      	bics	r2, r3
 8002d84:	d003      	beq.n	8002d8e <LL_TIM_OC_Init+0x5ee>
 8002d86:	4965      	ldr	r1, [pc, #404]	; (8002f1c <LL_TIM_OC_Init+0x77c>)
 8002d88:	485f      	ldr	r0, [pc, #380]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002d8a:	f001 fbe5 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8002d8e:	68ab      	ldr	r3, [r5, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d903      	bls.n	8002d9c <LL_TIM_OC_Init+0x5fc>
 8002d94:	4962      	ldr	r1, [pc, #392]	; (8002f20 <LL_TIM_OC_Init+0x780>)
 8002d96:	485c      	ldr	r0, [pc, #368]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002d98:	f001 fbde 	bl	8004558 <assert_failed>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002d9c:	6a23      	ldr	r3, [r4, #32]
 8002d9e:	4e61      	ldr	r6, [pc, #388]	; (8002f24 <LL_TIM_OC_Init+0x784>)
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002da0:	4961      	ldr	r1, [pc, #388]	; (8002f28 <LL_TIM_OC_Init+0x788>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002da2:	4033      	ands	r3, r6
 8002da4:	6223      	str	r3, [r4, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002da6:	6a23      	ldr	r3, [r4, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002da8:	6d62      	ldr	r2, [r4, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002daa:	400a      	ands	r2, r1
 8002dac:	6829      	ldr	r1, [r5, #0]
 8002dae:	4311      	orrs	r1, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002db0:	4a5e      	ldr	r2, [pc, #376]	; (8002f2c <LL_TIM_OC_Init+0x78c>)
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002db2:	9100      	str	r1, [sp, #0]
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002db4:	401a      	ands	r2, r3
 8002db6:	692b      	ldr	r3, [r5, #16]
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	4313      	orrs	r3, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002dbc:	686a      	ldr	r2, [r5, #4]
 8002dbe:	4033      	ands	r3, r6
 8002dc0:	0412      	lsls	r2, r2, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	9201      	str	r2, [sp, #4]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc6:	42bc      	cmp	r4, r7
 8002dc8:	d008      	beq.n	8002ddc <LL_TIM_OC_Init+0x63c>
 8002dca:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <LL_TIM_OC_Init+0x790>)
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	d005      	beq.n	8002ddc <LL_TIM_OC_Init+0x63c>
 8002dd0:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <LL_TIM_OC_Init+0x794>)
 8002dd2:	429c      	cmp	r4, r3
 8002dd4:	d002      	beq.n	8002ddc <LL_TIM_OC_Init+0x63c>
 8002dd6:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <LL_TIM_OC_Init+0x798>)
 8002dd8:	429c      	cmp	r4, r3
 8002dda:	d114      	bne.n	8002e06 <LL_TIM_OC_Init+0x666>
 8002ddc:	4f57      	ldr	r7, [pc, #348]	; (8002f3c <LL_TIM_OC_Init+0x79c>)
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8002dde:	69eb      	ldr	r3, [r5, #28]
 8002de0:	423b      	tst	r3, r7
 8002de2:	d003      	beq.n	8002dec <LL_TIM_OC_Init+0x64c>
 8002de4:	4956      	ldr	r1, [pc, #344]	; (8002f40 <LL_TIM_OC_Init+0x7a0>)
 8002de6:	4848      	ldr	r0, [pc, #288]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002de8:	f001 fbb6 	bl	8004558 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8002dec:	69ab      	ldr	r3, [r5, #24]
 8002dee:	423b      	tst	r3, r7
 8002df0:	d003      	beq.n	8002dfa <LL_TIM_OC_Init+0x65a>
 8002df2:	4954      	ldr	r1, [pc, #336]	; (8002f44 <LL_TIM_OC_Init+0x7a4>)
 8002df4:	4844      	ldr	r0, [pc, #272]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002df6:	f001 fbaf 	bl	8004558 <assert_failed>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002dfa:	6862      	ldr	r2, [r4, #4]
 8002dfc:	69ab      	ldr	r3, [r5, #24]
 8002dfe:	4016      	ands	r6, r2
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	431e      	orrs	r6, r3
 8002e04:	6066      	str	r6, [r4, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002e06:	9b00      	ldr	r3, [sp, #0]
 8002e08:	6563      	str	r3, [r4, #84]	; 0x54
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002e0a:	68eb      	ldr	r3, [r5, #12]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8002e0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e0e:	e561      	b.n	80028d4 <LL_TIM_OC_Init+0x134>
  assert_param(IS_TIM_CC6_INSTANCE(TIMx));
 8002e10:	4f3b      	ldr	r7, [pc, #236]	; (8002f00 <LL_TIM_OC_Init+0x760>)
 8002e12:	42b8      	cmp	r0, r7
 8002e14:	d003      	beq.n	8002e1e <LL_TIM_OC_Init+0x67e>
 8002e16:	494c      	ldr	r1, [pc, #304]	; (8002f48 <LL_TIM_OC_Init+0x7a8>)
 8002e18:	483b      	ldr	r0, [pc, #236]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002e1a:	f001 fb9d 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8002e1e:	682b      	ldr	r3, [r5, #0]
 8002e20:	2210      	movs	r2, #16
 8002e22:	0019      	movs	r1, r3
 8002e24:	0018      	movs	r0, r3
 8002e26:	4391      	bics	r1, r2
 8002e28:	3220      	adds	r2, #32
 8002e2a:	4390      	bics	r0, r2
 8002e2c:	d00e      	beq.n	8002e4c <LL_TIM_OC_Init+0x6ac>
 8002e2e:	2840      	cmp	r0, #64	; 0x40
 8002e30:	d00c      	beq.n	8002e4c <LL_TIM_OC_Init+0x6ac>
 8002e32:	2250      	movs	r2, #80	; 0x50
 8002e34:	4393      	bics	r3, r2
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	0252      	lsls	r2, r2, #9
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d006      	beq.n	8002e4c <LL_TIM_OC_Init+0x6ac>
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <LL_TIM_OC_Init+0x76c>)
 8002e40:	4299      	cmp	r1, r3
 8002e42:	d003      	beq.n	8002e4c <LL_TIM_OC_Init+0x6ac>
 8002e44:	4941      	ldr	r1, [pc, #260]	; (8002f4c <LL_TIM_OC_Init+0x7ac>)
 8002e46:	4830      	ldr	r0, [pc, #192]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002e48:	f001 fb86 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8002e4c:	686b      	ldr	r3, [r5, #4]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d904      	bls.n	8002e5c <LL_TIM_OC_Init+0x6bc>
 8002e52:	2191      	movs	r1, #145	; 0x91
 8002e54:	482c      	ldr	r0, [pc, #176]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002e56:	00c9      	lsls	r1, r1, #3
 8002e58:	f001 fb7e 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	692a      	ldr	r2, [r5, #16]
 8002e60:	439a      	bics	r2, r3
 8002e62:	d003      	beq.n	8002e6c <LL_TIM_OC_Init+0x6cc>
 8002e64:	493a      	ldr	r1, [pc, #232]	; (8002f50 <LL_TIM_OC_Init+0x7b0>)
 8002e66:	4828      	ldr	r0, [pc, #160]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002e68:	f001 fb76 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	696a      	ldr	r2, [r5, #20]
 8002e70:	439a      	bics	r2, r3
 8002e72:	d003      	beq.n	8002e7c <LL_TIM_OC_Init+0x6dc>
 8002e74:	4937      	ldr	r1, [pc, #220]	; (8002f54 <LL_TIM_OC_Init+0x7b4>)
 8002e76:	4824      	ldr	r0, [pc, #144]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002e78:	f001 fb6e 	bl	8004558 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8002e7c:	68ab      	ldr	r3, [r5, #8]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d903      	bls.n	8002e8a <LL_TIM_OC_Init+0x6ea>
 8002e82:	4935      	ldr	r1, [pc, #212]	; (8002f58 <LL_TIM_OC_Init+0x7b8>)
 8002e84:	4820      	ldr	r0, [pc, #128]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002e86:	f001 fb67 	bl	8004558 <assert_failed>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002e8a:	6a23      	ldr	r3, [r4, #32]
 8002e8c:	4933      	ldr	r1, [pc, #204]	; (8002f5c <LL_TIM_OC_Init+0x7bc>)
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002e8e:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <LL_TIM_OC_Init+0x7c0>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002e90:	400b      	ands	r3, r1
 8002e92:	6223      	str	r3, [r4, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e94:	6a23      	ldr	r3, [r4, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002e96:	6d66      	ldr	r6, [r4, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002e98:	4016      	ands	r6, r2
 8002e9a:	682a      	ldr	r2, [r5, #0]
 8002e9c:	0212      	lsls	r2, r2, #8
 8002e9e:	4316      	orrs	r6, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002ea0:	4a30      	ldr	r2, [pc, #192]	; (8002f64 <LL_TIM_OC_Init+0x7c4>)
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	692b      	ldr	r3, [r5, #16]
 8002ea6:	051b      	lsls	r3, r3, #20
 8002ea8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002eaa:	686a      	ldr	r2, [r5, #4]
 8002eac:	400b      	ands	r3, r1
 8002eae:	0512      	lsls	r2, r2, #20
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	9200      	str	r2, [sp, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb4:	42bc      	cmp	r4, r7
 8002eb6:	d008      	beq.n	8002eca <LL_TIM_OC_Init+0x72a>
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <LL_TIM_OC_Init+0x790>)
 8002eba:	429c      	cmp	r4, r3
 8002ebc:	d005      	beq.n	8002eca <LL_TIM_OC_Init+0x72a>
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <LL_TIM_OC_Init+0x794>)
 8002ec0:	429c      	cmp	r4, r3
 8002ec2:	d002      	beq.n	8002eca <LL_TIM_OC_Init+0x72a>
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <LL_TIM_OC_Init+0x798>)
 8002ec6:	429c      	cmp	r4, r3
 8002ec8:	d115      	bne.n	8002ef6 <LL_TIM_OC_Init+0x756>
 8002eca:	4f1c      	ldr	r7, [pc, #112]	; (8002f3c <LL_TIM_OC_Init+0x79c>)
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8002ecc:	69eb      	ldr	r3, [r5, #28]
 8002ece:	423b      	tst	r3, r7
 8002ed0:	d003      	beq.n	8002eda <LL_TIM_OC_Init+0x73a>
 8002ed2:	4925      	ldr	r1, [pc, #148]	; (8002f68 <LL_TIM_OC_Init+0x7c8>)
 8002ed4:	480c      	ldr	r0, [pc, #48]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002ed6:	f001 fb3f 	bl	8004558 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8002eda:	69ab      	ldr	r3, [r5, #24]
 8002edc:	423b      	tst	r3, r7
 8002ede:	d003      	beq.n	8002ee8 <LL_TIM_OC_Init+0x748>
 8002ee0:	4922      	ldr	r1, [pc, #136]	; (8002f6c <LL_TIM_OC_Init+0x7cc>)
 8002ee2:	4809      	ldr	r0, [pc, #36]	; (8002f08 <LL_TIM_OC_Init+0x768>)
 8002ee4:	f001 fb38 	bl	8004558 <assert_failed>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002ee8:	6862      	ldr	r2, [r4, #4]
 8002eea:	69ab      	ldr	r3, [r5, #24]
 8002eec:	4920      	ldr	r1, [pc, #128]	; (8002f70 <LL_TIM_OC_Init+0x7d0>)
 8002eee:	029b      	lsls	r3, r3, #10
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	6063      	str	r3, [r4, #4]
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002ef6:	68eb      	ldr	r3, [r5, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002ef8:	6566      	str	r6, [r4, #84]	; 0x54
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002efa:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002efc:	e582      	b.n	8002a04 <LL_TIM_OC_Init+0x264>
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	40012c00 	.word	0x40012c00
 8002f04:	00000449 	.word	0x00000449
 8002f08:	08005bce 	.word	0x08005bce
 8002f0c:	00010060 	.word	0x00010060
 8002f10:	0000044a 	.word	0x0000044a
 8002f14:	0000044b 	.word	0x0000044b
 8002f18:	0000044c 	.word	0x0000044c
 8002f1c:	0000044d 	.word	0x0000044d
 8002f20:	0000044e 	.word	0x0000044e
 8002f24:	fffeffff 	.word	0xfffeffff
 8002f28:	fffeff8f 	.word	0xfffeff8f
 8002f2c:	fffdffff 	.word	0xfffdffff
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40014400 	.word	0x40014400
 8002f38:	40014800 	.word	0x40014800
 8002f3c:	fffffeff 	.word	0xfffffeff
 8002f40:	00000464 	.word	0x00000464
 8002f44:	00000465 	.word	0x00000465
 8002f48:	00000486 	.word	0x00000486
 8002f4c:	00000487 	.word	0x00000487
 8002f50:	00000489 	.word	0x00000489
 8002f54:	0000048a 	.word	0x0000048a
 8002f58:	0000048b 	.word	0x0000048b
 8002f5c:	ffefffff 	.word	0xffefffff
 8002f60:	feff8fff 	.word	0xfeff8fff
 8002f64:	ffdfffff 	.word	0xffdfffff
 8002f68:	000004a1 	.word	0x000004a1
 8002f6c:	000004a2 	.word	0x000004a2
 8002f70:	fffbffff 	.word	0xfffbffff

08002f74 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002f74:	b5f0      	push	{r4, r5, r6, r7, lr}
#if !defined(RCC_CCIPR_USART3SEL)&&!defined(RCC_CCIPR_USART4SEL)||!defined(RCC_CCIPR_USART2SEL)
  LL_RCC_ClocksTypeDef RCC_Clocks;
#endif

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8002f76:	4b68      	ldr	r3, [pc, #416]	; (8003118 <LL_USART_Init+0x1a4>)
{
 8002f78:	b085      	sub	sp, #20
 8002f7a:	0004      	movs	r4, r0
 8002f7c:	000d      	movs	r5, r1
  assert_param(IS_UART_INSTANCE(USARTx));
 8002f7e:	4298      	cmp	r0, r3
 8002f80:	d00c      	beq.n	8002f9c <LL_USART_Init+0x28>
 8002f82:	4b66      	ldr	r3, [pc, #408]	; (800311c <LL_USART_Init+0x1a8>)
 8002f84:	4298      	cmp	r0, r3
 8002f86:	d009      	beq.n	8002f9c <LL_USART_Init+0x28>
 8002f88:	4b65      	ldr	r3, [pc, #404]	; (8003120 <LL_USART_Init+0x1ac>)
 8002f8a:	4298      	cmp	r0, r3
 8002f8c:	d006      	beq.n	8002f9c <LL_USART_Init+0x28>
 8002f8e:	4b65      	ldr	r3, [pc, #404]	; (8003124 <LL_USART_Init+0x1b0>)
 8002f90:	4298      	cmp	r0, r3
 8002f92:	d003      	beq.n	8002f9c <LL_USART_Init+0x28>
 8002f94:	21d5      	movs	r1, #213	; 0xd5
 8002f96:	4864      	ldr	r0, [pc, #400]	; (8003128 <LL_USART_Init+0x1b4>)
 8002f98:	f001 fade 	bl	8004558 <assert_failed>
  assert_param(IS_LL_USART_PRESCALER(USART_InitStruct->PrescalerValue));
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	2b0b      	cmp	r3, #11
 8002fa0:	d903      	bls.n	8002faa <LL_USART_Init+0x36>
 8002fa2:	21d6      	movs	r1, #214	; 0xd6
 8002fa4:	4860      	ldr	r0, [pc, #384]	; (8003128 <LL_USART_Init+0x1b4>)
 8002fa6:	f001 fad7 	bl	8004558 <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8002faa:	4b60      	ldr	r3, [pc, #384]	; (800312c <LL_USART_Init+0x1b8>)
 8002fac:	686a      	ldr	r2, [r5, #4]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d903      	bls.n	8002fba <LL_USART_Init+0x46>
 8002fb2:	21d7      	movs	r1, #215	; 0xd7
 8002fb4:	485c      	ldr	r0, [pc, #368]	; (8003128 <LL_USART_Init+0x1b4>)
 8002fb6:	f001 facf 	bl	8004558 <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	68ab      	ldr	r3, [r5, #8]
 8002fbe:	0552      	lsls	r2, r2, #21
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d006      	beq.n	8002fd2 <LL_USART_Init+0x5e>
 8002fc4:	4a5a      	ldr	r2, [pc, #360]	; (8003130 <LL_USART_Init+0x1bc>)
 8002fc6:	4213      	tst	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <LL_USART_Init+0x5e>
 8002fca:	21d8      	movs	r1, #216	; 0xd8
 8002fcc:	4856      	ldr	r0, [pc, #344]	; (8003128 <LL_USART_Init+0x1b4>)
 8002fce:	f001 fac3 	bl	8004558 <assert_failed>
 8002fd2:	4f58      	ldr	r7, [pc, #352]	; (8003134 <LL_USART_Init+0x1c0>)
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8002fd4:	68eb      	ldr	r3, [r5, #12]
 8002fd6:	423b      	tst	r3, r7
 8002fd8:	d003      	beq.n	8002fe2 <LL_USART_Init+0x6e>
 8002fda:	21d9      	movs	r1, #217	; 0xd9
 8002fdc:	4852      	ldr	r0, [pc, #328]	; (8003128 <LL_USART_Init+0x1b4>)
 8002fde:	f001 fabb 	bl	8004558 <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8002fe2:	692b      	ldr	r3, [r5, #16]
 8002fe4:	4a54      	ldr	r2, [pc, #336]	; (8003138 <LL_USART_Init+0x1c4>)
 8002fe6:	4213      	tst	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <LL_USART_Init+0x86>
 8002fea:	22c0      	movs	r2, #192	; 0xc0
 8002fec:	00d2      	lsls	r2, r2, #3
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <LL_USART_Init+0x86>
 8002ff2:	21da      	movs	r1, #218	; 0xda
 8002ff4:	484c      	ldr	r0, [pc, #304]	; (8003128 <LL_USART_Init+0x1b4>)
 8002ff6:	f001 faaf 	bl	8004558 <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	696a      	ldr	r2, [r5, #20]
 8002ffe:	439a      	bics	r2, r3
 8003000:	d003      	beq.n	800300a <LL_USART_Init+0x96>
 8003002:	21db      	movs	r1, #219	; 0xdb
 8003004:	4848      	ldr	r0, [pc, #288]	; (8003128 <LL_USART_Init+0x1b4>)
 8003006:	f001 faa7 	bl	8004558 <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 800300a:	69ab      	ldr	r3, [r5, #24]
 800300c:	4a4b      	ldr	r2, [pc, #300]	; (800313c <LL_USART_Init+0x1c8>)
 800300e:	4213      	tst	r3, r2
 8003010:	d003      	beq.n	800301a <LL_USART_Init+0xa6>
 8003012:	21dc      	movs	r1, #220	; 0xdc
 8003014:	4844      	ldr	r0, [pc, #272]	; (8003128 <LL_USART_Init+0x1b4>)
 8003016:	f001 fa9f 	bl	8004558 <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 800301a:	4b49      	ldr	r3, [pc, #292]	; (8003140 <LL_USART_Init+0x1cc>)
 800301c:	69ea      	ldr	r2, [r5, #28]
 800301e:	421a      	tst	r2, r3
 8003020:	d003      	beq.n	800302a <LL_USART_Init+0xb6>
 8003022:	21dd      	movs	r1, #221	; 0xdd
 8003024:	4840      	ldr	r0, [pc, #256]	; (8003128 <LL_USART_Init+0x1b4>)
 8003026:	f001 fa97 	bl	8004558 <assert_failed>
  ErrorStatus status = ERROR;
 800302a:	2601      	movs	r6, #1
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	4233      	tst	r3, r6
 8003030:	d024      	beq.n	800307c <LL_USART_Init+0x108>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8003032:	0030      	movs	r0, r6
 8003034:	b005      	add	sp, #20
 8003036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (USARTx == USART2)
 8003038:	4b38      	ldr	r3, [pc, #224]	; (800311c <LL_USART_Init+0x1a8>)
 800303a:	429c      	cmp	r4, r3
 800303c:	d101      	bne.n	8003042 <LL_USART_Init+0xce>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800303e:	200c      	movs	r0, #12
 8003040:	e037      	b.n	80030b2 <LL_USART_Init+0x13e>
    else if (USARTx == USART3)
 8003042:	4b37      	ldr	r3, [pc, #220]	; (8003120 <LL_USART_Init+0x1ac>)
 8003044:	429c      	cmp	r4, r3
 8003046:	d104      	bne.n	8003052 <LL_USART_Init+0xde>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003048:	a801      	add	r0, sp, #4
 800304a:	f7ff f9ef 	bl	800242c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800304e:	9803      	ldr	r0, [sp, #12]
 8003050:	e031      	b.n	80030b6 <LL_USART_Init+0x142>
    else if (USARTx == USART4)
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <LL_USART_Init+0x1b0>)
 8003054:	429c      	cmp	r4, r3
 8003056:	d0f7      	beq.n	8003048 <LL_USART_Init+0xd4>
  ErrorStatus status = ERROR;
 8003058:	2601      	movs	r6, #1
  *         @arg @ref LL_USART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800305a:	210f      	movs	r1, #15
 800305c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800305e:	682b      	ldr	r3, [r5, #0]
 8003060:	438a      	bics	r2, r1
 8003062:	b29b      	uxth	r3, r3
 8003064:	4313      	orrs	r3, r2
 8003066:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003068:	e7e3      	b.n	8003032 <LL_USART_Init+0xbe>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800306a:	5ad1      	ldrh	r1, [r2, r3]
 800306c:	f7fd f848 	bl	8000100 <__udivsi3>
 8003070:	0031      	movs	r1, r6
 8003072:	19c0      	adds	r0, r0, r7
 8003074:	f7fd f844 	bl	8000100 <__udivsi3>
 8003078:	b280      	uxth	r0, r0
 800307a:	e039      	b.n	80030f0 <LL_USART_Init+0x17c>
    MODIFY_REG(USARTx->CR1,
 800307c:	6929      	ldr	r1, [r5, #16]
 800307e:	68ab      	ldr	r3, [r5, #8]
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	430b      	orrs	r3, r1
 8003084:	6969      	ldr	r1, [r5, #20]
 8003086:	430b      	orrs	r3, r1
 8003088:	69e9      	ldr	r1, [r5, #28]
 800308a:	430b      	orrs	r3, r1
 800308c:	492d      	ldr	r1, [pc, #180]	; (8003144 <LL_USART_Init+0x1d0>)
 800308e:	400a      	ands	r2, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003094:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003096:	4a29      	ldr	r2, [pc, #164]	; (800313c <LL_USART_Init+0x1c8>)
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003098:	401f      	ands	r7, r3
 800309a:	68eb      	ldr	r3, [r5, #12]
 800309c:	431f      	orrs	r7, r3
 800309e:	6067      	str	r7, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80030a0:	68a3      	ldr	r3, [r4, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	69aa      	ldr	r2, [r5, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60a3      	str	r3, [r4, #8]
    if (USARTx == USART1)
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <LL_USART_Init+0x1a4>)
 80030ac:	429c      	cmp	r4, r3
 80030ae:	d1c3      	bne.n	8003038 <LL_USART_Init+0xc4>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80030b0:	2003      	movs	r0, #3
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80030b2:	f7ff f9c7 	bl	8002444 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d0ce      	beq.n	8003058 <LL_USART_Init+0xe4>
        && (USART_InitStruct->BaudRate != 0U))
 80030ba:	686e      	ldr	r6, [r5, #4]
 80030bc:	2e00      	cmp	r6, #0
 80030be:	d0cb      	beq.n	8003058 <LL_USART_Init+0xe4>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	469c      	mov	ip, r3
 80030c6:	682b      	ldr	r3, [r5, #0]
 80030c8:	69e9      	ldr	r1, [r5, #28]
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <LL_USART_Init+0x1d4>)
 80030ce:	0877      	lsrs	r7, r6, #1
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 80030d0:	0bdb      	lsrs	r3, r3, #15
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80030d2:	4561      	cmp	r1, ip
 80030d4:	d1c9      	bne.n	800306a <LL_USART_Init+0xf6>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 80030d6:	5ad1      	ldrh	r1, [r2, r3]
 80030d8:	f7fd f812 	bl	8000100 <__udivsi3>
 80030dc:	0040      	lsls	r0, r0, #1
 80030de:	19c0      	adds	r0, r0, r7
 80030e0:	0031      	movs	r1, r6
 80030e2:	f7fd f80d 	bl	8000100 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <LL_USART_Init+0x1d8>)
 80030e8:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ea:	0700      	lsls	r0, r0, #28
 80030ec:	0f40      	lsrs	r0, r0, #29
 80030ee:	4318      	orrs	r0, r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 80030f0:	60e0      	str	r0, [r4, #12]
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 80030f2:	68e3      	ldr	r3, [r4, #12]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d804      	bhi.n	8003102 <LL_USART_Init+0x18e>
 80030f8:	213c      	movs	r1, #60	; 0x3c
 80030fa:	480b      	ldr	r0, [pc, #44]	; (8003128 <LL_USART_Init+0x1b4>)
 80030fc:	31ff      	adds	r1, #255	; 0xff
 80030fe:	f001 fa2b 	bl	8004558 <assert_failed>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
 8003102:	68e2      	ldr	r2, [r4, #12]
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <LL_USART_Init+0x1dc>)
      status = SUCCESS;
 8003106:	2600      	movs	r6, #0
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
 8003108:	429a      	cmp	r2, r3
 800310a:	d9a6      	bls.n	800305a <LL_USART_Init+0xe6>
 800310c:	219f      	movs	r1, #159	; 0x9f
 800310e:	4806      	ldr	r0, [pc, #24]	; (8003128 <LL_USART_Init+0x1b4>)
 8003110:	0049      	lsls	r1, r1, #1
 8003112:	f001 fa21 	bl	8004558 <assert_failed>
 8003116:	e7a0      	b.n	800305a <LL_USART_Init+0xe6>
 8003118:	40013800 	.word	0x40013800
 800311c:	40004400 	.word	0x40004400
 8003120:	40004800 	.word	0x40004800
 8003124:	40004c00 	.word	0x40004c00
 8003128:	08005c05 	.word	0x08005c05
 800312c:	007a1200 	.word	0x007a1200
 8003130:	ffffefff 	.word	0xffffefff
 8003134:	ffffcfff 	.word	0xffffcfff
 8003138:	fffffbff 	.word	0xfffffbff
 800313c:	fffffcff 	.word	0xfffffcff
 8003140:	ffff7fff 	.word	0xffff7fff
 8003144:	efff69f3 	.word	0xefff69f3
 8003148:	08005c3e 	.word	0x08005c3e
 800314c:	0000fff0 	.word	0x0000fff0
 8003150:	0000ffff 	.word	0x0000ffff

08003154 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003154:	21fa      	movs	r1, #250	; 0xfa
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003156:	b510      	push	{r4, lr}
 8003158:	0089      	lsls	r1, r1, #2
 800315a:	f7fc ffd1 	bl	8000100 <__udivsi3>
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800315e:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <LL_Init1msTick+0x1c>)
 8003162:	3801      	subs	r0, #1
 8003164:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003166:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003168:	3205      	adds	r2, #5
 800316a:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800316c:	bd10      	pop	{r4, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	e000e010 	.word	0xe000e010

08003174 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003174:	4b01      	ldr	r3, [pc, #4]	; (800317c <LL_SetSystemCoreClock+0x8>)
 8003176:	6018      	str	r0, [r3, #0]
}
 8003178:	4770      	bx	lr
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	20000288 	.word	0x20000288

08003180 <LL_IOP_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <LL_IOP_GRP1_EnableClock+0x18>)
{
 8003182:	b082      	sub	sp, #8
  SET_BIT(RCC->IOPENR, Periphs);
 8003184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003186:	4302      	orrs	r2, r0
 8003188:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	4018      	ands	r0, r3
 800318e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8003190:	9b01      	ldr	r3, [sp, #4]
}
 8003192:	b002      	add	sp, #8
 8003194:	4770      	bx	lr
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	40021000 	.word	0x40021000

0800319c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800319c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319e:	b087      	sub	sp, #28

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	2218      	movs	r2, #24
 80031a2:	2100      	movs	r1, #0
 80031a4:	4668      	mov	r0, sp
 80031a6:	f002 fc6b 	bl	8005a80 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80031aa:	2004      	movs	r0, #4
 80031ac:	f7ff ffe8 	bl	8003180 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 80031b0:	2020      	movs	r0, #32
 80031b2:	f7ff ffe5 	bl	8003180 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f7ff ffe2 	bl	8003180 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80031bc:	2002      	movs	r0, #2
 80031be:	f7ff ffdf 	bl	8003180 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 80031c2:	2008      	movs	r0, #8
 80031c4:	f7ff ffdc 	bl	8003180 <LL_IOP_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	4b95      	ldr	r3, [pc, #596]	; (8003420 <MX_GPIO_Init+0x284>)
 80031cc:	01d2      	lsls	r2, r2, #7
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0212      	lsls	r2, r2, #8
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	4d92      	ldr	r5, [pc, #584]	; (8003424 <MX_GPIO_Init+0x288>)
 80031da:	01db      	lsls	r3, r3, #7
 80031dc:	62ab      	str	r3, [r5, #40]	; 0x28
 80031de:	62aa      	str	r2, [r5, #40]	; 0x28
 80031e0:	23a0      	movs	r3, #160	; 0xa0
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	0152      	lsls	r2, r2, #5
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	0212      	lsls	r2, r2, #8
 80031ee:	2601      	movs	r6, #1
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
 80031f2:	2202      	movs	r2, #2
 80031f4:	4b8c      	ldr	r3, [pc, #560]	; (8003428 <MX_GPIO_Init+0x28c>)
  /**/
  LL_GPIO_ResetOutputPin(LED_MUX_3_GPIO_Port, LED_MUX_3_Pin);

  /**/
  GPIO_InitStruct.Pin = ENC_S_0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80031f6:	2400      	movs	r4, #0
 80031f8:	629e      	str	r6, [r3, #40]	; 0x28
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
 80031fc:	3206      	adds	r2, #6
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003200:	0013      	movs	r3, r2
 8003202:	3308      	adds	r3, #8
 8003204:	62aa      	str	r2, [r5, #40]	; 0x28
 8003206:	62ab      	str	r3, [r5, #40]	; 0x28
  GPIO_InitStruct.Pin = ENC_S_0_Pin;
 8003208:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_S_0_GPIO_Port, &GPIO_InitStruct);
 800320a:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = ENC_S_0_Pin;
 800320c:	019b      	lsls	r3, r3, #6
  LL_GPIO_Init(ENC_S_0_GPIO_Port, &GPIO_InitStruct);
 800320e:	4884      	ldr	r0, [pc, #528]	; (8003420 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pin = ENC_S_0_Pin;
 8003210:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003212:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003214:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_S_0_GPIO_Port, &GPIO_InitStruct);
 8003216:	f7ff f801 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_0_Pin;
 800321a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_0_GPIO_Port, &GPIO_InitStruct);
 800321c:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = LED_MUX_0_Pin;
 800321e:	01db      	lsls	r3, r3, #7
  LL_GPIO_Init(LED_MUX_0_GPIO_Port, &GPIO_InitStruct);
 8003220:	487f      	ldr	r0, [pc, #508]	; (8003420 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pin = LED_MUX_0_Pin;
 8003222:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003224:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003226:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003228:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800322a:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_0_GPIO_Port, &GPIO_InitStruct);
 800322c:	f7fe fff6 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_1_Pin;
 8003230:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_1_GPIO_Port, &GPIO_InitStruct);
 8003232:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = LED_MUX_1_Pin;
 8003234:	021b      	lsls	r3, r3, #8
  LL_GPIO_Init(LED_MUX_1_GPIO_Port, &GPIO_InitStruct);
 8003236:	487a      	ldr	r0, [pc, #488]	; (8003420 <MX_GPIO_Init+0x284>)

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003238:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = LED_MUX_1_Pin;
 800323a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800323c:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800323e:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003240:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003242:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_1_GPIO_Port, &GPIO_InitStruct);
 8003244:	f7fe ffea 	bl	800221c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003248:	2304      	movs	r3, #4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800324a:	4669      	mov	r1, sp
 800324c:	4877      	ldr	r0, [pc, #476]	; (800342c <MX_GPIO_Init+0x290>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800324e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003250:	9701      	str	r7, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003252:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003254:	f7fe ffe2 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_A_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_A_2_GPIO_Port, &GPIO_InitStruct);
 8003258:	4669      	mov	r1, sp
 800325a:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = ENC_A_2_Pin;
 800325c:	9600      	str	r6, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800325e:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003260:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_A_2_GPIO_Port, &GPIO_InitStruct);
 8003262:	f7fe ffdb 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_B_2_Pin;
 8003266:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_B_2_GPIO_Port, &GPIO_InitStruct);
 8003268:	4669      	mov	r1, sp
 800326a:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = ENC_B_2_Pin;
 800326c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800326e:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003270:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_B_2_GPIO_Port, &GPIO_InitStruct);
 8003272:	f7fe ffd3 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_S_2_Pin;
 8003276:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_S_2_GPIO_Port, &GPIO_InitStruct);
 8003278:	4669      	mov	r1, sp
 800327a:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = ENC_S_2_Pin;
 800327c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800327e:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003280:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_S_2_GPIO_Port, &GPIO_InitStruct);
 8003282:	f7fe ffcb 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_B_1_Pin;
 8003286:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_B_1_GPIO_Port, &GPIO_InitStruct);
 8003288:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = ENC_B_1_Pin;
 800328a:	015b      	lsls	r3, r3, #5
  LL_GPIO_Init(ENC_B_1_GPIO_Port, &GPIO_InitStruct);
 800328c:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = ENC_B_1_Pin;
 800328e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003290:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003292:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_B_1_GPIO_Port, &GPIO_InitStruct);
 8003294:	f7fe ffc2 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_S_1_Pin;
 8003298:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_S_1_GPIO_Port, &GPIO_InitStruct);
 800329a:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = ENC_S_1_Pin;
 800329c:	019b      	lsls	r3, r3, #6
  LL_GPIO_Init(ENC_S_1_GPIO_Port, &GPIO_InitStruct);
 800329e:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = ENC_S_1_Pin;
 80032a0:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80032a2:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032a4:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_S_1_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f7fe ffb9 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_4_Pin;
 80032aa:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_4_GPIO_Port, &GPIO_InitStruct);
 80032ac:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = LED_MUX_4_Pin;
 80032ae:	01db      	lsls	r3, r3, #7
  LL_GPIO_Init(LED_MUX_4_GPIO_Port, &GPIO_InitStruct);
 80032b0:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LED_MUX_4_Pin;
 80032b2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032b4:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80032b6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032b8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032ba:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_4_GPIO_Port, &GPIO_InitStruct);
 80032bc:	f7fe ffae 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_5_Pin;
 80032c0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_5_GPIO_Port, &GPIO_InitStruct);
 80032c2:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = LED_MUX_5_Pin;
 80032c4:	021b      	lsls	r3, r3, #8
  LL_GPIO_Init(LED_MUX_5_GPIO_Port, &GPIO_InitStruct);
 80032c6:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LED_MUX_5_Pin;
 80032c8:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032ca:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80032cc:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032ce:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032d0:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_5_GPIO_Port, &GPIO_InitStruct);
 80032d2:	f7fe ffa3 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USART2_DETECT_Pin;
 80032d6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(USART2_DETECT_GPIO_Port, &GPIO_InitStruct);
 80032d8:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = USART2_DETECT_Pin;
 80032da:	005b      	lsls	r3, r3, #1
  LL_GPIO_Init(USART2_DETECT_GPIO_Port, &GPIO_InitStruct);
 80032dc:	4669      	mov	r1, sp
 80032de:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = USART2_DETECT_Pin;
 80032e0:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80032e2:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032e4:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(USART2_DETECT_GPIO_Port, &GPIO_InitStruct);
 80032e6:	f7fe ff99 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_A_3_Pin;
 80032ea:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_A_3_GPIO_Port, &GPIO_InitStruct);
 80032ec:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENC_A_3_Pin;
 80032ee:	009b      	lsls	r3, r3, #2
  LL_GPIO_Init(ENC_A_3_GPIO_Port, &GPIO_InitStruct);
 80032f0:	4669      	mov	r1, sp
 80032f2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ENC_A_3_Pin;
 80032f4:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80032f6:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032f8:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_A_3_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f7fe ff8f 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_A_0_Pin;
 80032fe:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_A_0_GPIO_Port, &GPIO_InitStruct);
 8003300:	4669      	mov	r1, sp
 8003302:	4847      	ldr	r0, [pc, #284]	; (8003420 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pin = ENC_A_0_Pin;
 8003304:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003306:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003308:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_A_0_GPIO_Port, &GPIO_InitStruct);
 800330a:	f7fe ff87 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_B_0_Pin;
 800330e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_B_0_GPIO_Port, &GPIO_InitStruct);
 8003310:	4669      	mov	r1, sp
 8003312:	4843      	ldr	r0, [pc, #268]	; (8003420 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pin = ENC_B_0_Pin;
 8003314:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003316:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003318:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_B_0_GPIO_Port, &GPIO_InitStruct);
 800331a:	f7fe ff7f 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_B_3_Pin;
 800331e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_B_3_GPIO_Port, &GPIO_InitStruct);
 8003320:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENC_B_3_Pin;
 8003322:	00db      	lsls	r3, r3, #3
  LL_GPIO_Init(ENC_B_3_GPIO_Port, &GPIO_InitStruct);
 8003324:	4669      	mov	r1, sp
 8003326:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ENC_B_3_Pin;
 8003328:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800332a:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800332c:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_B_3_GPIO_Port, &GPIO_InitStruct);
 800332e:	f7fe ff75 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_S_3_Pin;
 8003332:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_S_3_GPIO_Port, &GPIO_InitStruct);
 8003334:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENC_S_3_Pin;
 8003336:	011b      	lsls	r3, r3, #4
  LL_GPIO_Init(ENC_S_3_GPIO_Port, &GPIO_InitStruct);
 8003338:	4669      	mov	r1, sp
 800333a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ENC_S_3_Pin;
 800333c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800333e:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003340:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_S_3_GPIO_Port, &GPIO_InitStruct);
 8003342:	f7fe ff6b 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_6_Pin;
 8003346:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_6_GPIO_Port, &GPIO_InitStruct);
 8003348:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_MUX_6_Pin;
 800334a:	015b      	lsls	r3, r3, #5
  LL_GPIO_Init(LED_MUX_6_GPIO_Port, &GPIO_InitStruct);
 800334c:	4669      	mov	r1, sp
 800334e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_MUX_6_Pin;
 8003350:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003352:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003354:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003356:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003358:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_6_GPIO_Port, &GPIO_InitStruct);
 800335a:	f7fe ff5f 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_7_Pin;
 800335e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_7_GPIO_Port, &GPIO_InitStruct);
 8003360:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_MUX_7_Pin;
 8003362:	021b      	lsls	r3, r3, #8
  LL_GPIO_Init(LED_MUX_7_GPIO_Port, &GPIO_InitStruct);
 8003364:	4669      	mov	r1, sp
 8003366:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_MUX_7_Pin;
 8003368:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800336a:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800336c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800336e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003370:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_7_GPIO_Port, &GPIO_InitStruct);
 8003372:	f7fe ff53 	bl	800221c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_MUX_8_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_8_GPIO_Port, &GPIO_InitStruct);
 8003376:	4669      	mov	r1, sp
 8003378:	482b      	ldr	r0, [pc, #172]	; (8003428 <MX_GPIO_Init+0x28c>)
  GPIO_InitStruct.Pin = LED_MUX_8_Pin;
 800337a:	9600      	str	r6, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800337c:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003380:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003382:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_8_GPIO_Port, &GPIO_InitStruct);
 8003384:	f7fe ff4a 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_9_Pin;
 8003388:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_9_GPIO_Port, &GPIO_InitStruct);
 800338a:	4669      	mov	r1, sp
 800338c:	4826      	ldr	r0, [pc, #152]	; (8003428 <MX_GPIO_Init+0x28c>)
  GPIO_InitStruct.Pin = LED_MUX_9_Pin;
 800338e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003390:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003394:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003396:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_9_GPIO_Port, &GPIO_InitStruct);
 8003398:	f7fe ff40 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800339c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800339e:	4669      	mov	r1, sp
 80033a0:	4821      	ldr	r0, [pc, #132]	; (8003428 <MX_GPIO_Init+0x28c>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80033a2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80033a4:	9701      	str	r7, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033a6:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a8:	f7fe ff38 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_POINT_Pin;
 80033ac:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(TEST_POINT_GPIO_Port, &GPIO_InitStruct);
 80033ae:	4669      	mov	r1, sp
 80033b0:	481d      	ldr	r0, [pc, #116]	; (8003428 <MX_GPIO_Init+0x28c>)
  GPIO_InitStruct.Pin = TEST_POINT_Pin;
 80033b2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033b4:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033b8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033ba:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(TEST_POINT_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f7fe ff2e 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_2_Pin;
 80033c0:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_2_GPIO_Port, &GPIO_InitStruct);
 80033c2:	4669      	mov	r1, sp
 80033c4:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LED_MUX_2_Pin;
 80033c6:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033c8:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033ca:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033cc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033ce:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_2_GPIO_Port, &GPIO_InitStruct);
 80033d0:	f7fe ff24 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_MUX_3_Pin;
 80033d4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_MUX_3_GPIO_Port, &GPIO_InitStruct);
 80033d6:	4669      	mov	r1, sp
 80033d8:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LED_MUX_3_Pin;
 80033da:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033dc:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033e0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033e2:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(LED_MUX_3_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f7fe ff1a 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUTTONS_Pin;
 80033e8:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(BUTTONS_GPIO_Port, &GPIO_InitStruct);
 80033ea:	4669      	mov	r1, sp
 80033ec:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = BUTTONS_Pin;
 80033ee:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80033f0:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033f2:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(BUTTONS_GPIO_Port, &GPIO_InitStruct);
 80033f4:	f7fe ff12 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USART1_DETECT_Pin;
 80033f8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(USART1_DETECT_GPIO_Port, &GPIO_InitStruct);
 80033fa:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = USART1_DETECT_Pin;
 80033fc:	005b      	lsls	r3, r3, #1
  LL_GPIO_Init(USART1_DETECT_GPIO_Port, &GPIO_InitStruct);
 80033fe:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USART1_DETECT_Pin;
 8003400:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003402:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003404:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(USART1_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003406:	f7fe ff09 	bl	800221c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_A_1_Pin;
 800340a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC_A_1_GPIO_Port, &GPIO_InitStruct);
 800340c:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = ENC_A_1_Pin;
 800340e:	009b      	lsls	r3, r3, #2
  LL_GPIO_Init(ENC_A_1_GPIO_Port, &GPIO_InitStruct);
 8003410:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = ENC_A_1_Pin;
 8003412:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003414:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003416:	9404      	str	r4, [sp, #16]
  LL_GPIO_Init(ENC_A_1_GPIO_Port, &GPIO_InitStruct);
 8003418:	f7fe ff00 	bl	800221c <LL_GPIO_Init>

}
 800341c:	b007      	add	sp, #28
 800341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003420:	50000800 	.word	0x50000800
 8003424:	50000400 	.word	0x50000400
 8003428:	50000c00 	.word	0x50000c00
 800342c:	50001400 	.word	0x50001400

08003430 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8003430:	429a      	cmp	r2, r3
 8003432:	d200      	bcs.n	8003436 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 8003434:	5488      	strb	r0, [r1, r2]
  }
}
 8003436:	4770      	bx	lr

08003438 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003438:	4770      	bx	lr

0800343a <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800343a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800343c:	9301      	str	r3, [sp, #4]
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800343e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
 8003440:	0006      	movs	r6, r0
 8003442:	9100      	str	r1, [sp, #0]
 8003444:	0015      	movs	r5, r2
 8003446:	0014      	movs	r4, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003448:	079b      	lsls	r3, r3, #30
 800344a:	d105      	bne.n	8003458 <_out_rev+0x1e>
    for (size_t i = len; i < width; i++) {
 800344c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800344e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003450:	1b5b      	subs	r3, r3, r5
 8003452:	191b      	adds	r3, r3, r4
 8003454:	429a      	cmp	r2, r3
 8003456:	d80a      	bhi.n	800346e <_out_rev+0x34>
 8003458:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800345a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800345c:	18e2      	adds	r2, r4, r3
 800345e:	1bd2      	subs	r2, r2, r7
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  while (len) {
 8003460:	2f00      	cmp	r7, #0
 8003462:	d10c      	bne.n	800347e <_out_rev+0x44>
    out(buf[--len], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003466:	079b      	lsls	r3, r3, #30
 8003468:	d416      	bmi.n	8003498 <_out_rev+0x5e>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 800346a:	0010      	movs	r0, r2
 800346c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      out(' ', buffer, idx++, maxlen);
 800346e:	0022      	movs	r2, r4
 8003470:	1c67      	adds	r7, r4, #1
 8003472:	9b01      	ldr	r3, [sp, #4]
 8003474:	9900      	ldr	r1, [sp, #0]
 8003476:	2020      	movs	r0, #32
 8003478:	47b0      	blx	r6
 800347a:	003c      	movs	r4, r7
 800347c:	e7e6      	b.n	800344c <_out_rev+0x12>
    out(buf[--len], buffer, idx++, maxlen);
 800347e:	9b08      	ldr	r3, [sp, #32]
 8003480:	3f01      	subs	r7, #1
 8003482:	5dd8      	ldrb	r0, [r3, r7]
 8003484:	9900      	ldr	r1, [sp, #0]
 8003486:	9b01      	ldr	r3, [sp, #4]
 8003488:	47b0      	blx	r6
 800348a:	e7e6      	b.n	800345a <_out_rev+0x20>
      out(' ', buffer, idx++, maxlen);
 800348c:	1c54      	adds	r4, r2, #1
 800348e:	9b01      	ldr	r3, [sp, #4]
 8003490:	9900      	ldr	r1, [sp, #0]
 8003492:	2020      	movs	r0, #32
 8003494:	47b0      	blx	r6
 8003496:	0022      	movs	r2, r4
    while (idx - start_idx < width) {
 8003498:	990a      	ldr	r1, [sp, #40]	; 0x28
 800349a:	1b53      	subs	r3, r2, r5
 800349c:	4299      	cmp	r1, r3
 800349e:	d8f5      	bhi.n	800348c <_out_rev+0x52>
 80034a0:	e7e3      	b.n	800346a <_out_rev+0x30>

080034a2 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80034a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a4:	b087      	sub	sp, #28
 80034a6:	ac0e      	add	r4, sp, #56	; 0x38
 80034a8:	7824      	ldrb	r4, [r4, #0]
 80034aa:	9004      	str	r0, [sp, #16]
 80034ac:	46a4      	mov	ip, r4
 80034ae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80034b0:	9105      	str	r1, [sp, #20]
 80034b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80034b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034b6:	9f11      	ldr	r7, [sp, #68]	; 0x44
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80034b8:	07a5      	lsls	r5, r4, #30
 80034ba:	d417      	bmi.n	80034ec <_ntoa_format+0x4a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80034bc:	2f00      	cmp	r7, #0
 80034be:	d008      	beq.n	80034d2 <_ntoa_format+0x30>
 80034c0:	07e5      	lsls	r5, r4, #31
 80034c2:	d506      	bpl.n	80034d2 <_ntoa_format+0x30>
 80034c4:	4665      	mov	r5, ip
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	d102      	bne.n	80034d0 <_ntoa_format+0x2e>
 80034ca:	260c      	movs	r6, #12
 80034cc:	4234      	tst	r4, r6
 80034ce:	d000      	beq.n	80034d2 <_ntoa_format+0x30>
      width--;
 80034d0:	3f01      	subs	r7, #1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80034d2:	2630      	movs	r6, #48	; 0x30
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80034d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034d6:	428d      	cmp	r5, r1
 80034d8:	d822      	bhi.n	8003520 <_ntoa_format+0x7e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80034da:	2601      	movs	r6, #1
      buf[len++] = '0';
 80034dc:	2530      	movs	r5, #48	; 0x30
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80034de:	4026      	ands	r6, r4
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	d003      	beq.n	80034ec <_ntoa_format+0x4a>
 80034e4:	428f      	cmp	r7, r1
 80034e6:	d901      	bls.n	80034ec <_ntoa_format+0x4a>
 80034e8:	291f      	cmp	r1, #31
 80034ea:	d91e      	bls.n	800352a <_ntoa_format+0x88>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80034ec:	06e5      	lsls	r5, r4, #27
 80034ee:	d53c      	bpl.n	800356a <_ntoa_format+0xc8>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80034f0:	0565      	lsls	r5, r4, #21
 80034f2:	d41e      	bmi.n	8003532 <_ntoa_format+0x90>
 80034f4:	2900      	cmp	r1, #0
 80034f6:	d01c      	beq.n	8003532 <_ntoa_format+0x90>
 80034f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034fa:	42a9      	cmp	r1, r5
 80034fc:	d001      	beq.n	8003502 <_ntoa_format+0x60>
 80034fe:	42b9      	cmp	r1, r7
 8003500:	d117      	bne.n	8003532 <_ntoa_format+0x90>
      len--;
 8003502:	1e4e      	subs	r6, r1, #1
      if (len && (base == 16U)) {
 8003504:	2e00      	cmp	r6, #0
 8003506:	d013      	beq.n	8003530 <_ntoa_format+0x8e>
 8003508:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
        len--;
 800350a:	3902      	subs	r1, #2
      if (len && (base == 16U)) {
 800350c:	2d10      	cmp	r5, #16
 800350e:	d013      	beq.n	8003538 <_ntoa_format+0x96>
 8003510:	0031      	movs	r1, r6
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003514:	2d02      	cmp	r5, #2
 8003516:	d123      	bne.n	8003560 <_ntoa_format+0xbe>
 8003518:	291f      	cmp	r1, #31
 800351a:	d812      	bhi.n	8003542 <_ntoa_format+0xa0>
      buf[len++] = 'b';
 800351c:	3560      	adds	r5, #96	; 0x60
 800351e:	e01d      	b.n	800355c <_ntoa_format+0xba>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003520:	291f      	cmp	r1, #31
 8003522:	d8da      	bhi.n	80034da <_ntoa_format+0x38>
      buf[len++] = '0';
 8003524:	5446      	strb	r6, [r0, r1]
 8003526:	3101      	adds	r1, #1
 8003528:	e7d4      	b.n	80034d4 <_ntoa_format+0x32>
      buf[len++] = '0';
 800352a:	5445      	strb	r5, [r0, r1]
 800352c:	3101      	adds	r1, #1
 800352e:	e7d7      	b.n	80034e0 <_ntoa_format+0x3e>
 8003530:	0031      	movs	r1, r6
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003534:	2d10      	cmp	r5, #16
 8003536:	d1ec      	bne.n	8003512 <_ntoa_format+0x70>
 8003538:	06a5      	lsls	r5, r4, #26
 800353a:	d40c      	bmi.n	8003556 <_ntoa_format+0xb4>
      buf[len++] = 'x';
 800353c:	2578      	movs	r5, #120	; 0x78
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800353e:	291f      	cmp	r1, #31
 8003540:	d90c      	bls.n	800355c <_ntoa_format+0xba>
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003542:	9101      	str	r1, [sp, #4]
 8003544:	9000      	str	r0, [sp, #0]
 8003546:	9403      	str	r4, [sp, #12]
 8003548:	9702      	str	r7, [sp, #8]
 800354a:	9905      	ldr	r1, [sp, #20]
 800354c:	9804      	ldr	r0, [sp, #16]
 800354e:	f7ff ff74 	bl	800343a <_out_rev>
}
 8003552:	b007      	add	sp, #28
 8003554:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = 'X';
 8003556:	2558      	movs	r5, #88	; 0x58
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003558:	291f      	cmp	r1, #31
 800355a:	d8f2      	bhi.n	8003542 <_ntoa_format+0xa0>
      buf[len++] = 'b';
 800355c:	5445      	strb	r5, [r0, r1]
 800355e:	3101      	adds	r1, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003560:	291f      	cmp	r1, #31
 8003562:	d8ee      	bhi.n	8003542 <_ntoa_format+0xa0>
      buf[len++] = '0';
 8003564:	2530      	movs	r5, #48	; 0x30
 8003566:	5445      	strb	r5, [r0, r1]
 8003568:	3101      	adds	r1, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800356a:	291f      	cmp	r1, #31
 800356c:	d8e9      	bhi.n	8003542 <_ntoa_format+0xa0>
    if (negative) {
 800356e:	4665      	mov	r5, ip
 8003570:	2d00      	cmp	r5, #0
 8003572:	d003      	beq.n	800357c <_ntoa_format+0xda>
      buf[len++] = '-';
 8003574:	252d      	movs	r5, #45	; 0x2d
      buf[len++] = ' ';
 8003576:	5445      	strb	r5, [r0, r1]
 8003578:	3101      	adds	r1, #1
 800357a:	e7e2      	b.n	8003542 <_ntoa_format+0xa0>
    else if (flags & FLAGS_PLUS) {
 800357c:	0765      	lsls	r5, r4, #29
 800357e:	d501      	bpl.n	8003584 <_ntoa_format+0xe2>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003580:	252b      	movs	r5, #43	; 0x2b
 8003582:	e7f8      	b.n	8003576 <_ntoa_format+0xd4>
    else if (flags & FLAGS_SPACE) {
 8003584:	0725      	lsls	r5, r4, #28
 8003586:	d5dc      	bpl.n	8003542 <_ntoa_format+0xa0>
      buf[len++] = ' ';
 8003588:	2520      	movs	r5, #32
 800358a:	e7f4      	b.n	8003576 <_ntoa_format+0xd4>

0800358c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b097      	sub	sp, #92	; 0x5c
 8003590:	930b      	str	r3, [sp, #44]	; 0x2c
 8003592:	ab1c      	add	r3, sp, #112	; 0x70
 8003594:	cb10      	ldmia	r3!, {r4}
 8003596:	9008      	str	r0, [sp, #32]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	9109      	str	r1, [sp, #36]	; 0x24
 800359c:	920a      	str	r2, [sp, #40]	; 0x28
 800359e:	930c      	str	r3, [sp, #48]	; 0x30
 80035a0:	9f21      	ldr	r7, [sp, #132]	; 0x84
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80035a2:	2c00      	cmp	r4, #0
 80035a4:	d101      	bne.n	80035aa <_ntoa_long+0x1e>
    flags &= ~FLAGS_HASH;
 80035a6:	2310      	movs	r3, #16
 80035a8:	439f      	bics	r7, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80035aa:	057b      	lsls	r3, r7, #21
 80035ac:	d502      	bpl.n	80035b4 <_ntoa_long+0x28>
  size_t len = 0U;
 80035ae:	2500      	movs	r5, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 80035b0:	42ac      	cmp	r4, r5
 80035b2:	d021      	beq.n	80035f8 <_ntoa_long+0x6c>
 80035b4:	2361      	movs	r3, #97	; 0x61
 80035b6:	06ba      	lsls	r2, r7, #26
 80035b8:	d500      	bpl.n	80035bc <_ntoa_long+0x30>
 80035ba:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80035bc:	2600      	movs	r6, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3b0a      	subs	r3, #10
 80035c2:	930d      	str	r3, [sp, #52]	; 0x34
      const char digit = (char)(value % base);
 80035c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80035c6:	0020      	movs	r0, r4
 80035c8:	f7fc fe20 	bl	800020c <__aeabi_uidivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80035cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      const char digit = (char)(value % base);
 80035ce:	b2c9      	uxtb	r1, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80035d0:	18cb      	adds	r3, r1, r3
 80035d2:	1c75      	adds	r5, r6, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2909      	cmp	r1, #9
 80035d8:	d801      	bhi.n	80035de <_ntoa_long+0x52>
 80035da:	3130      	adds	r1, #48	; 0x30
 80035dc:	b2cb      	uxtb	r3, r1
 80035de:	2120      	movs	r1, #32
 80035e0:	aa06      	add	r2, sp, #24
 80035e2:	1852      	adds	r2, r2, r1
      value /= base;
 80035e4:	0020      	movs	r0, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80035e6:	5593      	strb	r3, [r2, r6]
      value /= base;
 80035e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80035ea:	f7fc fd89 	bl	8000100 <__udivsi3>
 80035ee:	1e04      	subs	r4, r0, #0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80035f0:	d002      	beq.n	80035f8 <_ntoa_long+0x6c>
 80035f2:	002e      	movs	r6, r5
 80035f4:	2d20      	cmp	r5, #32
 80035f6:	d1e5      	bne.n	80035c4 <_ntoa_long+0x38>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80035f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035fa:	9706      	str	r7, [sp, #24]
 80035fc:	9305      	str	r3, [sp, #20]
 80035fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003600:	9501      	str	r5, [sp, #4]
 8003602:	9304      	str	r3, [sp, #16]
 8003604:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003608:	9303      	str	r3, [sp, #12]
 800360a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800360c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800360e:	9302      	str	r3, [sp, #8]
 8003610:	ab0e      	add	r3, sp, #56	; 0x38
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	9808      	ldr	r0, [sp, #32]
 8003616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003618:	f7ff ff43 	bl	80034a2 <_ntoa_format>
}
 800361c:	b017      	add	sp, #92	; 0x5c
 800361e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003620 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003622:	b099      	sub	sp, #100	; 0x64
 8003624:	930d      	str	r3, [sp, #52]	; 0x34
 8003626:	ab20      	add	r3, sp, #128	; 0x80
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800362c:	930e      	str	r3, [sp, #56]	; 0x38
 800362e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003630:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8003632:	9308      	str	r3, [sp, #32]
 8003634:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003636:	900a      	str	r0, [sp, #40]	; 0x28
 8003638:	9309      	str	r3, [sp, #36]	; 0x24
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 800363a:	0023      	movs	r3, r4
{
 800363c:	910b      	str	r1, [sp, #44]	; 0x2c
 800363e:	920c      	str	r2, [sp, #48]	; 0x30
  if (!value) {
 8003640:	432b      	orrs	r3, r5
 8003642:	d103      	bne.n	800364c <_ntoa_long_long+0x2c>
    flags &= ~FLAGS_HASH;
 8003644:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003646:	3310      	adds	r3, #16
 8003648:	439a      	bics	r2, r3
 800364a:	9226      	str	r2, [sp, #152]	; 0x98
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800364c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800364e:	055b      	lsls	r3, r3, #21
 8003650:	d504      	bpl.n	800365c <_ntoa_long_long+0x3c>
 8003652:	0023      	movs	r3, r4
  size_t len = 0U;
 8003654:	2600      	movs	r6, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003656:	432b      	orrs	r3, r5
 8003658:	42b3      	cmp	r3, r6
 800365a:	d028      	beq.n	80036ae <_ntoa_long_long+0x8e>
 800365c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800365e:	2361      	movs	r3, #97	; 0x61
 8003660:	0692      	lsls	r2, r2, #26
 8003662:	d500      	bpl.n	8003666 <_ntoa_long_long+0x46>
 8003664:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003666:	2700      	movs	r7, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	3b0a      	subs	r3, #10
 800366c:	930f      	str	r3, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 800366e:	9a08      	ldr	r2, [sp, #32]
 8003670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003672:	0020      	movs	r0, r4
 8003674:	0029      	movs	r1, r5
 8003676:	f7fc fef7 	bl	8000468 <__aeabi_uldivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800367a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 800367c:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	1c7e      	adds	r6, r7, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2a09      	cmp	r2, #9
 8003686:	d801      	bhi.n	800368c <_ntoa_long_long+0x6c>
 8003688:	3230      	adds	r2, #48	; 0x30
 800368a:	b2d3      	uxtb	r3, r2
 800368c:	2120      	movs	r1, #32
 800368e:	aa08      	add	r2, sp, #32
 8003690:	1852      	adds	r2, r2, r1
 8003692:	55d3      	strb	r3, [r2, r7]
      value /= base;
 8003694:	0020      	movs	r0, r4
 8003696:	0029      	movs	r1, r5
 8003698:	9a08      	ldr	r2, [sp, #32]
 800369a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800369c:	f7fc fee4 	bl	8000468 <__aeabi_uldivmod>
 80036a0:	000d      	movs	r5, r1
 80036a2:	0004      	movs	r4, r0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80036a4:	4301      	orrs	r1, r0
 80036a6:	d002      	beq.n	80036ae <_ntoa_long_long+0x8e>
 80036a8:	0037      	movs	r7, r6
 80036aa:	2e20      	cmp	r6, #32
 80036ac:	d1df      	bne.n	800366e <_ntoa_long_long+0x4e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80036ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80036b0:	9601      	str	r6, [sp, #4]
 80036b2:	9306      	str	r3, [sp, #24]
 80036b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80036b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036b8:	9305      	str	r3, [sp, #20]
 80036ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80036bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036be:	9304      	str	r3, [sp, #16]
 80036c0:	9b08      	ldr	r3, [sp, #32]
 80036c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80036c4:	9303      	str	r3, [sp, #12]
 80036c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036c8:	9302      	str	r3, [sp, #8]
 80036ca:	ab10      	add	r3, sp, #64	; 0x40
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036d0:	f7ff fee7 	bl	80034a2 <_ntoa_format>
}
 80036d4:	b019      	add	sp, #100	; 0x64
 80036d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036d8 <_out_char>:
{
 80036d8:	b510      	push	{r4, lr}
  if (character) {
 80036da:	2800      	cmp	r0, #0
 80036dc:	d001      	beq.n	80036e2 <_out_char+0xa>
    _putchar(character);
 80036de:	f001 fb5f 	bl	8004da0 <_putchar>
}
 80036e2:	bd10      	pop	{r4, pc}

080036e4 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	b099      	sub	sp, #100	; 0x64
 80036e8:	9009      	str	r0, [sp, #36]	; 0x24
 80036ea:	910a      	str	r1, [sp, #40]	; 0x28
 80036ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80036ee:	930c      	str	r3, [sp, #48]	; 0x30

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80036f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80036f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80036f4:	0010      	movs	r0, r2
 80036f6:	0019      	movs	r1, r3
 80036f8:	f7fc fe88 	bl	800040c <__aeabi_dcmpeq>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d108      	bne.n	8003712 <_ftoa+0x2e>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003700:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	2303      	movs	r3, #3
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	4bb1      	ldr	r3, [pc, #708]	; (80039d4 <_ftoa+0x2f0>)
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	e024      	b.n	800375c <_ftoa+0x78>
  if (value < -DBL_MAX)
 8003712:	2201      	movs	r2, #1
 8003714:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003716:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8003718:	4252      	negs	r2, r2
 800371a:	4baf      	ldr	r3, [pc, #700]	; (80039d8 <_ftoa+0x2f4>)
 800371c:	f7fc fe7c 	bl	8000418 <__aeabi_dcmplt>
 8003720:	2800      	cmp	r0, #0
 8003722:	d007      	beq.n	8003734 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003726:	9303      	str	r3, [sp, #12]
 8003728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800372a:	9302      	str	r3, [sp, #8]
 800372c:	2304      	movs	r3, #4
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	4baa      	ldr	r3, [pc, #680]	; (80039dc <_ftoa+0x2f8>)
 8003732:	e7ec      	b.n	800370e <_ftoa+0x2a>
  if (value > DBL_MAX)
 8003734:	2201      	movs	r2, #1
 8003736:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003738:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800373a:	4252      	negs	r2, r2
 800373c:	4ba8      	ldr	r3, [pc, #672]	; (80039e0 <_ftoa+0x2fc>)
 800373e:	f7fc fe7f 	bl	8000440 <__aeabi_dcmpgt>
 8003742:	2800      	cmp	r0, #0
 8003744:	d014      	beq.n	8003770 <_ftoa+0x8c>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003746:	2304      	movs	r3, #4
 8003748:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800374a:	421a      	tst	r2, r3
 800374c:	d00d      	beq.n	800376a <_ftoa+0x86>
 800374e:	4aa5      	ldr	r2, [pc, #660]	; (80039e4 <_ftoa+0x300>)
 8003750:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	9103      	str	r1, [sp, #12]
 8003756:	9921      	ldr	r1, [sp, #132]	; 0x84
 8003758:	9200      	str	r2, [sp, #0]
 800375a:	9102      	str	r1, [sp, #8]
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800375c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800375e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003760:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003764:	f7ff fe69 	bl	800343a <_out_rev>
 8003768:	e022      	b.n	80037b0 <_ftoa+0xcc>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800376a:	4a9f      	ldr	r2, [pc, #636]	; (80039e8 <_ftoa+0x304>)
 800376c:	2303      	movs	r3, #3
 800376e:	e7ef      	b.n	8003750 <_ftoa+0x6c>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003770:	2200      	movs	r2, #0
 8003772:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003774:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8003776:	4b9d      	ldr	r3, [pc, #628]	; (80039ec <_ftoa+0x308>)
 8003778:	f7fc fe62 	bl	8000440 <__aeabi_dcmpgt>
 800377c:	2800      	cmp	r0, #0
 800377e:	d107      	bne.n	8003790 <_ftoa+0xac>
 8003780:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003782:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8003784:	2200      	movs	r2, #0
 8003786:	4b9a      	ldr	r3, [pc, #616]	; (80039f0 <_ftoa+0x30c>)
 8003788:	f7fc fe46 	bl	8000418 <__aeabi_dcmplt>
 800378c:	2800      	cmp	r0, #0
 800378e:	d011      	beq.n	80037b4 <_ftoa+0xd0>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003790:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003794:	9304      	str	r3, [sp, #16]
 8003796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003798:	990a      	ldr	r1, [sp, #40]	; 0x28
 800379a:	9303      	str	r3, [sp, #12]
 800379c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800379e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037a0:	9302      	str	r3, [sp, #8]
 80037a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80037a4:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	9401      	str	r4, [sp, #4]
 80037aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037ac:	f000 f926 	bl	80039fc <_etoa>
}
 80037b0:	b019      	add	sp, #100	; 0x64
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (value < 0) {
 80037b4:	2200      	movs	r2, #0
 80037b6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80037b8:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80037ba:	2300      	movs	r3, #0
 80037bc:	f7fc fe2c 	bl	8000418 <__aeabi_dcmplt>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d100      	bne.n	80037c6 <_ftoa+0xe2>
 80037c4:	e07c      	b.n	80038c0 <_ftoa+0x1dc>
    value = 0 - value;
 80037c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80037c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037ca:	2000      	movs	r0, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	f7fe f937 	bl	8001a40 <__aeabi_dsub>
    negative = true;
 80037d2:	2301      	movs	r3, #1
    value = 0 - value;
 80037d4:	901e      	str	r0, [sp, #120]	; 0x78
 80037d6:	911f      	str	r1, [sp, #124]	; 0x7c
    negative = true;
 80037d8:	930d      	str	r3, [sp, #52]	; 0x34
  if (!(flags & FLAGS_PRECISION)) {
 80037da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037dc:	055b      	lsls	r3, r3, #21
 80037de:	d571      	bpl.n	80038c4 <_ftoa+0x1e0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80037e0:	2400      	movs	r4, #0
    buf[len++] = '0';
 80037e2:	2230      	movs	r2, #48	; 0x30
 80037e4:	ab10      	add	r3, sp, #64	; 0x40
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80037e6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80037e8:	9408      	str	r4, [sp, #32]
 80037ea:	2909      	cmp	r1, #9
 80037ec:	d907      	bls.n	80037fe <_ftoa+0x11a>
    prec--;
 80037ee:	9920      	ldr	r1, [sp, #128]	; 0x80
    buf[len++] = '0';
 80037f0:	551a      	strb	r2, [r3, r4]
    prec--;
 80037f2:	3901      	subs	r1, #1
 80037f4:	3401      	adds	r4, #1
 80037f6:	9120      	str	r1, [sp, #128]	; 0x80
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80037f8:	2c20      	cmp	r4, #32
 80037fa:	d1f4      	bne.n	80037e6 <_ftoa+0x102>
 80037fc:	9408      	str	r4, [sp, #32]
  int whole = (int)value;
 80037fe:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003800:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8003802:	f7fe fc33 	bl	800206c <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 8003806:	9b20      	ldr	r3, [sp, #128]	; 0x80
  int whole = (int)value;
 8003808:	9007      	str	r0, [sp, #28]
  double tmp = (value - whole) * pow10[prec];
 800380a:	00da      	lsls	r2, r3, #3
 800380c:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <_ftoa+0x310>)
 800380e:	189b      	adds	r3, r3, r2
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	920e      	str	r2, [sp, #56]	; 0x38
 8003816:	930f      	str	r3, [sp, #60]	; 0x3c
 8003818:	f7fe fc5c 	bl	80020d4 <__aeabi_i2d>
 800381c:	0002      	movs	r2, r0
 800381e:	000b      	movs	r3, r1
 8003820:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003822:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8003824:	f7fe f90c 	bl	8001a40 <__aeabi_dsub>
 8003828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800382a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800382c:	f7fd fe88 	bl	8001540 <__aeabi_dmul>
 8003830:	000f      	movs	r7, r1
 8003832:	0006      	movs	r6, r0
  unsigned long frac = (unsigned long)tmp;
 8003834:	f7fc fe62 	bl	80004fc <__aeabi_d2uiz>
 8003838:	0005      	movs	r5, r0
  diff = tmp - frac;
 800383a:	f7fe fc8d 	bl	8002158 <__aeabi_ui2d>
 800383e:	0002      	movs	r2, r0
 8003840:	000b      	movs	r3, r1
 8003842:	0030      	movs	r0, r6
 8003844:	0039      	movs	r1, r7
 8003846:	f7fe f8fb 	bl	8001a40 <__aeabi_dsub>
  if (diff > 0.5) {
 800384a:	2200      	movs	r2, #0
 800384c:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <_ftoa+0x314>)
  diff = tmp - frac;
 800384e:	0006      	movs	r6, r0
 8003850:	000f      	movs	r7, r1
  if (diff > 0.5) {
 8003852:	f7fc fdf5 	bl	8000440 <__aeabi_dcmpgt>
 8003856:	2800      	cmp	r0, #0
 8003858:	d037      	beq.n	80038ca <_ftoa+0x1e6>
    ++frac;
 800385a:	3501      	adds	r5, #1
    if (frac >= pow10[prec]) {
 800385c:	0028      	movs	r0, r5
 800385e:	f7fe fc7b 	bl	8002158 <__aeabi_ui2d>
 8003862:	0002      	movs	r2, r0
 8003864:	000b      	movs	r3, r1
 8003866:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800386a:	f7fc fddf 	bl	800042c <__aeabi_dcmple>
 800386e:	2800      	cmp	r0, #0
 8003870:	d003      	beq.n	800387a <_ftoa+0x196>
      frac = 0;
 8003872:	2500      	movs	r5, #0
      ++whole;
 8003874:	9b07      	ldr	r3, [sp, #28]
 8003876:	3301      	adds	r3, #1
 8003878:	9307      	str	r3, [sp, #28]
  if (prec == 0U) {
 800387a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d152      	bne.n	8003926 <_ftoa+0x242>
    diff = value - (double)whole;
 8003880:	9807      	ldr	r0, [sp, #28]
 8003882:	f7fe fc27 	bl	80020d4 <__aeabi_i2d>
 8003886:	0002      	movs	r2, r0
 8003888:	000b      	movs	r3, r1
 800388a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800388c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800388e:	f7fe f8d7 	bl	8001a40 <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003892:	2200      	movs	r2, #0
 8003894:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <_ftoa+0x314>)
    diff = value - (double)whole;
 8003896:	0004      	movs	r4, r0
 8003898:	000d      	movs	r5, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800389a:	f7fc fdbd 	bl	8000418 <__aeabi_dcmplt>
 800389e:	2800      	cmp	r0, #0
 80038a0:	d007      	beq.n	80038b2 <_ftoa+0x1ce>
 80038a2:	2200      	movs	r2, #0
 80038a4:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <_ftoa+0x314>)
 80038a6:	0020      	movs	r0, r4
 80038a8:	0029      	movs	r1, r5
 80038aa:	f7fc fdc9 	bl	8000440 <__aeabi_dcmpgt>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d004      	beq.n	80038bc <_ftoa+0x1d8>
      ++whole;
 80038b2:	2301      	movs	r3, #1
 80038b4:	9a07      	ldr	r2, [sp, #28]
 80038b6:	4013      	ands	r3, r2
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	9307      	str	r3, [sp, #28]
    buf[len++] = (char)(48 + (whole % 10));
 80038bc:	250a      	movs	r5, #10
 80038be:	e06d      	b.n	800399c <_ftoa+0x2b8>
  bool negative = false;
 80038c0:	900d      	str	r0, [sp, #52]	; 0x34
 80038c2:	e78a      	b.n	80037da <_ftoa+0xf6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80038c4:	2306      	movs	r3, #6
 80038c6:	9320      	str	r3, [sp, #128]	; 0x80
 80038c8:	e78a      	b.n	80037e0 <_ftoa+0xfc>
  else if (diff < 0.5) {
 80038ca:	2200      	movs	r2, #0
 80038cc:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <_ftoa+0x314>)
 80038ce:	0030      	movs	r0, r6
 80038d0:	0039      	movs	r1, r7
 80038d2:	f7fc fda1 	bl	8000418 <__aeabi_dcmplt>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d1cf      	bne.n	800387a <_ftoa+0x196>
  else if ((frac == 0U) || (frac & 1U)) {
 80038da:	2d00      	cmp	r5, #0
 80038dc:	d001      	beq.n	80038e2 <_ftoa+0x1fe>
 80038de:	07eb      	lsls	r3, r5, #31
 80038e0:	d5cb      	bpl.n	800387a <_ftoa+0x196>
    ++frac;
 80038e2:	3501      	adds	r5, #1
 80038e4:	e7c9      	b.n	800387a <_ftoa+0x196>
      --count;
 80038e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
      buf[len++] = (char)(48U + (frac % 10U));
 80038e8:	0028      	movs	r0, r5
      --count;
 80038ea:	3b01      	subs	r3, #1
 80038ec:	9320      	str	r3, [sp, #128]	; 0x80
      buf[len++] = (char)(48U + (frac % 10U));
 80038ee:	0039      	movs	r1, r7
 80038f0:	ab10      	add	r3, sp, #64	; 0x40
 80038f2:	1c66      	adds	r6, r4, #1
 80038f4:	191c      	adds	r4, r3, r4
 80038f6:	f7fc fc89 	bl	800020c <__aeabi_uidivmod>
 80038fa:	3130      	adds	r1, #48	; 0x30
 80038fc:	7021      	strb	r1, [r4, #0]
      if (!(frac /= 10U)) {
 80038fe:	0028      	movs	r0, r5
 8003900:	0039      	movs	r1, r7
 8003902:	f7fc fbfd 	bl	8000100 <__udivsi3>
 8003906:	1e05      	subs	r5, r0, #0
 8003908:	d12f      	bne.n	800396a <_ftoa+0x286>
      buf[len++] = (char)(48U + (frac % 10U));
 800390a:	0034      	movs	r4, r6
      buf[len++] = '0';
 800390c:	2030      	movs	r0, #48	; 0x30
 800390e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003910:	aa10      	add	r2, sp, #64	; 0x40
 8003912:	199b      	adds	r3, r3, r6
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003914:	2c20      	cmp	r4, #32
 8003916:	d009      	beq.n	800392c <_ftoa+0x248>
 8003918:	1c61      	adds	r1, r4, #1
 800391a:	429c      	cmp	r4, r3
 800391c:	d127      	bne.n	800396e <_ftoa+0x28a>
      buf[len++] = '.';
 800391e:	232e      	movs	r3, #46	; 0x2e
 8003920:	9108      	str	r1, [sp, #32]
 8003922:	5513      	strb	r3, [r2, r4]
 8003924:	e7ca      	b.n	80038bc <_ftoa+0x1d8>
      buf[len++] = (char)(48U + (frac % 10U));
 8003926:	270a      	movs	r7, #10
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003928:	2c20      	cmp	r4, #32
 800392a:	d1dc      	bne.n	80038e6 <_ftoa+0x202>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800392c:	2303      	movs	r3, #3
 800392e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003930:	4013      	ands	r3, r2
 8003932:	2b01      	cmp	r3, #1
 8003934:	d13a      	bne.n	80039ac <_ftoa+0x2c8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003938:	2b00      	cmp	r3, #0
 800393a:	d037      	beq.n	80039ac <_ftoa+0x2c8>
 800393c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <_ftoa+0x264>
 8003942:	330c      	adds	r3, #12
 8003944:	421a      	tst	r2, r3
 8003946:	d002      	beq.n	800394e <_ftoa+0x26a>
      width--;
 8003948:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800394a:	3b01      	subs	r3, #1
 800394c:	9321      	str	r3, [sp, #132]	; 0x84
      buf[len++] = '0';
 800394e:	2230      	movs	r2, #48	; 0x30
 8003950:	ab10      	add	r3, sp, #64	; 0x40
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003952:	9921      	ldr	r1, [sp, #132]	; 0x84
 8003954:	42a1      	cmp	r1, r4
 8003956:	d929      	bls.n	80039ac <_ftoa+0x2c8>
 8003958:	2c1f      	cmp	r4, #31
 800395a:	d924      	bls.n	80039a6 <_ftoa+0x2c2>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800395c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800395e:	9401      	str	r4, [sp, #4]
 8003960:	9303      	str	r3, [sp, #12]
 8003962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003964:	9302      	str	r3, [sp, #8]
 8003966:	ab10      	add	r3, sp, #64	; 0x40
 8003968:	e6d1      	b.n	800370e <_ftoa+0x2a>
      buf[len++] = (char)(48U + (frac % 10U));
 800396a:	0034      	movs	r4, r6
 800396c:	e7dc      	b.n	8003928 <_ftoa+0x244>
      buf[len++] = '0';
 800396e:	5510      	strb	r0, [r2, r4]
 8003970:	000c      	movs	r4, r1
 8003972:	e7cf      	b.n	8003914 <_ftoa+0x230>
    buf[len++] = (char)(48 + (whole % 10));
 8003974:	aa10      	add	r2, sp, #64	; 0x40
 8003976:	4694      	mov	ip, r2
 8003978:	9b08      	ldr	r3, [sp, #32]
 800397a:	9807      	ldr	r0, [sp, #28]
 800397c:	1c5c      	adds	r4, r3, #1
 800397e:	0029      	movs	r1, r5
 8003980:	4463      	add	r3, ip
 8003982:	001e      	movs	r6, r3
 8003984:	f7fc fd2c 	bl	80003e0 <__aeabi_idivmod>
 8003988:	3130      	adds	r1, #48	; 0x30
 800398a:	7031      	strb	r1, [r6, #0]
    if (!(whole /= 10)) {
 800398c:	9807      	ldr	r0, [sp, #28]
 800398e:	0029      	movs	r1, r5
 8003990:	f7fc fc40 	bl	8000214 <__divsi3>
 8003994:	9007      	str	r0, [sp, #28]
 8003996:	2800      	cmp	r0, #0
 8003998:	d0c8      	beq.n	800392c <_ftoa+0x248>
    buf[len++] = (char)(48 + (whole % 10));
 800399a:	9408      	str	r4, [sp, #32]
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800399c:	9b08      	ldr	r3, [sp, #32]
 800399e:	2b1f      	cmp	r3, #31
 80039a0:	d9e8      	bls.n	8003974 <_ftoa+0x290>
 80039a2:	001c      	movs	r4, r3
 80039a4:	e7c2      	b.n	800392c <_ftoa+0x248>
      buf[len++] = '0';
 80039a6:	54e2      	strb	r2, [r4, r3]
 80039a8:	3401      	adds	r4, #1
 80039aa:	e7d2      	b.n	8003952 <_ftoa+0x26e>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80039ac:	2c1f      	cmp	r4, #31
 80039ae:	d8d5      	bhi.n	800395c <_ftoa+0x278>
    if (negative) {
 80039b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039b2:	ab10      	add	r3, sp, #64	; 0x40
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	d003      	beq.n	80039c0 <_ftoa+0x2dc>
      buf[len++] = '-';
 80039b8:	222d      	movs	r2, #45	; 0x2d
      buf[len++] = ' ';
 80039ba:	551a      	strb	r2, [r3, r4]
 80039bc:	3401      	adds	r4, #1
 80039be:	e7cd      	b.n	800395c <_ftoa+0x278>
    else if (flags & FLAGS_PLUS) {
 80039c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80039c2:	0752      	lsls	r2, r2, #29
 80039c4:	d501      	bpl.n	80039ca <_ftoa+0x2e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80039c6:	222b      	movs	r2, #43	; 0x2b
 80039c8:	e7f7      	b.n	80039ba <_ftoa+0x2d6>
    else if (flags & FLAGS_SPACE) {
 80039ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80039cc:	0712      	lsls	r2, r2, #28
 80039ce:	d5c5      	bpl.n	800395c <_ftoa+0x278>
      buf[len++] = ' ';
 80039d0:	2220      	movs	r2, #32
 80039d2:	e7f2      	b.n	80039ba <_ftoa+0x2d6>
 80039d4:	08005c5f 	.word	0x08005c5f
 80039d8:	ffefffff 	.word	0xffefffff
 80039dc:	08005c63 	.word	0x08005c63
 80039e0:	7fefffff 	.word	0x7fefffff
 80039e4:	08005c56 	.word	0x08005c56
 80039e8:	08005c5b 	.word	0x08005c5b
 80039ec:	41cdcd65 	.word	0x41cdcd65
 80039f0:	c1cdcd65 	.word	0xc1cdcd65
 80039f4:	08005c68 	.word	0x08005c68
 80039f8:	3fe00000 	.word	0x3fe00000

080039fc <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80039fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fe:	b095      	sub	sp, #84	; 0x54
 8003a00:	930d      	str	r3, [sp, #52]	; 0x34
 8003a02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003a04:	900b      	str	r0, [sp, #44]	; 0x2c
 8003a06:	9309      	str	r3, [sp, #36]	; 0x24
 8003a08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a0a:	910c      	str	r1, [sp, #48]	; 0x30
 8003a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8003a0e:	9210      	str	r2, [sp, #64]	; 0x40
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a18:	f7fc fcf8 	bl	800040c <__aeabi_dcmpeq>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d011      	beq.n	8003a44 <_etoa+0x48>
 8003a20:	2201      	movs	r2, #1
 8003a22:	4bc5      	ldr	r3, [pc, #788]	; (8003d38 <_etoa+0x33c>)
 8003a24:	4252      	negs	r2, r2
 8003a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a2a:	f7fc fd09 	bl	8000440 <__aeabi_dcmpgt>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d108      	bne.n	8003a44 <_etoa+0x48>
 8003a32:	2201      	movs	r2, #1
 8003a34:	4bc1      	ldr	r3, [pc, #772]	; (8003d3c <_etoa+0x340>)
 8003a36:	4252      	negs	r2, r2
 8003a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a3c:	f7fc fcec 	bl	8000418 <__aeabi_dcmplt>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d011      	beq.n	8003a68 <_etoa+0x6c>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003a44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a48:	9304      	str	r3, [sp, #16]
 8003a4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a4e:	9303      	str	r3, [sp, #12]
 8003a50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003a52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a58:	9200      	str	r2, [sp, #0]
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a60:	f7ff fe40 	bl	80036e4 <_ftoa>
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 8003a64:	b015      	add	sp, #84	; 0x54
 8003a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (negative) {
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a70:	f7fc fcd2 	bl	8000418 <__aeabi_dcmplt>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d100      	bne.n	8003a7a <_etoa+0x7e>
 8003a78:	e14f      	b.n	8003d1a <_etoa+0x31e>
    value = -value;
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7e:	0612      	lsls	r2, r2, #24
 8003a80:	9308      	str	r3, [sp, #32]
 8003a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a84:	189d      	adds	r5, r3, r2
  if (!(flags & FLAGS_PRECISION)) {
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	9211      	str	r2, [sp, #68]	; 0x44
 8003a90:	1e13      	subs	r3, r2, #0
 8003a92:	d101      	bne.n	8003a98 <_etoa+0x9c>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003a94:	3306      	adds	r3, #6
 8003a96:	931c      	str	r3, [sp, #112]	; 0x70
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003a98:	4ba9      	ldr	r3, [pc, #676]	; (8003d40 <_etoa+0x344>)
 8003a9a:	0068      	lsls	r0, r5, #1
 8003a9c:	0d40      	lsrs	r0, r0, #21
 8003a9e:	18c0      	adds	r0, r0, r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003aa0:	f7fe fb18 	bl	80020d4 <__aeabi_i2d>
 8003aa4:	4aa7      	ldr	r2, [pc, #668]	; (8003d44 <_etoa+0x348>)
 8003aa6:	4ba8      	ldr	r3, [pc, #672]	; (8003d48 <_etoa+0x34c>)
 8003aa8:	f7fd fd4a 	bl	8001540 <__aeabi_dmul>
 8003aac:	4aa7      	ldr	r2, [pc, #668]	; (8003d4c <_etoa+0x350>)
 8003aae:	4ba8      	ldr	r3, [pc, #672]	; (8003d50 <_etoa+0x354>)
 8003ab0:	f7fc fe02 	bl	80006b8 <__aeabi_dadd>
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003ab4:	032b      	lsls	r3, r5, #12
 8003ab6:	4aa7      	ldr	r2, [pc, #668]	; (8003d54 <_etoa+0x358>)
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003ab8:	9c08      	ldr	r4, [sp, #32]
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003aba:	0b1b      	lsrs	r3, r3, #12
 8003abc:	431a      	orrs	r2, r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003abe:	0006      	movs	r6, r0
 8003ac0:	000f      	movs	r7, r1
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003ac2:	0020      	movs	r0, r4
 8003ac4:	0011      	movs	r1, r2
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003ac6:	4ba4      	ldr	r3, [pc, #656]	; (8003d58 <_etoa+0x35c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f7fd ffb9 	bl	8001a40 <__aeabi_dsub>
 8003ace:	4aa3      	ldr	r2, [pc, #652]	; (8003d5c <_etoa+0x360>)
 8003ad0:	4ba3      	ldr	r3, [pc, #652]	; (8003d60 <_etoa+0x364>)
 8003ad2:	f7fd fd35 	bl	8001540 <__aeabi_dmul>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	000b      	movs	r3, r1
 8003ada:	0030      	movs	r0, r6
 8003adc:	0039      	movs	r1, r7
 8003ade:	f7fc fdeb 	bl	80006b8 <__aeabi_dadd>
 8003ae2:	f7fe fac3 	bl	800206c <__aeabi_d2iz>
 8003ae6:	9007      	str	r0, [sp, #28]
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003ae8:	f7fe faf4 	bl	80020d4 <__aeabi_i2d>
 8003aec:	4a9d      	ldr	r2, [pc, #628]	; (8003d64 <_etoa+0x368>)
 8003aee:	4b9e      	ldr	r3, [pc, #632]	; (8003d68 <_etoa+0x36c>)
 8003af0:	0006      	movs	r6, r0
 8003af2:	000f      	movs	r7, r1
 8003af4:	f7fd fd24 	bl	8001540 <__aeabi_dmul>
 8003af8:	2200      	movs	r2, #0
 8003afa:	4b9c      	ldr	r3, [pc, #624]	; (8003d6c <_etoa+0x370>)
 8003afc:	f7fc fddc 	bl	80006b8 <__aeabi_dadd>
 8003b00:	f7fe fab4 	bl	800206c <__aeabi_d2iz>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003b04:	4a9a      	ldr	r2, [pc, #616]	; (8003d70 <_etoa+0x374>)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003b06:	0004      	movs	r4, r0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003b08:	4b9a      	ldr	r3, [pc, #616]	; (8003d74 <_etoa+0x378>)
 8003b0a:	0030      	movs	r0, r6
 8003b0c:	0039      	movs	r1, r7
 8003b0e:	f7fd fd17 	bl	8001540 <__aeabi_dmul>
 8003b12:	0006      	movs	r6, r0
 8003b14:	0020      	movs	r0, r4
 8003b16:	000f      	movs	r7, r1
 8003b18:	f7fe fadc 	bl	80020d4 <__aeabi_i2d>
 8003b1c:	4a96      	ldr	r2, [pc, #600]	; (8003d78 <_etoa+0x37c>)
 8003b1e:	4b97      	ldr	r3, [pc, #604]	; (8003d7c <_etoa+0x380>)
 8003b20:	f7fd fd0e 	bl	8001540 <__aeabi_dmul>
 8003b24:	0002      	movs	r2, r0
 8003b26:	000b      	movs	r3, r1
 8003b28:	0030      	movs	r0, r6
 8003b2a:	0039      	movs	r1, r7
 8003b2c:	f7fd ff88 	bl	8001a40 <__aeabi_dsub>
  const double z2 = z * z;
 8003b30:	0002      	movs	r2, r0
 8003b32:	000b      	movs	r3, r1
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003b34:	900e      	str	r0, [sp, #56]	; 0x38
 8003b36:	910f      	str	r1, [sp, #60]	; 0x3c
  const double z2 = z * z;
 8003b38:	f7fd fd02 	bl	8001540 <__aeabi_dmul>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003b3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  const double z2 = z * z;
 8003b40:	0006      	movs	r6, r0
 8003b42:	000f      	movs	r7, r1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003b44:	0010      	movs	r0, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	f7fc fdb6 	bl	80006b8 <__aeabi_dadd>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	9012      	str	r0, [sp, #72]	; 0x48
 8003b50:	9113      	str	r1, [sp, #76]	; 0x4c
 8003b52:	4b8b      	ldr	r3, [pc, #556]	; (8003d80 <_etoa+0x384>)
 8003b54:	0030      	movs	r0, r6
 8003b56:	0039      	movs	r1, r7
 8003b58:	f7fd f8be 	bl	8000cd8 <__aeabi_ddiv>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4b89      	ldr	r3, [pc, #548]	; (8003d84 <_etoa+0x388>)
 8003b60:	f7fc fdaa 	bl	80006b8 <__aeabi_dadd>
 8003b64:	0002      	movs	r2, r0
 8003b66:	000b      	movs	r3, r1
 8003b68:	0030      	movs	r0, r6
 8003b6a:	0039      	movs	r1, r7
 8003b6c:	f7fd f8b4 	bl	8000cd8 <__aeabi_ddiv>
 8003b70:	2200      	movs	r2, #0
 8003b72:	4b85      	ldr	r3, [pc, #532]	; (8003d88 <_etoa+0x38c>)
 8003b74:	f7fc fda0 	bl	80006b8 <__aeabi_dadd>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	000b      	movs	r3, r1
 8003b7c:	0030      	movs	r0, r6
 8003b7e:	0039      	movs	r1, r7
 8003b80:	f7fd f8aa 	bl	8000cd8 <__aeabi_ddiv>
 8003b84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b88:	000f      	movs	r7, r1
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	0006      	movs	r6, r0
 8003b8e:	05c9      	lsls	r1, r1, #23
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7fd ff55 	bl	8001a40 <__aeabi_dsub>
 8003b96:	0002      	movs	r2, r0
 8003b98:	000b      	movs	r3, r1
 8003b9a:	0030      	movs	r0, r6
 8003b9c:	0039      	movs	r1, r7
 8003b9e:	f7fc fd8b 	bl	80006b8 <__aeabi_dadd>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	000b      	movs	r3, r1
 8003ba6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003ba8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003baa:	f7fd f895 	bl	8000cd8 <__aeabi_ddiv>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4b68      	ldr	r3, [pc, #416]	; (8003d54 <_etoa+0x358>)
 8003bb2:	f7fc fd81 	bl	80006b8 <__aeabi_dadd>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003bb6:	4b75      	ldr	r3, [pc, #468]	; (8003d8c <_etoa+0x390>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	18e4      	adds	r4, r4, r3
 8003bbc:	0523      	lsls	r3, r4, #20
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003bbe:	f7fd fcbf 	bl	8001540 <__aeabi_dmul>
 8003bc2:	900e      	str	r0, [sp, #56]	; 0x38
 8003bc4:	910f      	str	r1, [sp, #60]	; 0x3c
  if (value < conv.F) {
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	000b      	movs	r3, r1
 8003bca:	9808      	ldr	r0, [sp, #32]
 8003bcc:	0029      	movs	r1, r5
 8003bce:	f7fc fc23 	bl	8000418 <__aeabi_dcmplt>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d00a      	beq.n	8003bec <_etoa+0x1f0>
    conv.F /= 10;
 8003bd6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003bd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    expval--;
 8003bda:	9b07      	ldr	r3, [sp, #28]
    conv.F /= 10;
 8003bdc:	2200      	movs	r2, #0
    expval--;
 8003bde:	3b01      	subs	r3, #1
 8003be0:	9307      	str	r3, [sp, #28]
    conv.F /= 10;
 8003be2:	4b68      	ldr	r3, [pc, #416]	; (8003d84 <_etoa+0x388>)
 8003be4:	f7fd f878 	bl	8000cd8 <__aeabi_ddiv>
 8003be8:	900e      	str	r0, [sp, #56]	; 0x38
 8003bea:	910f      	str	r1, [sp, #60]	; 0x3c
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003bec:	24c6      	movs	r4, #198	; 0xc6
 8003bee:	9b07      	ldr	r3, [sp, #28]
 8003bf0:	3363      	adds	r3, #99	; 0x63
 8003bf2:	429c      	cmp	r4, r3
 8003bf4:	41a4      	sbcs	r4, r4
  if (flags & FLAGS_ADAPT_EXP) {
 8003bf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003bf8:	4264      	negs	r4, r4
 8003bfa:	3404      	adds	r4, #4
  if (flags & FLAGS_ADAPT_EXP) {
 8003bfc:	051b      	lsls	r3, r3, #20
 8003bfe:	d520      	bpl.n	8003c42 <_etoa+0x246>
    if ((value >= 1e-4) && (value < 1e6)) {
 8003c00:	4a63      	ldr	r2, [pc, #396]	; (8003d90 <_etoa+0x394>)
 8003c02:	4b64      	ldr	r3, [pc, #400]	; (8003d94 <_etoa+0x398>)
 8003c04:	9808      	ldr	r0, [sp, #32]
 8003c06:	0029      	movs	r1, r5
 8003c08:	f7fc fc24 	bl	8000454 <__aeabi_dcmpge>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d100      	bne.n	8003c12 <_etoa+0x216>
 8003c10:	e088      	b.n	8003d24 <_etoa+0x328>
 8003c12:	2200      	movs	r2, #0
 8003c14:	4b60      	ldr	r3, [pc, #384]	; (8003d98 <_etoa+0x39c>)
 8003c16:	9808      	ldr	r0, [sp, #32]
 8003c18:	0029      	movs	r1, r5
 8003c1a:	f7fc fbfd 	bl	8000418 <__aeabi_dcmplt>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d100      	bne.n	8003c24 <_etoa+0x228>
 8003c22:	e07f      	b.n	8003d24 <_etoa+0x328>
      if ((int)prec > expval) {
 8003c24:	9a07      	ldr	r2, [sp, #28]
 8003c26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003c28:	2300      	movs	r3, #0
 8003c2a:	428a      	cmp	r2, r1
 8003c2c:	da01      	bge.n	8003c32 <_etoa+0x236>
        prec = (unsigned)((int)prec - expval - 1);
 8003c2e:	1a8b      	subs	r3, r1, r2
 8003c30:	3b01      	subs	r3, #1
 8003c32:	931c      	str	r3, [sp, #112]	; 0x70
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003c34:	2380      	movs	r3, #128	; 0x80
      minwidth = 0U;
 8003c36:	2400      	movs	r4, #0
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003c38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	921e      	str	r2, [sp, #120]	; 0x78
      expval   = 0;
 8003c40:	9407      	str	r4, [sp, #28]
  if (width > minwidth) {
 8003c42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fwidth = 0U;
 8003c44:	2600      	movs	r6, #0
  if (width > minwidth) {
 8003c46:	42a3      	cmp	r3, r4
 8003c48:	d900      	bls.n	8003c4c <_etoa+0x250>
    fwidth -= minwidth;
 8003c4a:	1b1e      	subs	r6, r3, r4
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003c4c:	2702      	movs	r7, #2
 8003c4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c50:	401f      	ands	r7, r3
 8003c52:	d003      	beq.n	8003c5c <_etoa+0x260>
    fwidth = 0U;
 8003c54:	4263      	negs	r3, r4
 8003c56:	4163      	adcs	r3, r4
 8003c58:	425b      	negs	r3, r3
 8003c5a:	401e      	ands	r6, r3
  if (expval) {
 8003c5c:	9b07      	ldr	r3, [sp, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <_etoa+0x276>
    value /= conv.F;
 8003c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c66:	9808      	ldr	r0, [sp, #32]
 8003c68:	0029      	movs	r1, r5
 8003c6a:	f7fd f835 	bl	8000cd8 <__aeabi_ddiv>
 8003c6e:	000d      	movs	r5, r1
 8003c70:	9008      	str	r0, [sp, #32]
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2300      	movs	r3, #0
 8003c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003c7a:	f7fc fbcd 	bl	8000418 <__aeabi_dcmplt>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d003      	beq.n	8003c8a <_etoa+0x28e>
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	0609      	lsls	r1, r1, #24
 8003c86:	186b      	adds	r3, r5, r1
 8003c88:	001d      	movs	r5, r3
 8003c8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003c8c:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <_etoa+0x3a0>)
 8003c8e:	9603      	str	r6, [sp, #12]
 8003c90:	4013      	ands	r3, r2
 8003c92:	9304      	str	r3, [sp, #16]
 8003c94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003c96:	9a08      	ldr	r2, [sp, #32]
 8003c98:	9302      	str	r3, [sp, #8]
 8003c9a:	002b      	movs	r3, r5
 8003c9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c9e:	9200      	str	r2, [sp, #0]
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ca8:	f7ff fd1c 	bl	80036e4 <_ftoa>
  if (minwidth) {
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	d100      	bne.n	8003cb2 <_etoa+0x2b6>
 8003cb0:	e6d8      	b.n	8003a64 <_etoa+0x68>
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003cb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cb4:	2645      	movs	r6, #69	; 0x45
 8003cb6:	069b      	lsls	r3, r3, #26
 8003cb8:	d400      	bmi.n	8003cbc <_etoa+0x2c0>
 8003cba:	3620      	adds	r6, #32
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	1c45      	adds	r5, r0, #1
 8003cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cc2:	0030      	movs	r0, r6
 8003cc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cc6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003cc8:	47b0      	blx	r6
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003cca:	2305      	movs	r3, #5
 8003ccc:	9305      	str	r3, [sp, #20]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	330a      	adds	r3, #10
 8003cd4:	9302      	str	r3, [sp, #8]
 8003cd6:	9b07      	ldr	r3, [sp, #28]
 8003cd8:	3c01      	subs	r4, #1
 8003cda:	0fdb      	lsrs	r3, r3, #31
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	9b07      	ldr	r3, [sp, #28]
 8003ce0:	9404      	str	r4, [sp, #16]
 8003ce2:	17da      	asrs	r2, r3, #31
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	4053      	eors	r3, r2
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	002a      	movs	r2, r5
 8003cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cf0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003cf2:	f7ff fc4b 	bl	800358c <_ntoa_long>
    if (flags & FLAGS_LEFT) {
 8003cf6:	2f00      	cmp	r7, #0
 8003cf8:	d100      	bne.n	8003cfc <_etoa+0x300>
 8003cfa:	e6b3      	b.n	8003a64 <_etoa+0x68>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cfe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003d00:	1ac3      	subs	r3, r0, r3
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d800      	bhi.n	8003d08 <_etoa+0x30c>
 8003d06:	e6ad      	b.n	8003a64 <_etoa+0x68>
 8003d08:	1c44      	adds	r4, r0, #1
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d0e:	2020      	movs	r0, #32
 8003d10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003d14:	47a8      	blx	r5
 8003d16:	0020      	movs	r0, r4
 8003d18:	e7f0      	b.n	8003cfc <_etoa+0x300>
  if (negative) {
 8003d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1e:	9208      	str	r2, [sp, #32]
 8003d20:	001d      	movs	r5, r3
 8003d22:	e6b0      	b.n	8003a86 <_etoa+0x8a>
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003d24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d08b      	beq.n	8003c42 <_etoa+0x246>
        --prec;
 8003d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	4193      	sbcs	r3, r2
 8003d30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	931c      	str	r3, [sp, #112]	; 0x70
 8003d36:	e784      	b.n	8003c42 <_etoa+0x246>
 8003d38:	7fefffff 	.word	0x7fefffff
 8003d3c:	ffefffff 	.word	0xffefffff
 8003d40:	fffffc01 	.word	0xfffffc01
 8003d44:	509f79fb 	.word	0x509f79fb
 8003d48:	3fd34413 	.word	0x3fd34413
 8003d4c:	8b60c8b3 	.word	0x8b60c8b3
 8003d50:	3fc68a28 	.word	0x3fc68a28
 8003d54:	3ff00000 	.word	0x3ff00000
 8003d58:	3ff80000 	.word	0x3ff80000
 8003d5c:	636f4361 	.word	0x636f4361
 8003d60:	3fd287a7 	.word	0x3fd287a7
 8003d64:	0979a371 	.word	0x0979a371
 8003d68:	400a934f 	.word	0x400a934f
 8003d6c:	3fe00000 	.word	0x3fe00000
 8003d70:	bbb55516 	.word	0xbbb55516
 8003d74:	40026bb1 	.word	0x40026bb1
 8003d78:	fefa39ef 	.word	0xfefa39ef
 8003d7c:	3fe62e42 	.word	0x3fe62e42
 8003d80:	402c0000 	.word	0x402c0000
 8003d84:	40240000 	.word	0x40240000
 8003d88:	40180000 	.word	0x40180000
 8003d8c:	000003ff 	.word	0x000003ff
 8003d90:	eb1c432d 	.word	0xeb1c432d
 8003d94:	3f1a36e2 	.word	0x3f1a36e2
 8003d98:	412e8480 	.word	0x412e8480
 8003d9c:	fffff7ff 	.word	0xfffff7ff

08003da0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	b099      	sub	sp, #100	; 0x64
 8003da4:	900c      	str	r0, [sp, #48]	; 0x30
 8003da6:	910d      	str	r1, [sp, #52]	; 0x34
 8003da8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003daa:	001e      	movs	r6, r3
 8003dac:	9d1e      	ldr	r5, [sp, #120]	; 0x78
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 8003dae:	2900      	cmp	r1, #0
 8003db0:	d101      	bne.n	8003db6 <_vsnprintf+0x16>
    // use null output function
    out = _out_null;
 8003db2:	4bab      	ldr	r3, [pc, #684]	; (8004060 <_vsnprintf+0x2c0>)
 8003db4:	930c      	str	r3, [sp, #48]	; 0x30
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003db6:	2700      	movs	r7, #0
  while (*format)
 8003db8:	7830      	ldrb	r0, [r6, #0]
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d10c      	bne.n	8003dd8 <_vsnprintf+0x38>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dc0:	003a      	movs	r2, r7
 8003dc2:	429f      	cmp	r7, r3
 8003dc4:	d300      	bcc.n	8003dc8 <_vsnprintf+0x28>
 8003dc6:	1e5a      	subs	r2, r3, #1
 8003dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003dcc:	2000      	movs	r0, #0
 8003dce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003dd0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 8003dd2:	0038      	movs	r0, r7
 8003dd4:	b019      	add	sp, #100	; 0x64
 8003dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*format != '%') {
 8003dd8:	2825      	cmp	r0, #37	; 0x25
 8003dda:	d008      	beq.n	8003dee <_vsnprintf+0x4e>
        out(*format, buffer, idx++, maxlen);
 8003ddc:	1c7c      	adds	r4, r7, #1
 8003dde:	003a      	movs	r2, r7
 8003de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003de2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003de4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003de6:	47b8      	blx	r7
        format++;
 8003de8:	3601      	adds	r6, #1
        out(*format, buffer, idx++, maxlen);
 8003dea:	0027      	movs	r7, r4
        break;
 8003dec:	e7e4      	b.n	8003db8 <_vsnprintf+0x18>
    flags = 0U;
 8003dee:	2400      	movs	r4, #0
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003df0:	2101      	movs	r1, #1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003df2:	2008      	movs	r0, #8
 8003df4:	1cb2      	adds	r2, r6, #2
 8003df6:	1e56      	subs	r6, r2, #1
      switch (*format) {
 8003df8:	7833      	ldrb	r3, [r6, #0]
 8003dfa:	2b2b      	cmp	r3, #43	; 0x2b
 8003dfc:	d016      	beq.n	8003e2c <_vsnprintf+0x8c>
 8003dfe:	d80b      	bhi.n	8003e18 <_vsnprintf+0x78>
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d015      	beq.n	8003e30 <_vsnprintf+0x90>
 8003e04:	2b23      	cmp	r3, #35	; 0x23
 8003e06:	d015      	beq.n	8003e34 <_vsnprintf+0x94>
    if (_is_digit(*format)) {
 8003e08:	001a      	movs	r2, r3
 8003e0a:	3a30      	subs	r2, #48	; 0x30
 8003e0c:	2a09      	cmp	r2, #9
 8003e0e:	d862      	bhi.n	8003ed6 <_vsnprintf+0x136>
 8003e10:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003e12:	210a      	movs	r1, #10
 8003e14:	9310      	str	r3, [sp, #64]	; 0x40
 8003e16:	e015      	b.n	8003e44 <_vsnprintf+0xa4>
      switch (*format) {
 8003e18:	2b2d      	cmp	r3, #45	; 0x2d
 8003e1a:	d004      	beq.n	8003e26 <_vsnprintf+0x86>
 8003e1c:	2b30      	cmp	r3, #48	; 0x30
 8003e1e:	d1f3      	bne.n	8003e08 <_vsnprintf+0x68>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003e20:	430c      	orrs	r4, r1
 8003e22:	3201      	adds	r2, #1
 8003e24:	e7e7      	b.n	8003df6 <_vsnprintf+0x56>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003e26:	2302      	movs	r3, #2
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003e28:	431c      	orrs	r4, r3
 8003e2a:	e7fa      	b.n	8003e22 <_vsnprintf+0x82>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	e7fb      	b.n	8003e28 <_vsnprintf+0x88>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003e30:	4304      	orrs	r4, r0
 8003e32:	e7f6      	b.n	8003e22 <_vsnprintf+0x82>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003e34:	2310      	movs	r3, #16
 8003e36:	e7f7      	b.n	8003e28 <_vsnprintf+0x88>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e3a:	3601      	adds	r6, #1
 8003e3c:	434b      	muls	r3, r1
 8003e3e:	3b30      	subs	r3, #48	; 0x30
 8003e40:	18d3      	adds	r3, r2, r3
 8003e42:	9310      	str	r3, [sp, #64]	; 0x40
  while (_is_digit(**str)) {
 8003e44:	7832      	ldrb	r2, [r6, #0]
 8003e46:	0013      	movs	r3, r2
 8003e48:	3b30      	subs	r3, #48	; 0x30
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	d9f4      	bls.n	8003e38 <_vsnprintf+0x98>
    precision = 0U;
 8003e4e:	2200      	movs	r2, #0
    if (*format == '.') {
 8003e50:	7833      	ldrb	r3, [r6, #0]
    precision = 0U;
 8003e52:	920a      	str	r2, [sp, #40]	; 0x28
    if (*format == '.') {
 8003e54:	2b2e      	cmp	r3, #46	; 0x2e
 8003e56:	d10f      	bne.n	8003e78 <_vsnprintf+0xd8>
      if (_is_digit(*format)) {
 8003e58:	7872      	ldrb	r2, [r6, #1]
      flags |= FLAGS_PRECISION;
 8003e5a:	2380      	movs	r3, #128	; 0x80
      if (_is_digit(*format)) {
 8003e5c:	0011      	movs	r1, r2
      flags |= FLAGS_PRECISION;
 8003e5e:	00db      	lsls	r3, r3, #3
      if (_is_digit(*format)) {
 8003e60:	3930      	subs	r1, #48	; 0x30
      flags |= FLAGS_PRECISION;
 8003e62:	431c      	orrs	r4, r3
      format++;
 8003e64:	1c73      	adds	r3, r6, #1
      if (_is_digit(*format)) {
 8003e66:	2909      	cmp	r1, #9
 8003e68:	d84d      	bhi.n	8003f06 <_vsnprintf+0x166>
 8003e6a:	001e      	movs	r6, r3
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003e6c:	210a      	movs	r1, #10
  while (_is_digit(**str)) {
 8003e6e:	7832      	ldrb	r2, [r6, #0]
 8003e70:	0013      	movs	r3, r2
 8003e72:	3b30      	subs	r3, #48	; 0x30
 8003e74:	2b09      	cmp	r3, #9
 8003e76:	d93f      	bls.n	8003ef8 <_vsnprintf+0x158>
    switch (*format) {
 8003e78:	7833      	ldrb	r3, [r6, #0]
 8003e7a:	2b6c      	cmp	r3, #108	; 0x6c
 8003e7c:	d058      	beq.n	8003f30 <_vsnprintf+0x190>
 8003e7e:	d850      	bhi.n	8003f22 <_vsnprintf+0x182>
 8003e80:	2b68      	cmp	r3, #104	; 0x68
 8003e82:	d05d      	beq.n	8003f40 <_vsnprintf+0x1a0>
 8003e84:	2b6a      	cmp	r3, #106	; 0x6a
 8003e86:	d064      	beq.n	8003f52 <_vsnprintf+0x1b2>
    switch (*format) {
 8003e88:	7830      	ldrb	r0, [r6, #0]
 8003e8a:	2865      	cmp	r0, #101	; 0x65
 8003e8c:	d100      	bne.n	8003e90 <_vsnprintf+0xf0>
 8003e8e:	e156      	b.n	800413e <_vsnprintf+0x39e>
 8003e90:	d900      	bls.n	8003e94 <_vsnprintf+0xf4>
 8003e92:	e0af      	b.n	8003ff4 <_vsnprintf+0x254>
 8003e94:	2847      	cmp	r0, #71	; 0x47
 8003e96:	d100      	bne.n	8003e9a <_vsnprintf+0xfa>
 8003e98:	e151      	b.n	800413e <_vsnprintf+0x39e>
 8003e9a:	d85d      	bhi.n	8003f58 <_vsnprintf+0x1b8>
 8003e9c:	2845      	cmp	r0, #69	; 0x45
 8003e9e:	d100      	bne.n	8003ea2 <_vsnprintf+0x102>
 8003ea0:	e14d      	b.n	800413e <_vsnprintf+0x39e>
 8003ea2:	d99b      	bls.n	8003ddc <_vsnprintf+0x3c>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003ea4:	2846      	cmp	r0, #70	; 0x46
 8003ea6:	d101      	bne.n	8003eac <_vsnprintf+0x10c>
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	431c      	orrs	r4, r3
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003eac:	2207      	movs	r2, #7
 8003eae:	1deb      	adds	r3, r5, #7
 8003eb0:	4393      	bics	r3, r2
 8003eb2:	001d      	movs	r5, r3
 8003eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003eb6:	9404      	str	r4, [sp, #16]
 8003eb8:	9203      	str	r2, [sp, #12]
 8003eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ebc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ebe:	9202      	str	r2, [sp, #8]
 8003ec0:	685c      	ldr	r4, [r3, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	003a      	movs	r2, r7
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	9401      	str	r4, [sp, #4]
 8003eca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ece:	3508      	adds	r5, #8
 8003ed0:	f7ff fc08 	bl	80036e4 <_ftoa>
 8003ed4:	e08c      	b.n	8003ff0 <_vsnprintf+0x250>
    width = 0U;
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	9210      	str	r2, [sp, #64]	; 0x40
    else if (*format == '*') {
 8003eda:	2b2a      	cmp	r3, #42	; 0x2a
 8003edc:	d1b7      	bne.n	8003e4e <_vsnprintf+0xae>
      const int w = va_arg(va, int);
 8003ede:	682a      	ldr	r2, [r5, #0]
 8003ee0:	1d2b      	adds	r3, r5, #4
 8003ee2:	9210      	str	r2, [sp, #64]	; 0x40
      if (w < 0) {
 8003ee4:	2a00      	cmp	r2, #0
 8003ee6:	da04      	bge.n	8003ef2 <_vsnprintf+0x152>
        flags |= FLAGS_LEFT;    // reverse padding
 8003ee8:	2202      	movs	r2, #2
 8003eea:	4314      	orrs	r4, r2
        width = (unsigned int)-w;
 8003eec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003eee:	4252      	negs	r2, r2
 8003ef0:	9210      	str	r2, [sp, #64]	; 0x40
      format++;
 8003ef2:	3601      	adds	r6, #1
      const int w = va_arg(va, int);
 8003ef4:	001d      	movs	r5, r3
 8003ef6:	e7aa      	b.n	8003e4e <_vsnprintf+0xae>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003efa:	3601      	adds	r6, #1
 8003efc:	434b      	muls	r3, r1
 8003efe:	3b30      	subs	r3, #48	; 0x30
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	930a      	str	r3, [sp, #40]	; 0x28
 8003f04:	e7b3      	b.n	8003e6e <_vsnprintf+0xce>
      else if (*format == '*') {
 8003f06:	2a2a      	cmp	r2, #42	; 0x2a
 8003f08:	d109      	bne.n	8003f1e <_vsnprintf+0x17e>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003f0a:	682b      	ldr	r3, [r5, #0]
        format++;
 8003f0c:	3602      	adds	r6, #2
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f10:	43db      	mvns	r3, r3
 8003f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f14:	17db      	asrs	r3, r3, #31
 8003f16:	401a      	ands	r2, r3
 8003f18:	920a      	str	r2, [sp, #40]	; 0x28
        const int prec = (int)va_arg(va, int);
 8003f1a:	3504      	adds	r5, #4
 8003f1c:	e7ac      	b.n	8003e78 <_vsnprintf+0xd8>
      format++;
 8003f1e:	001e      	movs	r6, r3
 8003f20:	e7aa      	b.n	8003e78 <_vsnprintf+0xd8>
    switch (*format) {
 8003f22:	2b74      	cmp	r3, #116	; 0x74
 8003f24:	d001      	beq.n	8003f2a <_vsnprintf+0x18a>
 8003f26:	2b7a      	cmp	r3, #122	; 0x7a
 8003f28:	d1ae      	bne.n	8003e88 <_vsnprintf+0xe8>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	e00b      	b.n	8003f48 <_vsnprintf+0x1a8>
        if (*format == 'l') {
 8003f30:	7873      	ldrb	r3, [r6, #1]
 8003f32:	2b6c      	cmp	r3, #108	; 0x6c
 8003f34:	d1f9      	bne.n	8003f2a <_vsnprintf+0x18a>
          flags |= FLAGS_LONG_LONG;
 8003f36:	23c0      	movs	r3, #192	; 0xc0
 8003f38:	009b      	lsls	r3, r3, #2
          flags |= FLAGS_CHAR;
 8003f3a:	431c      	orrs	r4, r3
          format++;
 8003f3c:	3602      	adds	r6, #2
 8003f3e:	e7a3      	b.n	8003e88 <_vsnprintf+0xe8>
        if (*format == 'h') {
 8003f40:	7873      	ldrb	r3, [r6, #1]
 8003f42:	2b68      	cmp	r3, #104	; 0x68
 8003f44:	d003      	beq.n	8003f4e <_vsnprintf+0x1ae>
        flags |= FLAGS_SHORT;
 8003f46:	2380      	movs	r3, #128	; 0x80
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003f48:	431c      	orrs	r4, r3
        format++;
 8003f4a:	3601      	adds	r6, #1
        break;
 8003f4c:	e79c      	b.n	8003e88 <_vsnprintf+0xe8>
          flags |= FLAGS_CHAR;
 8003f4e:	23c0      	movs	r3, #192	; 0xc0
 8003f50:	e7f3      	b.n	8003f3a <_vsnprintf+0x19a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	e7f7      	b.n	8003f48 <_vsnprintf+0x1a8>
    switch (*format) {
 8003f58:	2862      	cmp	r0, #98	; 0x62
 8003f5a:	d100      	bne.n	8003f5e <_vsnprintf+0x1be>
 8003f5c:	e1b1      	b.n	80042c2 <_vsnprintf+0x522>
 8003f5e:	d806      	bhi.n	8003f6e <_vsnprintf+0x1ce>
 8003f60:	2858      	cmp	r0, #88	; 0x58
 8003f62:	d000      	beq.n	8003f66 <_vsnprintf+0x1c6>
 8003f64:	e73a      	b.n	8003ddc <_vsnprintf+0x3c>
          flags |= FLAGS_UPPERCASE;
 8003f66:	2320      	movs	r3, #32
          base = 16U;
 8003f68:	2210      	movs	r2, #16
          flags |= FLAGS_UPPERCASE;
 8003f6a:	431c      	orrs	r4, r3
 8003f6c:	e075      	b.n	800405a <_vsnprintf+0x2ba>
    switch (*format) {
 8003f6e:	2863      	cmp	r0, #99	; 0x63
 8003f70:	d100      	bne.n	8003f74 <_vsnprintf+0x1d4>
 8003f72:	e107      	b.n	8004184 <_vsnprintf+0x3e4>
 8003f74:	2864      	cmp	r0, #100	; 0x64
 8003f76:	d000      	beq.n	8003f7a <_vsnprintf+0x1da>
 8003f78:	e730      	b.n	8003ddc <_vsnprintf+0x3c>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003f7a:	2310      	movs	r3, #16
          base = 10U;
 8003f7c:	220a      	movs	r2, #10
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003f7e:	439c      	bics	r4, r3
        if ((*format != 'i') && (*format != 'd')) {
 8003f80:	2869      	cmp	r0, #105	; 0x69
 8003f82:	d001      	beq.n	8003f88 <_vsnprintf+0x1e8>
 8003f84:	2864      	cmp	r0, #100	; 0x64
 8003f86:	d168      	bne.n	800405a <_vsnprintf+0x2ba>
        if (flags & FLAGS_PRECISION) {
 8003f88:	0563      	lsls	r3, r4, #21
 8003f8a:	d501      	bpl.n	8003f90 <_vsnprintf+0x1f0>
          flags &= ~FLAGS_ZEROPAD;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	439c      	bics	r4, r3
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	009b      	lsls	r3, r3, #2
        if ((*format == 'i') || (*format == 'd')) {
 8003f94:	2869      	cmp	r0, #105	; 0x69
 8003f96:	d002      	beq.n	8003f9e <_vsnprintf+0x1fe>
 8003f98:	2864      	cmp	r0, #100	; 0x64
 8003f9a:	d000      	beq.n	8003f9e <_vsnprintf+0x1fe>
 8003f9c:	e09a      	b.n	80040d4 <_vsnprintf+0x334>
          if (flags & FLAGS_LONG_LONG) {
 8003f9e:	421c      	tst	r4, r3
 8003fa0:	d060      	beq.n	8004064 <_vsnprintf+0x2c4>
            const long long value = va_arg(va, long long);
 8003fa2:	2107      	movs	r1, #7
 8003fa4:	1deb      	adds	r3, r5, #7
 8003fa6:	438b      	bics	r3, r1
 8003fa8:	6819      	ldr	r1, [r3, #0]
 8003faa:	001d      	movs	r5, r3
 8003fac:	685b      	ldr	r3, [r3, #4]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003fae:	9204      	str	r2, [sp, #16]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	9205      	str	r2, [sp, #20]
 8003fb4:	0fda      	lsrs	r2, r3, #31
 8003fb6:	9202      	str	r2, [sp, #8]
 8003fb8:	17da      	asrs	r2, r3, #31
 8003fba:	920f      	str	r2, [sp, #60]	; 0x3c
 8003fbc:	920e      	str	r2, [sp, #56]	; 0x38
 8003fbe:	404a      	eors	r2, r1
 8003fc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003fc2:	9214      	str	r2, [sp, #80]	; 0x50
 8003fc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003fc6:	9007      	str	r0, [sp, #28]
 8003fc8:	405a      	eors	r2, r3
 8003fca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003fcc:	9215      	str	r2, [sp, #84]	; 0x54
 8003fce:	9006      	str	r0, [sp, #24]
 8003fd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003fd6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fd8:	1a12      	subs	r2, r2, r0
 8003fda:	418b      	sbcs	r3, r1
 8003fdc:	9200      	str	r2, [sp, #0]
 8003fde:	9301      	str	r3, [sp, #4]
            const long long value = va_arg(va, long long);
 8003fe0:	3508      	adds	r5, #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003fe2:	9408      	str	r4, [sp, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fe6:	003a      	movs	r2, r7
 8003fe8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003fea:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003fec:	f7ff fb18 	bl	8003620 <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003ff0:	0007      	movs	r7, r0
 8003ff2:	e050      	b.n	8004096 <_vsnprintf+0x2f6>
    switch (*format) {
 8003ff4:	286f      	cmp	r0, #111	; 0x6f
 8003ff6:	d100      	bne.n	8003ffa <_vsnprintf+0x25a>
 8003ff8:	e161      	b.n	80042be <_vsnprintf+0x51e>
 8003ffa:	d808      	bhi.n	800400e <_vsnprintf+0x26e>
 8003ffc:	2867      	cmp	r0, #103	; 0x67
 8003ffe:	d100      	bne.n	8004002 <_vsnprintf+0x262>
 8004000:	e09d      	b.n	800413e <_vsnprintf+0x39e>
 8004002:	d200      	bcs.n	8004006 <_vsnprintf+0x266>
 8004004:	e74e      	b.n	8003ea4 <_vsnprintf+0x104>
 8004006:	2869      	cmp	r0, #105	; 0x69
 8004008:	d000      	beq.n	800400c <_vsnprintf+0x26c>
 800400a:	e6e7      	b.n	8003ddc <_vsnprintf+0x3c>
 800400c:	e7b5      	b.n	8003f7a <_vsnprintf+0x1da>
 800400e:	2873      	cmp	r0, #115	; 0x73
 8004010:	d100      	bne.n	8004014 <_vsnprintf+0x274>
 8004012:	e0f2      	b.n	80041fa <_vsnprintf+0x45a>
 8004014:	d81b      	bhi.n	800404e <_vsnprintf+0x2ae>
 8004016:	2870      	cmp	r0, #112	; 0x70
 8004018:	d000      	beq.n	800401c <_vsnprintf+0x27c>
 800401a:	e6df      	b.n	8003ddc <_vsnprintf+0x3c>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800401c:	1d2b      	adds	r3, r5, #4
 800401e:	9310      	str	r3, [sp, #64]	; 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004020:	2321      	movs	r3, #33	; 0x21
 8004022:	431c      	orrs	r4, r3
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004024:	3b19      	subs	r3, #25
 8004026:	9304      	str	r3, [sp, #16]
 8004028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800402a:	9405      	str	r4, [sp, #20]
 800402c:	9303      	str	r3, [sp, #12]
 800402e:	2310      	movs	r3, #16
 8004030:	9302      	str	r3, [sp, #8]
 8004032:	2300      	movs	r3, #0
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	682b      	ldr	r3, [r5, #0]
 8004038:	003a      	movs	r2, r7
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800403e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004040:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004042:	f7ff faa3 	bl	800358c <_ntoa_long>
        format++;
 8004046:	3601      	adds	r6, #1
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004048:	0007      	movs	r7, r0
 800404a:	9d10      	ldr	r5, [sp, #64]	; 0x40
        break;
 800404c:	e6b4      	b.n	8003db8 <_vsnprintf+0x18>
    switch (*format) {
 800404e:	2875      	cmp	r0, #117	; 0x75
 8004050:	d093      	beq.n	8003f7a <_vsnprintf+0x1da>
          base = 16U;
 8004052:	2210      	movs	r2, #16
    switch (*format) {
 8004054:	2878      	cmp	r0, #120	; 0x78
 8004056:	d000      	beq.n	800405a <_vsnprintf+0x2ba>
 8004058:	e6c0      	b.n	8003ddc <_vsnprintf+0x3c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800405a:	230c      	movs	r3, #12
 800405c:	439c      	bics	r4, r3
 800405e:	e793      	b.n	8003f88 <_vsnprintf+0x1e8>
 8004060:	08003439 	.word	0x08003439
 8004064:	1d2b      	adds	r3, r5, #4
 8004066:	9311      	str	r3, [sp, #68]	; 0x44
          else if (flags & FLAGS_LONG) {
 8004068:	05e3      	lsls	r3, r4, #23
 800406a:	d516      	bpl.n	800409a <_vsnprintf+0x2fa>
            const long value = va_arg(va, long);
 800406c:	682b      	ldr	r3, [r5, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800406e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004070:	9202      	str	r2, [sp, #8]
 8004072:	0fda      	lsrs	r2, r3, #31
 8004074:	9104      	str	r1, [sp, #16]
 8004076:	9201      	str	r2, [sp, #4]
 8004078:	990a      	ldr	r1, [sp, #40]	; 0x28
 800407a:	17da      	asrs	r2, r3, #31
 800407c:	189b      	adds	r3, r3, r2
 800407e:	9405      	str	r4, [sp, #20]
 8004080:	9103      	str	r1, [sp, #12]
 8004082:	4053      	eors	r3, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	003a      	movs	r2, r7
 8004088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800408a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800408c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800408e:	f7ff fa7d 	bl	800358c <_ntoa_long>
 8004092:	0007      	movs	r7, r0
 8004094:	9d11      	ldr	r5, [sp, #68]	; 0x44
        format++;
 8004096:	3601      	adds	r6, #1
        break;
 8004098:	e68e      	b.n	8003db8 <_vsnprintf+0x18>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800409a:	0663      	lsls	r3, r4, #25
 800409c:	d515      	bpl.n	80040ca <_vsnprintf+0x32a>
 800409e:	682b      	ldr	r3, [r5, #0]
 80040a0:	b2db      	uxtb	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80040a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80040a4:	9202      	str	r2, [sp, #8]
 80040a6:	0fda      	lsrs	r2, r3, #31
 80040a8:	9104      	str	r1, [sp, #16]
 80040aa:	9201      	str	r2, [sp, #4]
 80040ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040ae:	17da      	asrs	r2, r3, #31
 80040b0:	189b      	adds	r3, r3, r2
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80040b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80040b4:	9405      	str	r4, [sp, #20]
 80040b6:	9103      	str	r1, [sp, #12]
 80040b8:	4053      	eors	r3, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	003a      	movs	r2, r7
 80040be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80040c4:	f7ff fa62 	bl	800358c <_ntoa_long>
 80040c8:	e792      	b.n	8003ff0 <_vsnprintf+0x250>
 80040ca:	682b      	ldr	r3, [r5, #0]
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80040cc:	0621      	lsls	r1, r4, #24
 80040ce:	d5e8      	bpl.n	80040a2 <_vsnprintf+0x302>
 80040d0:	b21b      	sxth	r3, r3
 80040d2:	e7e6      	b.n	80040a2 <_vsnprintf+0x302>
          if (flags & FLAGS_LONG_LONG) {
 80040d4:	4023      	ands	r3, r4
 80040d6:	d012      	beq.n	80040fe <_vsnprintf+0x35e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80040d8:	2107      	movs	r1, #7
 80040da:	1deb      	adds	r3, r5, #7
 80040dc:	438b      	bics	r3, r1
 80040de:	9204      	str	r2, [sp, #16]
 80040e0:	2200      	movs	r2, #0
 80040e2:	001d      	movs	r5, r3
 80040e4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80040e6:	9408      	str	r4, [sp, #32]
 80040e8:	9107      	str	r1, [sp, #28]
 80040ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040ec:	9205      	str	r2, [sp, #20]
 80040ee:	9106      	str	r1, [sp, #24]
 80040f0:	9202      	str	r2, [sp, #8]
 80040f2:	685c      	ldr	r4, [r3, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3508      	adds	r5, #8
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	9401      	str	r4, [sp, #4]
 80040fc:	e772      	b.n	8003fe4 <_vsnprintf+0x244>
 80040fe:	1d29      	adds	r1, r5, #4
 8004100:	9111      	str	r1, [sp, #68]	; 0x44
          else if (flags & FLAGS_LONG) {
 8004102:	05e1      	lsls	r1, r4, #23
 8004104:	d508      	bpl.n	8004118 <_vsnprintf+0x378>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004106:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004108:	9405      	str	r4, [sp, #20]
 800410a:	9104      	str	r1, [sp, #16]
 800410c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800410e:	9202      	str	r2, [sp, #8]
 8004110:	9103      	str	r1, [sp, #12]
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	e7b5      	b.n	8004084 <_vsnprintf+0x2e4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004118:	0663      	lsls	r3, r4, #25
 800411a:	d50b      	bpl.n	8004134 <_vsnprintf+0x394>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b2db      	uxtb	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004120:	9202      	str	r2, [sp, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	9910      	ldr	r1, [sp, #64]	; 0x40
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004126:	9d11      	ldr	r5, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004128:	9104      	str	r1, [sp, #16]
 800412a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800412c:	9405      	str	r4, [sp, #20]
 800412e:	9103      	str	r1, [sp, #12]
 8004130:	9201      	str	r2, [sp, #4]
 8004132:	e7c2      	b.n	80040ba <_vsnprintf+0x31a>
 8004134:	682b      	ldr	r3, [r5, #0]
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004136:	0621      	lsls	r1, r4, #24
 8004138:	d5f2      	bpl.n	8004120 <_vsnprintf+0x380>
 800413a:	b29b      	uxth	r3, r3
 800413c:	e7f0      	b.n	8004120 <_vsnprintf+0x380>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800413e:	2320      	movs	r3, #32
 8004140:	0002      	movs	r2, r0
 8004142:	439a      	bics	r2, r3
 8004144:	2a47      	cmp	r2, #71	; 0x47
 8004146:	d104      	bne.n	8004152 <_vsnprintf+0x3b2>
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	431c      	orrs	r4, r3
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800414e:	2302      	movs	r3, #2
 8004150:	4398      	bics	r0, r3
 8004152:	2845      	cmp	r0, #69	; 0x45
 8004154:	d101      	bne.n	800415a <_vsnprintf+0x3ba>
 8004156:	2320      	movs	r3, #32
 8004158:	431c      	orrs	r4, r3
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800415a:	2207      	movs	r2, #7
 800415c:	1deb      	adds	r3, r5, #7
 800415e:	4393      	bics	r3, r2
 8004160:	001d      	movs	r5, r3
 8004162:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004164:	9404      	str	r4, [sp, #16]
 8004166:	9203      	str	r2, [sp, #12]
 8004168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800416a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800416c:	9202      	str	r2, [sp, #8]
 800416e:	685c      	ldr	r4, [r3, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	003a      	movs	r2, r7
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	9401      	str	r4, [sp, #4]
 8004178:	980c      	ldr	r0, [sp, #48]	; 0x30
 800417a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800417c:	3508      	adds	r5, #8
 800417e:	f7ff fc3d 	bl	80039fc <_etoa>
 8004182:	e735      	b.n	8003ff0 <_vsnprintf+0x250>
        if (!(flags & FLAGS_LEFT)) {
 8004184:	2302      	movs	r3, #2
 8004186:	4023      	ands	r3, r4
 8004188:	9311      	str	r3, [sp, #68]	; 0x44
 800418a:	d129      	bne.n	80041e0 <_vsnprintf+0x440>
 800418c:	930a      	str	r3, [sp, #40]	; 0x28
 800418e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004190:	18fc      	adds	r4, r7, r3
 8004192:	3302      	adds	r3, #2
 8004194:	9312      	str	r3, [sp, #72]	; 0x48
 8004196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004198:	3301      	adds	r3, #1
 800419a:	930a      	str	r3, [sp, #40]	; 0x28
          while (l++ < width) {
 800419c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800419e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d816      	bhi.n	80041d2 <_vsnprintf+0x432>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80041a4:	6828      	ldr	r0, [r5, #0]
 80041a6:	1d2b      	adds	r3, r5, #4
 80041a8:	930a      	str	r3, [sp, #40]	; 0x28
 80041aa:	b2c0      	uxtb	r0, r0
 80041ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041ae:	0022      	movs	r2, r4
 80041b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041b4:	47a8      	blx	r5
        if (flags & FLAGS_LEFT) {
 80041b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80041b8:	1c67      	adds	r7, r4, #1
        if (flags & FLAGS_LEFT) {
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <_vsnprintf+0x42c>
 80041be:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80041c0:	3d01      	subs	r5, #1
 80041c2:	1b2d      	subs	r5, r5, r4
          while (l++ < width) {
 80041c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041c6:	197b      	adds	r3, r7, r5
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d80d      	bhi.n	80041e8 <_vsnprintf+0x448>
        format++;
 80041cc:	3601      	adds	r6, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80041ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        break;
 80041d0:	e5f2      	b.n	8003db8 <_vsnprintf+0x18>
            out(' ', buffer, idx++, maxlen);
 80041d2:	0022      	movs	r2, r4
 80041d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041d8:	2020      	movs	r0, #32
 80041da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80041dc:	47a0      	blx	r4
 80041de:	e7d6      	b.n	800418e <_vsnprintf+0x3ee>
        unsigned int l = 1U;
 80041e0:	2301      	movs	r3, #1
 80041e2:	003c      	movs	r4, r7
 80041e4:	9312      	str	r3, [sp, #72]	; 0x48
 80041e6:	e7dd      	b.n	80041a4 <_vsnprintf+0x404>
            out(' ', buffer, idx++, maxlen);
 80041e8:	1c7c      	adds	r4, r7, #1
 80041ea:	003a      	movs	r2, r7
 80041ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80041f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041f2:	2020      	movs	r0, #32
 80041f4:	47b8      	blx	r7
 80041f6:	0027      	movs	r7, r4
 80041f8:	e7e4      	b.n	80041c4 <_vsnprintf+0x424>
        const char* p = va_arg(va, char*);
 80041fa:	1d2b      	adds	r3, r5, #4
 80041fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	9311      	str	r3, [sp, #68]	; 0x44
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <_vsnprintf+0x46c>
 8004208:	2301      	movs	r3, #1
 800420a:	425b      	negs	r3, r3
 800420c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800420e:	0015      	movs	r5, r2
 8004210:	18d3      	adds	r3, r2, r3
  for (s = str; *s && maxsize--; ++s);
 8004212:	782a      	ldrb	r2, [r5, #0]
 8004214:	2a00      	cmp	r2, #0
 8004216:	d001      	beq.n	800421c <_vsnprintf+0x47c>
 8004218:	42ab      	cmp	r3, r5
 800421a:	d131      	bne.n	8004280 <_vsnprintf+0x4e0>
  return (unsigned int)(s - str);
 800421c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800421e:	1aed      	subs	r5, r5, r3
        if (flags & FLAGS_PRECISION) {
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4023      	ands	r3, r4
 8004226:	9313      	str	r3, [sp, #76]	; 0x4c
 8004228:	d003      	beq.n	8004232 <_vsnprintf+0x492>
          l = (l < precision ? l : precision);
 800422a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800422c:	429d      	cmp	r5, r3
 800422e:	d900      	bls.n	8004232 <_vsnprintf+0x492>
 8004230:	001d      	movs	r5, r3
        if (!(flags & FLAGS_LEFT)) {
 8004232:	2302      	movs	r3, #2
 8004234:	4023      	ands	r3, r4
 8004236:	9316      	str	r3, [sp, #88]	; 0x58
 8004238:	d12c      	bne.n	8004294 <_vsnprintf+0x4f4>
 800423a:	002b      	movs	r3, r5
          while (l++ < width) {
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	9212      	str	r2, [sp, #72]	; 0x48
 8004240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004242:	1b7c      	subs	r4, r7, r5
 8004244:	18e4      	adds	r4, r4, r3
 8004246:	429a      	cmp	r2, r3
 8004248:	d81c      	bhi.n	8004284 <_vsnprintf+0x4e4>
 800424a:	0025      	movs	r5, r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800424c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800424e:	1b1b      	subs	r3, r3, r4
 8004250:	5d58      	ldrb	r0, [r3, r5]
 8004252:	2800      	cmp	r0, #0
 8004254:	d007      	beq.n	8004266 <_vsnprintf+0x4c6>
 8004256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01f      	beq.n	800429c <_vsnprintf+0x4fc>
 800425c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800425e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	2a00      	cmp	r2, #0
 8004264:	d119      	bne.n	800429a <_vsnprintf+0x4fa>
        if (flags & FLAGS_LEFT) {
 8004266:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004268:	002f      	movs	r7, r5
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <_vsnprintf+0x4da>
 800426e:	9b12      	ldr	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 8004270:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004272:	1b5b      	subs	r3, r3, r5
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	429a      	cmp	r2, r3
 8004278:	d818      	bhi.n	80042ac <_vsnprintf+0x50c>
        format++;
 800427a:	3601      	adds	r6, #1
        const char* p = va_arg(va, char*);
 800427c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
        break;
 800427e:	e59b      	b.n	8003db8 <_vsnprintf+0x18>
  for (s = str; *s && maxsize--; ++s);
 8004280:	3501      	adds	r5, #1
 8004282:	e7c6      	b.n	8004212 <_vsnprintf+0x472>
            out(' ', buffer, idx++, maxlen);
 8004284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004286:	0022      	movs	r2, r4
 8004288:	990d      	ldr	r1, [sp, #52]	; 0x34
 800428a:	2020      	movs	r0, #32
 800428c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800428e:	47a0      	blx	r4
          while (l++ < width) {
 8004290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004292:	e7d3      	b.n	800423c <_vsnprintf+0x49c>
 8004294:	9512      	str	r5, [sp, #72]	; 0x48
 8004296:	003c      	movs	r4, r7
 8004298:	e7d7      	b.n	800424a <_vsnprintf+0x4aa>
 800429a:	930a      	str	r3, [sp, #40]	; 0x28
          out(*(p++), buffer, idx++, maxlen);
 800429c:	1c6f      	adds	r7, r5, #1
 800429e:	002a      	movs	r2, r5
 80042a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042a6:	47a8      	blx	r5
 80042a8:	003d      	movs	r5, r7
 80042aa:	e7cf      	b.n	800424c <_vsnprintf+0x4ac>
            out(' ', buffer, idx++, maxlen);
 80042ac:	1c7c      	adds	r4, r7, #1
 80042ae:	003a      	movs	r2, r7
 80042b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80042b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042b6:	2020      	movs	r0, #32
 80042b8:	47b8      	blx	r7
 80042ba:	0027      	movs	r7, r4
 80042bc:	e7d7      	b.n	800426e <_vsnprintf+0x4ce>
          base =  8U;
 80042be:	2208      	movs	r2, #8
 80042c0:	e6cb      	b.n	800405a <_vsnprintf+0x2ba>
          base =  2U;
 80042c2:	2202      	movs	r2, #2
 80042c4:	e6c9      	b.n	800405a <_vsnprintf+0x2ba>
 80042c6:	46c0      	nop			; (mov r8, r8)

080042c8 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80042c8:	b40f      	push	{r0, r1, r2, r3}
 80042ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042cc:	aa06      	add	r2, sp, #24
 80042ce:	ca08      	ldmia	r2!, {r3}
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80042d0:	a902      	add	r1, sp, #8
  va_start(va, format);
 80042d2:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80042d4:	9200      	str	r2, [sp, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	4803      	ldr	r0, [pc, #12]	; (80042e8 <printf_+0x20>)
 80042da:	4252      	negs	r2, r2
 80042dc:	f7ff fd60 	bl	8003da0 <_vsnprintf>
  va_end(va);
  return ret;
}
 80042e0:	b005      	add	sp, #20
 80042e2:	bc08      	pop	{r3}
 80042e4:	b004      	add	sp, #16
 80042e6:	4718      	bx	r3
 80042e8:	080036d9 	.word	0x080036d9

080042ec <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 80042ec:	b40e      	push	{r1, r2, r3}
 80042ee:	b50f      	push	{r0, r1, r2, r3, lr}
 80042f0:	aa05      	add	r2, sp, #20
 80042f2:	ca08      	ldmia	r2!, {r3}
 80042f4:	0001      	movs	r1, r0
  va_list va;
  va_start(va, format);
 80042f6:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80042f8:	9200      	str	r2, [sp, #0]
 80042fa:	2201      	movs	r2, #1
 80042fc:	4803      	ldr	r0, [pc, #12]	; (800430c <sprintf_+0x20>)
 80042fe:	4252      	negs	r2, r2
 8004300:	f7ff fd4e 	bl	8003da0 <_vsnprintf>
  va_end(va);
  return ret;
}
 8004304:	b004      	add	sp, #16
 8004306:	bc08      	pop	{r3}
 8004308:	b003      	add	sp, #12
 800430a:	4718      	bx	r3
 800430c:	08003431 	.word	0x08003431

08004310 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004310:	2107      	movs	r1, #7
 8004312:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <SystemClock_Config+0xa4>)
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004314:	b510      	push	{r4, lr}
 8004316:	681a      	ldr	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004318:	4c27      	ldr	r4, [pc, #156]	; (80043b8 <SystemClock_Config+0xa8>)
 800431a:	438a      	bics	r2, r1
 800431c:	0011      	movs	r1, r2
 800431e:	2202      	movs	r2, #2
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	025b      	lsls	r3, r3, #9
 800432c:	4313      	orrs	r3, r2
 800432e:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	029b      	lsls	r3, r3, #10
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	421a      	tst	r2, r3
 8004338:	d0fc      	beq.n	8004334 <SystemClock_Config+0x24>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <SystemClock_Config+0xac>)
 800433e:	401a      	ands	r2, r3
 8004340:	4b1f      	ldr	r3, [pc, #124]	; (80043c0 <SystemClock_Config+0xb0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	045b      	lsls	r3, r3, #17
 800434c:	4313      	orrs	r3, r2
 800434e:	6023      	str	r3, [r4, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	68e2      	ldr	r2, [r4, #12]
 8004354:	055b      	lsls	r3, r3, #21
 8004356:	4313      	orrs	r3, r2
 8004358:	60e3      	str	r3, [r4, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	049b      	lsls	r3, r3, #18
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	421a      	tst	r2, r3
 8004362:	d0fc      	beq.n	800435e <SystemClock_Config+0x4e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004364:	68a3      	ldr	r3, [r4, #8]
 8004366:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <SystemClock_Config+0xb4>)
 8004368:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800436a:	2207      	movs	r2, #7
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800436c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800436e:	68a3      	ldr	r3, [r4, #8]
 8004370:	4393      	bics	r3, r2
 8004372:	001a      	movs	r2, r3
 8004374:	2302      	movs	r3, #2
 8004376:	4313      	orrs	r3, r2
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004378:	2238      	movs	r2, #56	; 0x38
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800437a:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800437c:	68a3      	ldr	r3, [r4, #8]
 800437e:	4013      	ands	r3, r2
    /* Set AHB prescaler*/
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);

    /* Sysclk activation on the main PLL */
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004380:	2b10      	cmp	r3, #16
 8004382:	d1fb      	bne.n	800437c <SystemClock_Config+0x6c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8004384:	68a3      	ldr	r3, [r4, #8]
 8004386:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <SystemClock_Config+0xb8>)
    };

    /* Set APB1 prescaler*/
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);

    LL_Init1msTick(64000000);
 8004388:	4810      	ldr	r0, [pc, #64]	; (80043cc <SystemClock_Config+0xbc>)
 800438a:	4013      	ands	r3, r2
 800438c:	60a3      	str	r3, [r4, #8]
 800438e:	f7fe fee1 	bl	8003154 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8004392:	2304      	movs	r3, #4
 8004394:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <SystemClock_Config+0xc0>)

    LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
    /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
    LL_SetSystemCoreClock(64000000);
 8004396:	480d      	ldr	r0, [pc, #52]	; (80043cc <SystemClock_Config+0xbc>)
 8004398:	6811      	ldr	r1, [r2, #0]
 800439a:	430b      	orrs	r3, r1
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	f7fe fee9 	bl	8003174 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80043a2:	2203      	movs	r2, #3
 80043a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043a6:	4393      	bics	r3, r2
 80043a8:	6563      	str	r3, [r4, #84]	; 0x54
 80043aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043ac:	3209      	adds	r2, #9
 80043ae:	4393      	bics	r3, r2
 80043b0:	6563      	str	r3, [r4, #84]	; 0x54
    LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
}
 80043b2:	bd10      	pop	{r4, pc}
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40021000 	.word	0x40021000
 80043bc:	1fff808c 	.word	0x1fff808c
 80043c0:	20001003 	.word	0x20001003
 80043c4:	fffff0ff 	.word	0xfffff0ff
 80043c8:	ffff8fff 	.word	0xffff8fff
 80043cc:	03d09000 	.word	0x03d09000
 80043d0:	e000e010 	.word	0xe000e010

080043d4 <main>:
{
 80043d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  SET_BIT(RCC->APBENR2, Periphs);
 80043d6:	2401      	movs	r4, #1
  SET_BIT(RCC->APBENR1, Periphs);
 80043d8:	2580      	movs	r5, #128	; 0x80
  SET_BIT(RCC->APBENR2, Periphs);
 80043da:	4b55      	ldr	r3, [pc, #340]	; (8004530 <main+0x15c>)
  SET_BIT(RCC->APBENR1, Periphs);
 80043dc:	056d      	lsls	r5, r5, #21
  SET_BIT(RCC->APBENR2, Periphs);
 80043de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043e0:	26ff      	movs	r6, #255	; 0xff
 80043e2:	4322      	orrs	r2, r4
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80043e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e8:	4022      	ands	r2, r4
 80043ea:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80043ec:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80043ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f0:	432a      	orrs	r2, r5
 80043f2:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	402b      	ands	r3, r5
 80043f8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80043fa:	9b00      	ldr	r3, [sp, #0]
    SystemClock_Config();
 80043fc:	f7ff ff88 	bl	8004310 <SystemClock_Config>
    MX_GPIO_Init();
 8004400:	f7fe fecc 	bl	800319c <MX_GPIO_Init>
    MX_SPI1_Init();
 8004404:	f000 fef6 	bl	80051f4 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8004408:	f001 f8c0 	bl	800558c <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 800440c:	f001 f926 	bl	800565c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8004410:	f001 f984 	bl	800571c <MX_USART3_UART_Init>
    MX_USART4_UART_Init();
 8004414:	f001 f9e6 	bl	80057e4 <MX_USART4_UART_Init>
    MX_TIM3_Init();
 8004418:	f000 ffd6 	bl	80053c8 <MX_TIM3_Init>
    MX_TIM6_Init();
 800441c:	f001 f814 	bl	8005448 <MX_TIM6_Init>
    MX_TIM7_Init();
 8004420:	f001 f838 	bl	8005494 <MX_TIM7_Init>
    MX_TIM14_Init();
 8004424:	f001 f85c 	bl	80054e0 <MX_TIM14_Init>
 8004428:	21c1      	movs	r1, #193	; 0xc1
 800442a:	4b42      	ldr	r3, [pc, #264]	; (8004534 <main+0x160>)
 800442c:	0089      	lsls	r1, r1, #2
 800442e:	585a      	ldr	r2, [r3, r1]
 8004430:	4841      	ldr	r0, [pc, #260]	; (8004538 <main+0x164>)
 8004432:	43b2      	bics	r2, r6
 8004434:	505a      	str	r2, [r3, r1]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004436:	2210      	movs	r2, #16
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004438:	3114      	adds	r1, #20
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800443a:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800443c:	585a      	ldr	r2, [r3, r1]
 800443e:	4002      	ands	r2, r0
 8004440:	505a      	str	r2, [r3, r1]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004442:	2280      	movs	r2, #128	; 0x80
 8004444:	0492      	lsls	r2, r2, #18
 8004446:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004448:	22c4      	movs	r2, #196	; 0xc4
 800444a:	0092      	lsls	r2, r2, #2
 800444c:	589f      	ldr	r7, [r3, r2]
 800444e:	43b7      	bics	r7, r6
 8004450:	46bc      	mov	ip, r7
 8004452:	2780      	movs	r7, #128	; 0x80
 8004454:	4660      	mov	r0, ip
 8004456:	4307      	orrs	r7, r0
 8004458:	509f      	str	r7, [r3, r2]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800445a:	2780      	movs	r7, #128	; 0x80
 800445c:	027f      	lsls	r7, r7, #9
 800445e:	601f      	str	r7, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004460:	589f      	ldr	r7, [r3, r2]
 8004462:	4835      	ldr	r0, [pc, #212]	; (8004538 <main+0x164>)
 8004464:	4007      	ands	r7, r0
 8004466:	509f      	str	r7, [r3, r2]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004468:	2780      	movs	r7, #128	; 0x80
 800446a:	02bf      	lsls	r7, r7, #10
 800446c:	601f      	str	r7, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800446e:	589f      	ldr	r7, [r3, r2]
 8004470:	4832      	ldr	r0, [pc, #200]	; (800453c <main+0x168>)
 8004472:	4038      	ands	r0, r7
 8004474:	27c0      	movs	r7, #192	; 0xc0
 8004476:	043f      	lsls	r7, r7, #16
 8004478:	4307      	orrs	r7, r0
 800447a:	509f      	str	r7, [r3, r2]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800447c:	2780      	movs	r7, #128	; 0x80
 800447e:	02ff      	lsls	r7, r7, #11
 8004480:	601f      	str	r7, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004482:	589f      	ldr	r7, [r3, r2]
 8004484:	482c      	ldr	r0, [pc, #176]	; (8004538 <main+0x164>)
 8004486:	023f      	lsls	r7, r7, #8
 8004488:	0a3f      	lsrs	r7, r7, #8
 800448a:	509f      	str	r7, [r3, r2]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	0312      	lsls	r2, r2, #12
 8004490:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004492:	585a      	ldr	r2, [r3, r1]
 8004494:	0212      	lsls	r2, r2, #8
 8004496:	0a12      	lsrs	r2, r2, #8
 8004498:	505a      	str	r2, [r3, r1]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	0512      	lsls	r2, r2, #20
 800449e:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044a0:	22c7      	movs	r2, #199	; 0xc7
 80044a2:	0092      	lsls	r2, r2, #2
 80044a4:	5899      	ldr	r1, [r3, r2]
 80044a6:	43b1      	bics	r1, r6
 80044a8:	5099      	str	r1, [r3, r2]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80044aa:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044ac:	5899      	ldr	r1, [r3, r2]
 80044ae:	4008      	ands	r0, r1
 80044b0:	5098      	str	r0, [r3, r2]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	0592      	lsls	r2, r2, #22
 80044b6:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044b8:	4b21      	ldr	r3, [pc, #132]	; (8004540 <main+0x16c>)
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80044ba:	2080      	movs	r0, #128	; 0x80
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	0380      	lsls	r0, r0, #14
 80044c0:	4322      	orrs	r2, r4
 80044c2:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	4322      	orrs	r2, r4
 80044c8:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044ca:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <main+0x170>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4322      	orrs	r2, r4
 80044d0:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	4322      	orrs	r2, r4
 80044d6:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <main+0x174>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4322      	orrs	r2, r4
 80044de:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	4322      	orrs	r2, r4
 80044e4:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044e6:	4b19      	ldr	r3, [pc, #100]	; (800454c <main+0x178>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4322      	orrs	r2, r4
 80044ec:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	4314      	orrs	r4, r2
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80044f2:	2240      	movs	r2, #64	; 0x40
 80044f4:	60dc      	str	r4, [r3, #12]
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <main+0x17c>)
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	4311      	orrs	r1, r2
 80044fc:	6019      	str	r1, [r3, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004504:	2280      	movs	r2, #128	; 0x80
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <main+0x180>)
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004508:	03d2      	lsls	r2, r2, #15
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800450a:	69d9      	ldr	r1, [r3, #28]
 800450c:	4201      	tst	r1, r0
 800450e:	d0fc      	beq.n	800450a <main+0x136>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004510:	69d9      	ldr	r1, [r3, #28]
 8004512:	4211      	tst	r1, r2
 8004514:	d0f9      	beq.n	800450a <main+0x136>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004516:	2220      	movs	r2, #32
 8004518:	6819      	ldr	r1, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800451e:	2201      	movs	r2, #1
 8004520:	6899      	ldr	r1, [r3, #8]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
    main_thread();
 8004526:	f000 f861 	bl	80045ec <main_thread>
}
 800452a:	2000      	movs	r0, #0
 800452c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	40021000 	.word	0x40021000
 8004534:	e000e100 	.word	0xe000e100
 8004538:	ffff00ff 	.word	0xffff00ff
 800453c:	ff00ffff 	.word	0xff00ffff
 8004540:	40001000 	.word	0x40001000
 8004544:	40001400 	.word	0x40001400
 8004548:	40000400 	.word	0x40000400
 800454c:	40002000 	.word	0x40002000
 8004550:	40013000 	.word	0x40013000
 8004554:	40004c00 	.word	0x40004c00

08004558 <assert_failed>:
{
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
 8004558:	4770      	bx	lr
	...

0800455c <init_tasks>:
const u8 TASK_INDEX_LED_UPDATE = 0;
const u8 TASK_INDEX_SEQ_UPATE = 1;
void calculate_task_time(Task * task);

void init_tasks() {
    tasks[TASK_INDEX_LED_UPDATE].task = &update_display;
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <init_tasks+0x10>)
 800455e:	4a04      	ldr	r2, [pc, #16]	; (8004570 <init_tasks+0x14>)
 8004560:	605a      	str	r2, [r3, #4]
    tasks[TASK_INDEX_SEQ_UPATE].task = &update_seq;
 8004562:	4a04      	ldr	r2, [pc, #16]	; (8004574 <init_tasks+0x18>)
 8004564:	635a      	str	r2, [r3, #52]	; 0x34
    tasks[TASK_INDEX_SEQ_UPATE].repeat_ms = 16;
 8004566:	2210      	movs	r2, #16
 8004568:	639a      	str	r2, [r3, #56]	; 0x38

}
 800456a:	4770      	bx	lr
 800456c:	200002b8 	.word	0x200002b8
 8004570:	080049b9 	.word	0x080049b9
 8004574:	08004fc9 	.word	0x08004fc9

08004578 <calculate_task_time>:
        }
    }

}

void calculate_task_time(Task * task) {
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	0004      	movs	r4, r0
    u32 ms_diff = task->end_ms - task->start_ms;
 800457c:	6980      	ldr	r0, [r0, #24]
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	1ac0      	subs	r0, r0, r3
    if (ms_diff) {
 8004582:	d02d      	beq.n	80045e0 <calculate_task_time+0x68>
        //Add the passed milliseconds
        task->last_time = (ms_diff - 1) * (u64) 1000;
 8004584:	22fa      	movs	r2, #250	; 0xfa
 8004586:	2300      	movs	r3, #0
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	3801      	subs	r0, #1
 800458c:	2100      	movs	r1, #0
 800458e:	f7fb ff8b 	bl	80004a8 <__aeabi_lmul>
 8004592:	6220      	str	r0, [r4, #32]
 8004594:	6261      	str	r1, [r4, #36]	; 0x24
        //Add the remaining part from the start part
        task->last_time += (1000 - task->start_clk);
 8004596:	20fa      	movs	r0, #250	; 0xfa
 8004598:	2700      	movs	r7, #0
 800459a:	6961      	ldr	r1, [r4, #20]
 800459c:	0080      	lsls	r0, r0, #2
 800459e:	1a46      	subs	r6, r0, r1
 80045a0:	6a22      	ldr	r2, [r4, #32]
 80045a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a4:	1992      	adds	r2, r2, r6
 80045a6:	417b      	adcs	r3, r7
 80045a8:	6222      	str	r2, [r4, #32]
 80045aa:	6263      	str	r3, [r4, #36]	; 0x24
        //Add the ticks passed since the last ms
        task->last_time += task->end_clk;
 80045ac:	69e5      	ldr	r5, [r4, #28]
 80045ae:	003b      	movs	r3, r7
 80045b0:	6a20      	ldr	r0, [r4, #32]
 80045b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045b4:	002a      	movs	r2, r5
 80045b6:	1812      	adds	r2, r2, r0
 80045b8:	414b      	adcs	r3, r1
    } else {
        task->last_time = task->end_clk - task->start_clk;
 80045ba:	6222      	str	r2, [r4, #32]
 80045bc:	6263      	str	r3, [r4, #36]	; 0x24
    u64 new_avg = 0;
    loop(avg_i, (avgs - 1))
    {
        new_avg += last_avg;
    }
    task->avg_time = (new_avg + task->last_time) / avgs;
 80045be:	2207      	movs	r2, #7
    u64 last_avg = task->avg_time;
 80045c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80045c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    task->avg_time = (new_avg + task->last_time) / avgs;
 80045c4:	6a26      	ldr	r6, [r4, #32]
 80045c6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80045c8:	2300      	movs	r3, #0
 80045ca:	f7fb ff6d 	bl	80004a8 <__aeabi_lmul>
 80045ce:	1980      	adds	r0, r0, r6
 80045d0:	4179      	adcs	r1, r7
 80045d2:	074d      	lsls	r5, r1, #29
 80045d4:	08c2      	lsrs	r2, r0, #3
 80045d6:	432a      	orrs	r2, r5
 80045d8:	08cb      	lsrs	r3, r1, #3
 80045da:	62a2      	str	r2, [r4, #40]	; 0x28
 80045dc:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80045de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        task->last_time = task->end_clk - task->start_clk;
 80045e0:	69e5      	ldr	r5, [r4, #28]
 80045e2:	6961      	ldr	r1, [r4, #20]
 80045e4:	0003      	movs	r3, r0
 80045e6:	1a6a      	subs	r2, r5, r1
 80045e8:	e7e7      	b.n	80045ba <calculate_task_time+0x42>
	...

080045ec <main_thread>:
void main_thread() {
 80045ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ee:	b0a3      	sub	sp, #140	; 0x8c
    init_tasks();
 80045f0:	f7ff ffb4 	bl	800455c <init_tasks>
    printf("\n\rSTARTING UP %d", 4);
 80045f4:	2104      	movs	r1, #4
 80045f6:	483a      	ldr	r0, [pc, #232]	; (80046e0 <main_thread+0xf4>)
 80045f8:	f7ff fe66 	bl	80042c8 <printf_>
    print("START CTRL");
 80045fc:	4839      	ldr	r0, [pc, #228]	; (80046e4 <main_thread+0xf8>)
 80045fe:	f000 fba5 	bl	8004d4c <print>
        if (ms_counter != ms_last) {
 8004602:	4e39      	ldr	r6, [pc, #228]	; (80046e8 <main_thread+0xfc>)
 8004604:	4839      	ldr	r0, [pc, #228]	; (80046ec <main_thread+0x100>)
 8004606:	6831      	ldr	r1, [r6, #0]
 8004608:	6803      	ldr	r3, [r0, #0]
 800460a:	4f39      	ldr	r7, [pc, #228]	; (80046f0 <main_thread+0x104>)
 800460c:	4299      	cmp	r1, r3
 800460e:	d012      	beq.n	8004636 <main_thread+0x4a>
 8004610:	4a38      	ldr	r2, [pc, #224]	; (80046f4 <main_thread+0x108>)
 8004612:	1cbb      	adds	r3, r7, #2
 8004614:	18bc      	adds	r4, r7, r2
                u32 repeat = tasks[task_i].repeat_ms;
 8004616:	1d9a      	adds	r2, r3, #6
 8004618:	6812      	ldr	r2, [r2, #0]
                if (repeat) {
 800461a:	2a00      	cmp	r2, #0
 800461c:	d007      	beq.n	800462e <main_thread+0x42>
                    if (ms_counter > repeat + tasks[task_i].last_run_ms) {
 800461e:	001d      	movs	r5, r3
 8004620:	350a      	adds	r5, #10
 8004622:	682d      	ldr	r5, [r5, #0]
 8004624:	1952      	adds	r2, r2, r5
 8004626:	4291      	cmp	r1, r2
 8004628:	d901      	bls.n	800462e <main_thread+0x42>
                        tasks[task_i].needs_run = true;
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	3330      	adds	r3, #48	; 0x30
            loop(task_i, max_task_count)
 8004630:	42a3      	cmp	r3, r4
 8004632:	d1f0      	bne.n	8004616 <main_thread+0x2a>
            ms_last = ms_counter;
 8004634:	6001      	str	r1, [r0, #0]
void main_thread() {
 8004636:	2500      	movs	r5, #0
 8004638:	1cbc      	adds	r4, r7, #2
            if (task->needs_run && task->task != NULL) {
 800463a:	7823      	ldrb	r3, [r4, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01e      	beq.n	800467e <main_thread+0x92>
 8004640:	1ca3      	adds	r3, r4, #2
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	2a00      	cmp	r2, #0
 8004646:	d01a      	beq.n	800467e <main_thread+0x92>
                task->start_clk = TIM3->CNT;
 8004648:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <main_thread+0x10c>)
 800464a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800464c:	2330      	movs	r3, #48	; 0x30
 800464e:	436b      	muls	r3, r5
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	6159      	str	r1, [r3, #20]
                task->start_ms = ms_counter;
 8004654:	6831      	ldr	r1, [r6, #0]
 8004656:	6119      	str	r1, [r3, #16]
                task->task();
 8004658:	4790      	blx	r2
                if (!task->dont_reset_needs_run) {
 800465a:	7863      	ldrb	r3, [r4, #1]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d100      	bne.n	8004662 <main_thread+0x76>
                    task->needs_run = false;
 8004660:	7023      	strb	r3, [r4, #0]
                task->last_run_ms = ms_counter;
 8004662:	0023      	movs	r3, r4
 8004664:	6832      	ldr	r2, [r6, #0]
 8004666:	330a      	adds	r3, #10
 8004668:	601a      	str	r2, [r3, #0]
                task->end_clk = TIM3->CNT;
 800466a:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <main_thread+0x10c>)
                calculate_task_time(task);
 800466c:	1ea0      	subs	r0, r4, #2
                task->end_clk = TIM3->CNT;
 800466e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004670:	2330      	movs	r3, #48	; 0x30
 8004672:	436b      	muls	r3, r5
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	61d9      	str	r1, [r3, #28]
                task->end_ms = ms_counter;
 8004678:	619a      	str	r2, [r3, #24]
                calculate_task_time(task);
 800467a:	f7ff ff7d 	bl	8004578 <calculate_task_time>
        loop(task_i, max_task_count)
 800467e:	3501      	adds	r5, #1
 8004680:	3430      	adds	r4, #48	; 0x30
 8004682:	2d10      	cmp	r5, #16
 8004684:	d1d9      	bne.n	800463a <main_thread+0x4e>
        if (button_pressed[0]) {
 8004686:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <main_thread+0x110>)
 8004688:	7813      	ldrb	r3, [r2, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <main_thread+0xb2>
            button_pressed[0]--;
 800468e:	3b01      	subs	r3, #1
 8004690:	7013      	strb	r3, [r2, #0]
            printf("HELLO, loop time of led update: %d\r\n", (int) tasks[0].avg_time);
 8004692:	481b      	ldr	r0, [pc, #108]	; (8004700 <main_thread+0x114>)
 8004694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	0011      	movs	r1, r2
 800469a:	f7ff fe15 	bl	80042c8 <printf_>
        if (error_count) {
 800469e:	4d19      	ldr	r5, [pc, #100]	; (8004704 <main_thread+0x118>)
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0ad      	beq.n	8004602 <main_thread+0x16>
 80046a6:	2600      	movs	r6, #0
 80046a8:	4c17      	ldr	r4, [pc, #92]	; (8004708 <main_thread+0x11c>)
            loop(ec, error_count)
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	429e      	cmp	r6, r3
 80046ae:	d302      	bcc.n	80046b6 <main_thread+0xca>
            error_count = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	e7a5      	b.n	8004602 <main_thread+0x16>
                if (e->error_code) {
 80046b6:	7822      	ldrb	r2, [r4, #0]
 80046b8:	2a00      	cmp	r2, #0
 80046ba:	d00e      	beq.n	80046da <main_thread+0xee>
                            error_code_text[(u8) e->error_code]);
 80046bc:	4813      	ldr	r0, [pc, #76]	; (800470c <main_thread+0x120>)
 80046be:	0191      	lsls	r1, r2, #6
 80046c0:	1809      	adds	r1, r1, r0
                    sprintf(to_print, "ERR %d - %c : %s", e->error_code, e->identifier,
 80046c2:	7863      	ldrb	r3, [r4, #1]
 80046c4:	a802      	add	r0, sp, #8
 80046c6:	9100      	str	r1, [sp, #0]
 80046c8:	4911      	ldr	r1, [pc, #68]	; (8004710 <main_thread+0x124>)
 80046ca:	f7ff fe0f 	bl	80042ec <sprintf_>
                    print(to_print);
 80046ce:	a802      	add	r0, sp, #8
 80046d0:	f000 fb3c 	bl	8004d4c <print>
                    e->error_code = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	7023      	strb	r3, [r4, #0]
                    e->identifier = 0;
 80046d8:	7063      	strb	r3, [r4, #1]
            loop(ec, error_count)
 80046da:	3601      	adds	r6, #1
 80046dc:	3402      	adds	r4, #2
 80046de:	e7e4      	b.n	80046aa <main_thread+0xbe>
 80046e0:	08005cb9 	.word	0x08005cb9
 80046e4:	08005cca 	.word	0x08005cca
 80046e8:	200002ac 	.word	0x200002ac
 80046ec:	200002b0 	.word	0x200002b0
 80046f0:	200002b8 	.word	0x200002b8
 80046f4:	00000302 	.word	0x00000302
 80046f8:	40000400 	.word	0x40000400
 80046fc:	200005b8 	.word	0x200005b8
 8004700:	08005cd5 	.word	0x08005cd5
 8004704:	200006f4 	.word	0x200006f4
 8004708:	200006d2 	.word	0x200006d2
 800470c:	08005e34 	.word	0x08005e34
 8004710:	08005cfa 	.word	0x08005cfa

08004714 <TIM3_IRQHandler>:
/**
 * Elapsed_time_counter
 */
void TIM3_IRQHandler(void)
{
    ms_counter++;
 8004714:	4a06      	ldr	r2, [pc, #24]	; (8004730 <TIM3_IRQHandler+0x1c>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	6013      	str	r3, [r2, #0]
    seq.current_ms = ms_counter;
 800471c:	4a05      	ldr	r2, [pc, #20]	; (8004734 <TIM3_IRQHandler+0x20>)
 800471e:	6293      	str	r3, [r2, #40]	; 0x28
 8004720:	2300      	movs	r3, #0
 8004722:	62d3      	str	r3, [r2, #44]	; 0x2c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004724:	2202      	movs	r2, #2
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <TIM3_IRQHandler+0x24>)
 8004728:	4252      	negs	r2, r2
 800472a:	611a      	str	r2, [r3, #16]
    LL_TIM_ClearFlag_UPDATE(TIM3);
}
 800472c:	4770      	bx	lr
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	200002ac 	.word	0x200002ac
 8004734:	20000150 	.word	0x20000150
 8004738:	40000400 	.word	0x40000400

0800473c <process_encoder>:
        encoder->reset_button = true;
    }
}
inline void process_encoder(Encoder_data * encoder) {
    /* reset means that we are ready to receive a new input */
    if (encoder->reset_encoder) {
 800473c:	7d82      	ldrb	r2, [r0, #22]
 800473e:	89c3      	ldrh	r3, [r0, #14]
 8004740:	2a00      	cmp	r2, #0
 8004742:	d02d      	beq.n	80047a0 <process_encoder+0x64>
 8004744:	2215      	movs	r2, #21
 8004746:	5682      	ldrsb	r2, [r0, r2]
        /* Decode gray code */
        /* A before B means increment, this needs to be first for PEC12R-4225F-S0024 encoder */
        if (encoder->a && encoder->direction == 0) {
 8004748:	2b00      	cmp	r3, #0
 800474a:	d018      	beq.n	800477e <process_encoder+0x42>
 800474c:	2a00      	cmp	r2, #0
 800474e:	d116      	bne.n	800477e <process_encoder+0x42>
            encoder->direction = 1;
 8004750:	2301      	movs	r3, #1
 8004752:	7543      	strb	r3, [r0, #21]
            encoder->encoder_step++;
 8004754:	8983      	ldrh	r3, [r0, #12]
 8004756:	3301      	adds	r3, #1
        } else
        /*B before A means decrement */
        if (encoder->b && encoder->direction == 0) {
            encoder->direction = -1;
            encoder->encoder_step--;
 8004758:	8183      	strh	r3, [r0, #12]
        }

        /* When both values are high, it means that we completed an input */
        if (encoder->direction) {
 800475a:	2115      	movs	r1, #21
 800475c:	5641      	ldrsb	r1, [r0, r1]
 800475e:	2900      	cmp	r1, #0
 8004760:	d00c      	beq.n	800477c <process_encoder+0x40>
 8004762:	6883      	ldr	r3, [r0, #8]
 8004764:	6842      	ldr	r2, [r0, #4]
            if (encoder->direction == 1) {
 8004766:	2901      	cmp	r1, #1
 8004768:	d113      	bne.n	8004792 <process_encoder+0x56>

                encoder->data += encoder->data_increment;
 800476a:	189b      	adds	r3, r3, r2
                if (encoder->data > encoder->max_data) {
 800476c:	6802      	ldr	r2, [r0, #0]
                encoder->data += encoder->data_increment;
 800476e:	6083      	str	r3, [r0, #8]
                if (encoder->data > encoder->max_data) {
 8004770:	4293      	cmp	r3, r2
 8004772:	d900      	bls.n	8004776 <process_encoder+0x3a>
                    encoder->data = encoder->max_data;
 8004774:	6082      	str	r2, [r0, #8]
                } else {
                    encoder->data = 0;
                }

            }
            encoder->direction = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	7543      	strb	r3, [r0, #21]
            encoder->reset_encoder = false;
        }
    } else {
        //When both of them are off, we are ready to receive the next input
        if (!encoder->a && !encoder->b) {
            encoder->reset_encoder = true;
 800477a:	7583      	strb	r3, [r0, #22]
        }
    }
}
 800477c:	4770      	bx	lr
        if (encoder->b && encoder->direction == 0) {
 800477e:	8a03      	ldrh	r3, [r0, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ea      	beq.n	800475a <process_encoder+0x1e>
 8004784:	2a00      	cmp	r2, #0
 8004786:	d1e8      	bne.n	800475a <process_encoder+0x1e>
            encoder->direction = -1;
 8004788:	23ff      	movs	r3, #255	; 0xff
 800478a:	7543      	strb	r3, [r0, #21]
            encoder->encoder_step--;
 800478c:	8983      	ldrh	r3, [r0, #12]
 800478e:	3b01      	subs	r3, #1
 8004790:	e7e2      	b.n	8004758 <process_encoder+0x1c>
                if (encoder->data >= encoder->data_increment) {
 8004792:	4293      	cmp	r3, r2
 8004794:	d302      	bcc.n	800479c <process_encoder+0x60>
                    encoder->data -= encoder->data_increment;
 8004796:	1a9b      	subs	r3, r3, r2
                    encoder->data = 0;
 8004798:	6083      	str	r3, [r0, #8]
 800479a:	e7ec      	b.n	8004776 <process_encoder+0x3a>
 800479c:	2300      	movs	r3, #0
 800479e:	e7fb      	b.n	8004798 <process_encoder+0x5c>
        if (!encoder->a && !encoder->b) {
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1eb      	bne.n	800477c <process_encoder+0x40>
 80047a4:	8a03      	ldrh	r3, [r0, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e8      	bne.n	800477c <process_encoder+0x40>
            encoder->reset_encoder = true;
 80047aa:	3301      	adds	r3, #1
 80047ac:	e7e5      	b.n	800477a <process_encoder+0x3e>
	...

080047b0 <read_encoder_inputs>:

/**
 * Read current encoder data into the least significant bit, and shift previous data right
 */
inline void read_encoder_inputs() {
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4e16      	ldr	r6, [pc, #88]	; (800480c <read_encoder_inputs+0x5c>)
 80047b4:	4d16      	ldr	r5, [pc, #88]	; (8004810 <read_encoder_inputs+0x60>)
 80047b6:	0034      	movs	r4, r6
 80047b8:	366e      	adds	r6, #110	; 0x6e
 80047ba:	340e      	adds	r4, #14
    loop (i, ENCODER_COUNT)
    {

        encoders[i].a = (encoders[i].a << 1)
                | !(encoder_pins[i].a.port->IDR & encoder_pins[i].a.pin);
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	88aa      	ldrh	r2, [r5, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
//                        encoder_pins[i].b.pin);
//        encoders[i].s = (encoders[i].s << 1)
//                | !HAL_GPIO_ReadPin(encoder_pins[i].s.port,
//                        encoder_pins[i].s.pin);

        process_encoder(&encoders[i]);
 80047c2:	0020      	movs	r0, r4
                | !(encoder_pins[i].a.port->IDR & encoder_pins[i].a.pin);
 80047c4:	4013      	ands	r3, r2
 80047c6:	425a      	negs	r2, r3
 80047c8:	4153      	adcs	r3, r2
        encoders[i].a = (encoders[i].a << 1)
 80047ca:	8822      	ldrh	r2, [r4, #0]
        process_encoder(&encoders[i]);
 80047cc:	380e      	subs	r0, #14
        encoders[i].a = (encoders[i].a << 1)
 80047ce:	0052      	lsls	r2, r2, #1
                | !(encoder_pins[i].a.port->IDR & encoder_pins[i].a.pin);
 80047d0:	4313      	orrs	r3, r2
        encoders[i].a = (encoders[i].a << 1)
 80047d2:	8023      	strh	r3, [r4, #0]
                | !(encoder_pins[i].b.port->IDR & encoder_pins[i].b.pin);
 80047d4:	68ab      	ldr	r3, [r5, #8]
 80047d6:	89aa      	ldrh	r2, [r5, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	425a      	negs	r2, r3
 80047de:	4153      	adcs	r3, r2
        encoders[i].b = (encoders[i].b << 1)
 80047e0:	8862      	ldrh	r2, [r4, #2]
 80047e2:	0052      	lsls	r2, r2, #1
                | !(encoder_pins[i].b.port->IDR & encoder_pins[i].b.pin);
 80047e4:	4313      	orrs	r3, r2
        encoders[i].b = (encoders[i].b << 1)
 80047e6:	8063      	strh	r3, [r4, #2]
                | !(encoder_pins[i].s.port->IDR & encoder_pins[i].s.pin);
 80047e8:	692b      	ldr	r3, [r5, #16]
 80047ea:	8aaa      	ldrh	r2, [r5, #20]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	3518      	adds	r5, #24
 80047f0:	4013      	ands	r3, r2
 80047f2:	425a      	negs	r2, r3
 80047f4:	4153      	adcs	r3, r2
        encoders[i].s = (encoders[i].s << 1)
 80047f6:	88a2      	ldrh	r2, [r4, #4]
 80047f8:	0052      	lsls	r2, r2, #1
                | !(encoder_pins[i].s.port->IDR & encoder_pins[i].s.pin);
 80047fa:	4313      	orrs	r3, r2
        encoders[i].s = (encoders[i].s << 1)
 80047fc:	80a3      	strh	r3, [r4, #4]
 80047fe:	3418      	adds	r4, #24
        process_encoder(&encoders[i]);
 8004800:	f7ff ff9c 	bl	800473c <process_encoder>
    loop (i, ENCODER_COUNT)
 8004804:	42b4      	cmp	r4, r6
 8004806:	d1d9      	bne.n	80047bc <read_encoder_inputs+0xc>
    }

}
 8004808:	bd70      	pop	{r4, r5, r6, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	20000000 	.word	0x20000000
 8004810:	08005d0c 	.word	0x08005d0c

08004814 <mux_button_read>:
u8 button_pressed[6] = { };
u8 muxed_button[6] = { };
bool muxed_button_ready[6] = { };

inline void mux_button_read() {
 8004814:	b513      	push	{r0, r1, r4, lr}
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <mux_button_read+0x58>)
    volatile u16 read = LL_GPIO_ReadInputPort(BUTTONS_GPIO_Port);
 8004818:	aa01      	add	r2, sp, #4
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]
    volatile u16 binary = read & BUTTONS_Pin;
 8004820:	8813      	ldrh	r3, [r2, #0]
 8004822:	2220      	movs	r2, #32
 8004824:	4013      	ands	r3, r2
 8004826:	466a      	mov	r2, sp
 8004828:	80d3      	strh	r3, [r2, #6]
    bool input = !(binary);

    if (current_mux > 3) {
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <mux_button_read+0x5c>)
    bool input = !(binary);
 800482c:	88d1      	ldrh	r1, [r2, #6]
    if (current_mux > 3) {
 800482e:	781a      	ldrb	r2, [r3, #0]
    bool input = !(binary);
 8004830:	b289      	uxth	r1, r1
    if (current_mux > 3) {
 8004832:	2a03      	cmp	r2, #3
 8004834:	d911      	bls.n	800485a <mux_button_read+0x46>
        u8 c = (6 - (current_mux - 3));
 8004836:	2309      	movs	r3, #9
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	b2db      	uxtb	r3, r3
        if (c > 5) {
 800483c:	2b05      	cmp	r3, #5
 800483e:	d80c      	bhi.n	800485a <mux_button_read+0x46>
    bool input = !(binary);
 8004840:	424a      	negs	r2, r1
 8004842:	414a      	adcs	r2, r1

            return;
        }
        muxed_button[c] = (muxed_button[c] << 1) | input;
 8004844:	4c0b      	ldr	r4, [pc, #44]	; (8004874 <mux_button_read+0x60>)
 8004846:	490c      	ldr	r1, [pc, #48]	; (8004878 <mux_button_read+0x64>)
 8004848:	5ce0      	ldrb	r0, [r4, r3]
 800484a:	0040      	lsls	r0, r0, #1
 800484c:	4302      	orrs	r2, r0
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	54e2      	strb	r2, [r4, r3]
        //If don't have anything in the register, we are ready for a new button press
        if (!muxed_button[c]) muxed_button_ready[c] = true;
 8004852:	2a00      	cmp	r2, #0
 8004854:	d102      	bne.n	800485c <mux_button_read+0x48>
        //If something is in the register (previous evaluated to false) and we are ready for a button press, increment the press counter
        else if (muxed_button_ready[c]) {
            muxed_button_ready[c] = false;
            button_pressed[c]++;
 8004856:	3201      	adds	r2, #1
 8004858:	54ca      	strb	r2, [r1, r3]

        }
    }
}
 800485a:	bd13      	pop	{r0, r1, r4, pc}
        else if (muxed_button_ready[c]) {
 800485c:	5cca      	ldrb	r2, [r1, r3]
 800485e:	2a00      	cmp	r2, #0
 8004860:	d0fb      	beq.n	800485a <mux_button_read+0x46>
            muxed_button_ready[c] = false;
 8004862:	2200      	movs	r2, #0
 8004864:	54ca      	strb	r2, [r1, r3]
            button_pressed[c]++;
 8004866:	4905      	ldr	r1, [pc, #20]	; (800487c <mux_button_read+0x68>)
 8004868:	5cca      	ldrb	r2, [r1, r3]
 800486a:	e7f4      	b.n	8004856 <mux_button_read+0x42>
 800486c:	50000400 	.word	0x50000400
 8004870:	200006d0 	.word	0x200006d0
 8004874:	200005be 	.word	0x200005be
 8004878:	200005c4 	.word	0x200005c4
 800487c:	200005b8 	.word	0x200005b8

08004880 <led_calculate_bar_16>:

    }

}

void led_calculate_bar_16(u8 value, Intensity * target) {
 8004880:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8 four_bit_value = value >> 4;
    u8 remainder = (value & 0x0F) >> 2;
    loop(i, 16)
 8004882:	2300      	movs	r3, #0
    {

        u8 intensity = 0;
        if (four_bit_value > i) {
            intensity = intensity_high;
 8004884:	261f      	movs	r6, #31
    u8 four_bit_value = value >> 4;
 8004886:	0904      	lsrs	r4, r0, #4
 8004888:	4f07      	ldr	r7, [pc, #28]	; (80048a8 <led_calculate_bar_16+0x28>)
    u8 remainder = (value & 0x0F) >> 2;
 800488a:	0700      	lsls	r0, r0, #28
 800488c:	0f80      	lsrs	r0, r0, #30
            intensity = intensity_high;
 800488e:	0032      	movs	r2, r6
        if (four_bit_value > i) {
 8004890:	429c      	cmp	r4, r3
 8004892:	d803      	bhi.n	800489c <led_calculate_bar_16+0x1c>
        u8 intensity = 0;
 8004894:	2200      	movs	r2, #0
        } else if (four_bit_value == i) {
 8004896:	429c      	cmp	r4, r3
 8004898:	d100      	bne.n	800489c <led_calculate_bar_16+0x1c>
 800489a:	5c3a      	ldrb	r2, [r7, r0]
                intensity = intensity_high;
                break;
            }
        }

        target[15 - i] = intensity;
 800489c:	1acd      	subs	r5, r1, r3
    loop(i, 16)
 800489e:	3301      	adds	r3, #1
        target[15 - i] = intensity;
 80048a0:	73ea      	strb	r2, [r5, #15]
    loop(i, 16)
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d1f3      	bne.n	800488e <led_calculate_bar_16+0xe>

    }

}
 80048a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a8:	08005d6c 	.word	0x08005d6c

080048ac <led_calculate_bar_signed_16>:

void led_calculate_bar_signed_16(s8 signed_value, Intensity * target) {
    u8 value = signed_value > 0 ? signed_value : -signed_value;
 80048ac:	17c2      	asrs	r2, r0, #31
 80048ae:	1883      	adds	r3, r0, r2
void led_calculate_bar_signed_16(s8 signed_value, Intensity * target) {
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8 value = signed_value > 0 ? signed_value : -signed_value;
 80048b2:	4053      	eors	r3, r2
 80048b4:	4d0f      	ldr	r5, [pc, #60]	; (80048f4 <led_calculate_bar_signed_16+0x48>)
    u8 three_bit_value = value >> 4;
 80048b6:	b2dc      	uxtb	r4, r3
    u8 remainder = (value & 0x0F) >> 2;
 80048b8:	071b      	lsls	r3, r3, #28
 80048ba:	0f9a      	lsrs	r2, r3, #30
    loop(i, 8)
    {

        u8 intensity = 0;
        if (three_bit_value > i) {
            intensity = intensity_high;
 80048bc:	271f      	movs	r7, #31
    loop(i, 8)
 80048be:	2300      	movs	r3, #0
 80048c0:	46ac      	mov	ip, r5
    u8 three_bit_value = value >> 4;
 80048c2:	0924      	lsrs	r4, r4, #4
            intensity = intensity_high;
 80048c4:	003d      	movs	r5, r7
        if (three_bit_value > i) {
 80048c6:	429c      	cmp	r4, r3
 80048c8:	d804      	bhi.n	80048d4 <led_calculate_bar_signed_16+0x28>
        u8 intensity = 0;
 80048ca:	2500      	movs	r5, #0
        } else if (three_bit_value == i) {
 80048cc:	429c      	cmp	r4, r3
 80048ce:	d101      	bne.n	80048d4 <led_calculate_bar_signed_16+0x28>
 80048d0:	4665      	mov	r5, ip
 80048d2:	5cad      	ldrb	r5, [r5, r2]
                intensity = intensity_high;
                break;
            }
        }

        if (signed_value > 0) target[7 - (i)] = intensity;
 80048d4:	2800      	cmp	r0, #0
 80048d6:	dd05      	ble.n	80048e4 <led_calculate_bar_signed_16+0x38>
 80048d8:	1ace      	subs	r6, r1, r3
 80048da:	71f5      	strb	r5, [r6, #7]
    loop(i, 8)
 80048dc:	3301      	adds	r3, #1
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d1f0      	bne.n	80048c4 <led_calculate_bar_signed_16+0x18>
        }


    }

}
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e4:	18ce      	adds	r6, r1, r3
        else if (signed_value < 0) target[i + 8] = intensity;
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d001      	beq.n	80048ee <led_calculate_bar_signed_16+0x42>
 80048ea:	7235      	strb	r5, [r6, #8]
 80048ec:	e7f6      	b.n	80048dc <led_calculate_bar_signed_16+0x30>
            target[i] = intensity_off;
 80048ee:	54c8      	strb	r0, [r1, r3]
            target[i + 8] = intensity_off;
 80048f0:	7230      	strb	r0, [r6, #8]
 80048f2:	e7f3      	b.n	80048dc <led_calculate_bar_signed_16+0x30>
 80048f4:	08005d6c 	.word	0x08005d6c

080048f8 <led_calculate_bar_32>:

void led_calculate_bar_32(u8 value, u8 led_column_1, u8 led_column_2) {
 80048f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8 five_bit_value = value >> 3;
 80048fa:	08c3      	lsrs	r3, r0, #3
    u8 remainder = (value & 0x07) >> 1;
 80048fc:	0740      	lsls	r0, r0, #29
    u8 five_bit_value = value >> 3;
 80048fe:	469c      	mov	ip, r3
    u8 remainder = (value & 0x07) >> 1;
 8004900:	0f83      	lsrs	r3, r0, #30
 8004902:	9300      	str	r3, [sp, #0]
    u8 even_count = 0;
    u8 odd_count = 0;
    loop(i, 32)
 8004904:	2300      	movs	r3, #0
    u8 odd_count = 0;
 8004906:	001c      	movs	r4, r3
    u8 even_count = 0;
 8004908:	0018      	movs	r0, r3
 800490a:	4d28      	ldr	r5, [pc, #160]	; (80049ac <led_calculate_bar_32+0xb4>)

        if (i % 2) {
            led_intensity[led_column_1][odd_count] = intensity;
            odd_count++;
        } else {
            led_intensity[led_column_2][even_count] = intensity;
 800490c:	0116      	lsls	r6, r2, #4
 800490e:	19ae      	adds	r6, r5, r6
 8004910:	9601      	str	r6, [sp, #4]
            intensity = intensity_high;
 8004912:	261f      	movs	r6, #31
        if (five_bit_value > i) {
 8004914:	459c      	cmp	ip, r3
 8004916:	d805      	bhi.n	8004924 <led_calculate_bar_32+0x2c>
        u8 intensity = 0;
 8004918:	2600      	movs	r6, #0
        } else if (five_bit_value == i) {
 800491a:	459c      	cmp	ip, r3
 800491c:	d102      	bne.n	8004924 <led_calculate_bar_32+0x2c>
 800491e:	4e24      	ldr	r6, [pc, #144]	; (80049b0 <led_calculate_bar_32+0xb8>)
 8004920:	9f00      	ldr	r7, [sp, #0]
 8004922:	5df6      	ldrb	r6, [r6, r7]
        if (i % 2) {
 8004924:	07df      	lsls	r7, r3, #31
 8004926:	d53c      	bpl.n	80049a2 <led_calculate_bar_32+0xaa>
            led_intensity[led_column_1][odd_count] = intensity;
 8004928:	010f      	lsls	r7, r1, #4
 800492a:	19ef      	adds	r7, r5, r7
 800492c:	553e      	strb	r6, [r7, r4]
            odd_count++;
 800492e:	3401      	adds	r4, #1
 8004930:	b2e4      	uxtb	r4, r4
    loop(i, 32)
 8004932:	3301      	adds	r3, #1
 8004934:	2b20      	cmp	r3, #32
 8004936:	d1ec      	bne.n	8004912 <led_calculate_bar_32+0x1a>
 8004938:	3b16      	subs	r3, #22
    Intensity * c_i = led_intensity[column];
 800493a:	010e      	lsls	r6, r1, #4
 800493c:	4359      	muls	r1, r3
 800493e:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <led_calculate_bar_32+0xbc>)
    loop(bit,intensity_gradients)
 8004940:	2400      	movs	r4, #0
 8004942:	185b      	adds	r3, r3, r1
 8004944:	9300      	str	r3, [sp, #0]
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004946:	2301      	movs	r3, #1
 8004948:	469c      	mov	ip, r3
    Intensity * c_i = led_intensity[column];
 800494a:	19ae      	adds	r6, r5, r6
        u8 intensity = 0;
 800494c:	2700      	movs	r7, #0
 800494e:	0038      	movs	r0, r7
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004950:	5c33      	ldrb	r3, [r6, r0]
 8004952:	4661      	mov	r1, ip
 8004954:	4123      	asrs	r3, r4
 8004956:	400b      	ands	r3, r1
 8004958:	4083      	lsls	r3, r0
        loop(i,16)
 800495a:	3001      	adds	r0, #1
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 800495c:	431f      	orrs	r7, r3
 800495e:	b2bf      	uxth	r7, r7
        loop(i,16)
 8004960:	2810      	cmp	r0, #16
 8004962:	d1f5      	bne.n	8004950 <led_calculate_bar_32+0x58>
        led_data[column][bit] = intens;
 8004964:	9900      	ldr	r1, [sp, #0]
 8004966:	0063      	lsls	r3, r4, #1
    loop(bit,intensity_gradients)
 8004968:	3401      	adds	r4, #1
        led_data[column][bit] = intens;
 800496a:	52cf      	strh	r7, [r1, r3]
    loop(bit,intensity_gradients)
 800496c:	2c05      	cmp	r4, #5
 800496e:	d1ed      	bne.n	800494c <led_calculate_bar_32+0x54>
    Intensity * c_i = led_intensity[column];
 8004970:	0113      	lsls	r3, r2, #4
 8004972:	18ed      	adds	r5, r5, r3
 8004974:	230a      	movs	r3, #10
    loop(bit,intensity_gradients)
 8004976:	2000      	movs	r0, #0
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004978:	2401      	movs	r4, #1
 800497a:	435a      	muls	r2, r3
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <led_calculate_bar_32+0xbc>)
 800497e:	189a      	adds	r2, r3, r2
    loop(bit,intensity_gradients)
 8004980:	2600      	movs	r6, #0
 8004982:	0031      	movs	r1, r6
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004984:	5c6b      	ldrb	r3, [r5, r1]
 8004986:	4103      	asrs	r3, r0
 8004988:	4023      	ands	r3, r4
 800498a:	408b      	lsls	r3, r1
        loop(i,16)
 800498c:	3101      	adds	r1, #1
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 800498e:	431e      	orrs	r6, r3
 8004990:	b2b6      	uxth	r6, r6
        loop(i,16)
 8004992:	2910      	cmp	r1, #16
 8004994:	d1f6      	bne.n	8004984 <led_calculate_bar_32+0x8c>
        led_data[column][bit] = intens;
 8004996:	0043      	lsls	r3, r0, #1
    loop(bit,intensity_gradients)
 8004998:	3001      	adds	r0, #1
        led_data[column][bit] = intens;
 800499a:	52d6      	strh	r6, [r2, r3]
    loop(bit,intensity_gradients)
 800499c:	2805      	cmp	r0, #5
 800499e:	d1ef      	bne.n	8004980 <led_calculate_bar_32+0x88>
    }

    intensity_calc(led_column_1);
    intensity_calc(led_column_2);

}
 80049a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            led_intensity[led_column_2][even_count] = intensity;
 80049a2:	9f01      	ldr	r7, [sp, #4]
 80049a4:	543e      	strb	r6, [r7, r0]
            even_count++;
 80049a6:	3001      	adds	r0, #1
 80049a8:	b2c0      	uxtb	r0, r0
 80049aa:	e7c2      	b.n	8004932 <led_calculate_bar_32+0x3a>
 80049ac:	2000062e 	.word	0x2000062e
 80049b0:	08005d6c 	.word	0x08005d6c
 80049b4:	200005ca 	.word	0x200005ca

080049b8 <update_display>:

void update_display() {
    if (display.display_type == DT_VALUE) {
 80049b8:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <update_display+0x160>)
void update_display() {
 80049ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (display.display_type == DT_VALUE) {
 80049bc:	781d      	ldrb	r5, [r3, #0]
 80049be:	4c57      	ldr	r4, [pc, #348]	; (8004b1c <update_display+0x164>)
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	d15c      	bne.n	8004a7e <update_display+0xc6>
        display.top_bar_value = encoders[1].data;
        loop(x,4)
        {
            display.encoders[x].red_value = encoders[x].data;
 80049c4:	0018      	movs	r0, r3
        display.top_bar_value = encoders[1].data;
 80049c6:	4a56      	ldr	r2, [pc, #344]	; (8004b20 <update_display+0x168>)
 80049c8:	2120      	movs	r1, #32
            display.encoders[x].red_value = encoders[x].data;
 80049ca:	7a16      	ldrb	r6, [r2, #8]
 80049cc:	3043      	adds	r0, #67	; 0x43
 80049ce:	7006      	strb	r6, [r0, #0]
 80049d0:	0018      	movs	r0, r3
        display.top_bar_value = encoders[1].data;
 80049d2:	1851      	adds	r1, r2, r1
 80049d4:	7809      	ldrb	r1, [r1, #0]
            display.encoders[x].red_value = encoders[x].data;
 80049d6:	3065      	adds	r0, #101	; 0x65
 80049d8:	7001      	strb	r1, [r0, #0]
 80049da:	2038      	movs	r0, #56	; 0x38
        display.top_bar_value = encoders[1].data;
 80049dc:	7059      	strb	r1, [r3, #1]
            display.encoders[x].red_value = encoders[x].data;
 80049de:	0019      	movs	r1, r3
 80049e0:	1810      	adds	r0, r2, r0
 80049e2:	7800      	ldrb	r0, [r0, #0]
 80049e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049e6:	4e4f      	ldr	r6, [pc, #316]	; (8004b24 <update_display+0x16c>)
 80049e8:	3187      	adds	r1, #135	; 0x87
 80049ea:	33a9      	adds	r3, #169	; 0xa9
 80049ec:	7008      	strb	r0, [r1, #0]
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	3410      	adds	r4, #16
 80049f2:	360a      	adds	r6, #10
 80049f4:	4f48      	ldr	r7, [pc, #288]	; (8004b18 <update_display+0x160>)
        loop(x,4)
        {

            u8 col1 = (x * 2) + 1;
            u8 col2 = x * 2;
            led_calculate_bar_16(display.encoders[x].red_value, led_intensity[col1]);
 80049f6:	0021      	movs	r1, r4
 80049f8:	197f      	adds	r7, r7, r5
 80049fa:	003b      	movs	r3, r7
 80049fc:	3343      	adds	r3, #67	; 0x43
 80049fe:	7818      	ldrb	r0, [r3, #0]
 8004a00:	f7ff ff3e 	bl	8004880 <led_calculate_bar_16>
 8004a04:	0023      	movs	r3, r4
            led_calculate_bar_16(display.encoders[x].green_value, led_intensity[col2]);
 8004a06:	3742      	adds	r7, #66	; 0x42
 8004a08:	3b10      	subs	r3, #16
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	7838      	ldrb	r0, [r7, #0]
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	f7ff ff36 	bl	8004880 <led_calculate_bar_16>
    loop(bit,intensity_gradients)
 8004a14:	2100      	movs	r1, #0
            display.encoders[x].red_value = encoders[x].data;
 8004a16:	2000      	movs	r0, #0
 8004a18:	0002      	movs	r2, r0
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004a1a:	5ca3      	ldrb	r3, [r4, r2]
 8004a1c:	2701      	movs	r7, #1
 8004a1e:	410b      	asrs	r3, r1
 8004a20:	403b      	ands	r3, r7
 8004a22:	4093      	lsls	r3, r2
        loop(i,16)
 8004a24:	19d2      	adds	r2, r2, r7
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004a26:	4318      	orrs	r0, r3
 8004a28:	b280      	uxth	r0, r0
        loop(i,16)
 8004a2a:	2a10      	cmp	r2, #16
 8004a2c:	d1f5      	bne.n	8004a1a <update_display+0x62>
        led_data[column][bit] = intens;
 8004a2e:	004b      	lsls	r3, r1, #1
    loop(bit,intensity_gradients)
 8004a30:	19c9      	adds	r1, r1, r7
        led_data[column][bit] = intens;
 8004a32:	52f0      	strh	r0, [r6, r3]
    loop(bit,intensity_gradients)
 8004a34:	2905      	cmp	r1, #5
 8004a36:	d1ee      	bne.n	8004a16 <update_display+0x5e>
        led_data[column][bit] = intens;
 8004a38:	0030      	movs	r0, r6
 8004a3a:	380a      	subs	r0, #10
    loop(bit,intensity_gradients)
 8004a3c:	2100      	movs	r1, #0
        led_data[column][bit] = intens;
 8004a3e:	4684      	mov	ip, r0
    loop(bit,intensity_gradients)
 8004a40:	2700      	movs	r7, #0
 8004a42:	003a      	movs	r2, r7
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004a44:	9b01      	ldr	r3, [sp, #4]
 8004a46:	2001      	movs	r0, #1
 8004a48:	5c9b      	ldrb	r3, [r3, r2]
 8004a4a:	410b      	asrs	r3, r1
 8004a4c:	4003      	ands	r3, r0
 8004a4e:	4093      	lsls	r3, r2
        loop(i,16)
 8004a50:	1812      	adds	r2, r2, r0
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004a52:	431f      	orrs	r7, r3
 8004a54:	b2bf      	uxth	r7, r7
        loop(i,16)
 8004a56:	2a10      	cmp	r2, #16
 8004a58:	d1f4      	bne.n	8004a44 <update_display+0x8c>
        led_data[column][bit] = intens;
 8004a5a:	4662      	mov	r2, ip
 8004a5c:	004b      	lsls	r3, r1, #1
    loop(bit,intensity_gradients)
 8004a5e:	1809      	adds	r1, r1, r0
        led_data[column][bit] = intens;
 8004a60:	52d7      	strh	r7, [r2, r3]
    loop(bit,intensity_gradients)
 8004a62:	2905      	cmp	r1, #5
 8004a64:	d1ec      	bne.n	8004a40 <update_display+0x88>
 8004a66:	3522      	adds	r5, #34	; 0x22
 8004a68:	3420      	adds	r4, #32
 8004a6a:	3614      	adds	r6, #20
        loop(x,4)
 8004a6c:	2d88      	cmp	r5, #136	; 0x88
 8004a6e:	d1c1      	bne.n	80049f4 <update_display+0x3c>
            intensity_calc(col1);
            intensity_calc(col2);
        };

        led_calculate_bar_32(display.top_bar_value, 8, 9);
 8004a70:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <update_display+0x160>)
 8004a72:	2209      	movs	r2, #9
 8004a74:	7858      	ldrb	r0, [r3, #1]
 8004a76:	2108      	movs	r1, #8
 8004a78:	f7ff ff3e 	bl	80048f8 <led_calculate_bar_32>
        {
            intensity_calc(x);
        }
    }

}
 8004a7c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004a7e:	2200      	movs	r2, #0
            if (x % 2) {
 8004a80:	2601      	movs	r6, #1
 8004a82:	0010      	movs	r0, r2
 8004a84:	0011      	movs	r1, r2
 8004a86:	4232      	tst	r2, r6
 8004a88:	d03d      	beq.n	8004b06 <update_display+0x14e>
                led_intensity[8][even_count] = display.top_bar_precise[x];
 8004a8a:	189f      	adds	r7, r3, r2
 8004a8c:	1865      	adds	r5, r4, r1
 8004a8e:	78bf      	ldrb	r7, [r7, #2]
 8004a90:	3580      	adds	r5, #128	; 0x80
                even_count++;
 8004a92:	3101      	adds	r1, #1
                led_intensity[8][even_count] = display.top_bar_precise[x];
 8004a94:	702f      	strb	r7, [r5, #0]
                even_count++;
 8004a96:	b2c9      	uxtb	r1, r1
        loop(x, 32)
 8004a98:	3201      	adds	r2, #1
 8004a9a:	2a20      	cmp	r2, #32
 8004a9c:	d1f3      	bne.n	8004a86 <update_display+0xce>
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	000a      	movs	r2, r1
 8004aa2:	000d      	movs	r5, r1
 8004aa4:	3222      	adds	r2, #34	; 0x22
 8004aa6:	35aa      	adds	r5, #170	; 0xaa
 8004aa8:	189a      	adds	r2, r3, r2
 8004aaa:	1860      	adds	r0, r4, r1
 8004aac:	195d      	adds	r5, r3, r5
                led_intensity[y * 2][x] = display.encoders[y].green_precise[x];
 8004aae:	7816      	ldrb	r6, [r2, #0]
 8004ab0:	7006      	strb	r6, [r0, #0]
                led_intensity[(y * 2) + 1][x] = display.encoders[y].red_precise[x];
 8004ab2:	7c16      	ldrb	r6, [r2, #16]
 8004ab4:	3222      	adds	r2, #34	; 0x22
 8004ab6:	7406      	strb	r6, [r0, #16]
 8004ab8:	3020      	adds	r0, #32
            loop(y, 4)
 8004aba:	4295      	cmp	r5, r2
 8004abc:	d1f7      	bne.n	8004aae <update_display+0xf6>
        loop(x, 16)
 8004abe:	3101      	adds	r1, #1
 8004ac0:	2910      	cmp	r1, #16
 8004ac2:	d1ed      	bne.n	8004aa0 <update_display+0xe8>
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	469c      	mov	ip, r3
 8004aca:	0116      	lsls	r6, r2, #4
 8004acc:	19a3      	adds	r3, r4, r6
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	230a      	movs	r3, #10
    loop(bit,intensity_gradients)
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	4353      	muls	r3, r2
 8004ad6:	4f13      	ldr	r7, [pc, #76]	; (8004b24 <update_display+0x16c>)
 8004ad8:	18ff      	adds	r7, r7, r3
 8004ada:	2500      	movs	r5, #0
 8004adc:	0029      	movs	r1, r5
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004ade:	9b01      	ldr	r3, [sp, #4]
 8004ae0:	4666      	mov	r6, ip
 8004ae2:	5c5b      	ldrb	r3, [r3, r1]
 8004ae4:	4103      	asrs	r3, r0
 8004ae6:	4033      	ands	r3, r6
 8004ae8:	408b      	lsls	r3, r1
        loop(i,16)
 8004aea:	3101      	adds	r1, #1
            intens |= ((!!(c_i[i] & (1 << bit))) << i);
 8004aec:	431d      	orrs	r5, r3
 8004aee:	b2ad      	uxth	r5, r5
        loop(i,16)
 8004af0:	2910      	cmp	r1, #16
 8004af2:	d1f4      	bne.n	8004ade <update_display+0x126>
        led_data[column][bit] = intens;
 8004af4:	0043      	lsls	r3, r0, #1
    loop(bit,intensity_gradients)
 8004af6:	3001      	adds	r0, #1
        led_data[column][bit] = intens;
 8004af8:	52fd      	strh	r5, [r7, r3]
    loop(bit,intensity_gradients)
 8004afa:	2805      	cmp	r0, #5
 8004afc:	d1ed      	bne.n	8004ada <update_display+0x122>
        loop(x, 10)
 8004afe:	3201      	adds	r2, #1
 8004b00:	2a0a      	cmp	r2, #10
 8004b02:	d1e2      	bne.n	8004aca <update_display+0x112>
 8004b04:	e7ba      	b.n	8004a7c <update_display+0xc4>
                led_intensity[9][odd_count] = display.top_bar_precise[x];
 8004b06:	189f      	adds	r7, r3, r2
 8004b08:	1825      	adds	r5, r4, r0
 8004b0a:	78bf      	ldrb	r7, [r7, #2]
 8004b0c:	3590      	adds	r5, #144	; 0x90
                odd_count++;
 8004b0e:	3001      	adds	r0, #1
                led_intensity[9][odd_count] = display.top_bar_precise[x];
 8004b10:	702f      	strb	r7, [r5, #0]
                odd_count++;
 8004b12:	b2c0      	uxtb	r0, r0
 8004b14:	e7c0      	b.n	8004a98 <update_display+0xe0>
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	20000060 	.word	0x20000060
 8004b1c:	2000062e 	.word	0x2000062e
 8004b20:	20000000 	.word	0x20000000
 8004b24:	200005ca 	.word	0x200005ca

08004b28 <TIM14_IRQHandler>:
/**
 * Update the display
 */
void TIM14_IRQHandler(void)
{
    tasks[TASK_INDEX_LED_UPDATE].needs_run = true;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <TIM14_IRQHandler+0x18>)
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	2330      	movs	r3, #48	; 0x30
 8004b2e:	435a      	muls	r2, r3
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <TIM14_IRQHandler+0x1c>)
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	2201      	movs	r2, #1
 8004b36:	709a      	strb	r2, [r3, #2]
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <TIM14_IRQHandler+0x20>)
 8004b3a:	3a03      	subs	r2, #3
 8004b3c:	611a      	str	r2, [r3, #16]
    LL_TIM_ClearFlag_UPDATE(TIM14);

}
 8004b3e:	4770      	bx	lr
 8004b40:	08005cb8 	.word	0x08005cb8
 8004b44:	200002b8 	.word	0x200002b8
 8004b48:	40002000 	.word	0x40002000

08004b4c <switch_mux.part.0>:
/* transfer state */
volatile TS wTransferState = TRANSFER_COMPLETE;

static inline void switch_mux(u16 x, bool state) {

    state ? LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[x],
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <switch_mux.part.0+0x14>)
 8004b4e:	0082      	lsls	r2, r0, #2
 8004b50:	58d2      	ldr	r2, [r2, r3]
                    mux_port[x]->ODR | mux_pin[x]) :
 8004b52:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <switch_mux.part.0+0x18>)
 8004b54:	0040      	lsls	r0, r0, #1
 8004b56:	6951      	ldr	r1, [r2, #20]
 8004b58:	5ac3      	ldrh	r3, [r0, r3]
    state ? LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[x],
 8004b5a:	430b      	orrs	r3, r1
  WRITE_REG(GPIOx->ODR, PortValue);
 8004b5c:	6153      	str	r3, [r2, #20]
            LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[x],
                    mux_port[x]->ODR & ~mux_pin[x]);
}
 8004b5e:	4770      	bx	lr
 8004b60:	2000010c 	.word	0x2000010c
 8004b64:	08005d70 	.word	0x08005d70

08004b68 <mux_off>:

static inline void switch_mux_off(u16 x) {
    switch_mux(x, true);
}

inline void mux_off() {
 8004b68:	b510      	push	{r4, lr}
    loop(i, 10)
 8004b6a:	2400      	movs	r4, #0
 8004b6c:	b2a0      	uxth	r0, r4
 8004b6e:	3401      	adds	r4, #1
 8004b70:	f7ff ffec 	bl	8004b4c <switch_mux.part.0>
 8004b74:	2c0a      	cmp	r4, #10
 8004b76:	d1f9      	bne.n	8004b6c <mux_off+0x4>
    {
        switch_mux_off(i);
    }
}
 8004b78:	bd10      	pop	{r4, pc}
	...

08004b7c <multiplex>:
//    wTransferState = TRANSFER_ERROR;
//}
const u8 global_brightness = 4;

void multiplex() {
    if (wTransferState == TRANSFER_WAIT) {
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <multiplex+0x54>)
void multiplex() {
 8004b7e:	b510      	push	{r4, lr}
    if (wTransferState == TRANSFER_WAIT) {
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	d010      	beq.n	8004ba8 <multiplex+0x2c>
        return;
    }
    if (can_turn_off > 0) {
 8004b86:	2200      	movs	r2, #0
 8004b88:	4c12      	ldr	r4, [pc, #72]	; (8004bd4 <multiplex+0x58>)
 8004b8a:	56a2      	ldrsb	r2, [r4, r2]
 8004b8c:	2a00      	cmp	r2, #0
 8004b8e:	dd0f      	ble.n	8004bb0 <multiplex+0x34>
        if (can_turn_off == global_brightness) {
 8004b90:	2a04      	cmp	r2, #4
 8004b92:	d106      	bne.n	8004ba2 <multiplex+0x26>
    if (rotate_c == 0) {
 8004b94:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <multiplex+0x5c>)
 8004b96:	7818      	ldrb	r0, [r3, #0]
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d106      	bne.n	8004baa <multiplex+0x2e>
 8004b9c:	3009      	adds	r0, #9
 8004b9e:	f7ff ffd5 	bl	8004b4c <switch_mux.part.0>

            previous_mux_off();
        }
        can_turn_off--;
 8004ba2:	7823      	ldrb	r3, [r4, #0]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	7023      	strb	r3, [r4, #0]

    /* Turn off all transistors when sending data to the led driver */

    send_current_led_data();

}
 8004ba8:	bd10      	pop	{r4, pc}
        switch_mux_off(rotate_c - 1);
 8004baa:	3801      	subs	r0, #1
 8004bac:	b280      	uxth	r0, r0
 8004bae:	e7f6      	b.n	8004b9e <multiplex+0x22>
    wTransferState = TRANSFER_WAIT;
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
    LL_SPI_TransmitData16(SPI1, led_data[rotate_c][current_bit]);
 8004bb4:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <multiplex+0x5c>)
 8004bb6:	7819      	ldrb	r1, [r3, #0]
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <multiplex+0x60>)
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	2305      	movs	r3, #5
 8004bbe:	434b      	muls	r3, r1
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	4a07      	ldr	r2, [pc, #28]	; (8004be0 <multiplex+0x64>)
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	5a9a      	ldrh	r2, [r3, r2]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <multiplex+0x68>)
 8004bca:	819a      	strh	r2, [r3, #12]
 8004bcc:	e7ec      	b.n	8004ba8 <multiplex+0x2c>
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	20000134 	.word	0x20000134
 8004bd4:	200006ce 	.word	0x200006ce
 8004bd8:	200006d1 	.word	0x200006d1
 8004bdc:	200006cf 	.word	0x200006cf
 8004be0:	200005ca 	.word	0x200005ca
 8004be4:	40013000 	.word	0x40013000

08004be8 <SPI1_IRQHandler>:
}

/**
 * Send data to LED driver finished
 */
void SPI1_IRQHandler(void) {
 8004be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004bea:	2301      	movs	r3, #1
 8004bec:	4d3a      	ldr	r5, [pc, #232]	; (8004cd8 <SPI1_IRQHandler+0xf0>)
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004bee:	4c3b      	ldr	r4, [pc, #236]	; (8004cdc <SPI1_IRQHandler+0xf4>)
 8004bf0:	682a      	ldr	r2, [r5, #0]
 8004bf2:	439a      	bics	r2, r3
 8004bf4:	602a      	str	r2, [r5, #0]
 8004bf6:	68a2      	ldr	r2, [r4, #8]
 8004bf8:	421a      	tst	r2, r3
 8004bfa:	d02a      	beq.n	8004c52 <SPI1_IRQHandler+0x6a>
    can_turn_off = global_brightness;
 8004bfc:	2104      	movs	r1, #4
 8004bfe:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <SPI1_IRQHandler+0xf8>)
                    mux_port[x]->ODR & ~mux_pin[x]);
 8004c00:	4838      	ldr	r0, [pc, #224]	; (8004ce4 <SPI1_IRQHandler+0xfc>)
    can_turn_off = global_brightness;
 8004c02:	7011      	strb	r1, [r2, #0]
    wTransferState = TRANSFER_COMPLETE;
 8004c04:	4a38      	ldr	r2, [pc, #224]	; (8004ce8 <SPI1_IRQHandler+0x100>)
 8004c06:	7013      	strb	r3, [r2, #0]
  return (uint16_t)(READ_REG(SPIx->DR));
 8004c08:	68e3      	ldr	r3, [r4, #12]
    switch_mux_on(rotate_c);
 8004c0a:	4c38      	ldr	r4, [pc, #224]	; (8004cec <SPI1_IRQHandler+0x104>)
            LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[x],
 8004c0c:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <SPI1_IRQHandler+0x108>)
    switch_mux_on(rotate_c);
 8004c0e:	7823      	ldrb	r3, [r4, #0]
            LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[x],
 8004c10:	0099      	lsls	r1, r3, #2
 8004c12:	5889      	ldr	r1, [r1, r2]
                    mux_port[x]->ODR & ~mux_pin[x]);
 8004c14:	005e      	lsls	r6, r3, #1
 8004c16:	694a      	ldr	r2, [r1, #20]
 8004c18:	5a30      	ldrh	r0, [r6, r0]
            LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[x],
 8004c1a:	4382      	bics	r2, r0
 8004c1c:	614a      	str	r2, [r1, #20]
    current_mux = rotate_c;
 8004c1e:	4a35      	ldr	r2, [pc, #212]	; (8004cf4 <SPI1_IRQHandler+0x10c>)
 8004c20:	7013      	strb	r3, [r2, #0]
    mux_button_read();
 8004c22:	f7ff fdf7 	bl	8004814 <mux_button_read>
    if (rotate_c >= 9) {
 8004c26:	7823      	ldrb	r3, [r4, #0]
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d802      	bhi.n	8004c32 <SPI1_IRQHandler+0x4a>
        rotate_c++;
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	7023      	strb	r3, [r4, #0]
 8004c30:	e008      	b.n	8004c44 <SPI1_IRQHandler+0x5c>
        rotate_c = 0;
 8004c32:	2100      	movs	r1, #0
        current_bit++;
 8004c34:	4a30      	ldr	r2, [pc, #192]	; (8004cf8 <SPI1_IRQHandler+0x110>)
        rotate_c = 0;
 8004c36:	7021      	strb	r1, [r4, #0]
        current_bit++;
 8004c38:	7813      	ldrb	r3, [r2, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	b2db      	uxtb	r3, r3
        if (current_bit >= intensity_gradients) current_bit = 0;
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d805      	bhi.n	8004c4e <SPI1_IRQHandler+0x66>
        current_bit++;
 8004c42:	7013      	strb	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004c44:	2301      	movs	r3, #1
 8004c46:	682a      	ldr	r2, [r5, #0]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	602b      	str	r3, [r5, #0]
    SPI_RX_ONLY_IRQ(1, {
        spi_rx_irq()
        ;
    })
}
 8004c4c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
        if (current_bit >= intensity_gradients) current_bit = 0;
 8004c4e:	7011      	strb	r1, [r2, #0]
 8004c50:	e7f8      	b.n	8004c44 <SPI1_IRQHandler+0x5c>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004c52:	68a3      	ldr	r3, [r4, #8]
 8004c54:	079b      	lsls	r3, r3, #30
 8004c56:	d508      	bpl.n	8004c6a <SPI1_IRQHandler+0x82>
    SPI_RX_ONLY_IRQ(1, {
 8004c58:	216d      	movs	r1, #109	; 0x6d
 8004c5a:	2056      	movs	r0, #86	; 0x56
 8004c5c:	f000 feb0 	bl	80059c0 <log_error>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	6863      	ldr	r3, [r4, #4]
 8004c64:	4393      	bics	r3, r2
 8004c66:	6063      	str	r3, [r4, #4]
 8004c68:	e7ec      	b.n	8004c44 <SPI1_IRQHandler+0x5c>
  return ((READ_BIT(SPIx->SR, SPI_SR_FRE) == (SPI_SR_FRE)) ? 1UL : 0UL);
 8004c6a:	68a3      	ldr	r3, [r4, #8]
 8004c6c:	05db      	lsls	r3, r3, #23
 8004c6e:	d507      	bpl.n	8004c80 <SPI1_IRQHandler+0x98>
 8004c70:	216d      	movs	r1, #109	; 0x6d
 8004c72:	2053      	movs	r0, #83	; 0x53
 8004c74:	f000 fea4 	bl	80059c0 <log_error>
  tmpreg = SPIx->SR;
 8004c78:	68a3      	ldr	r3, [r4, #8]
 8004c7a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	e7e1      	b.n	8004c44 <SPI1_IRQHandler+0x5c>
  return ((READ_BIT(SPIx->SR, SPI_SR_CRCERR) == (SPI_SR_CRCERR)) ? 1UL : 0UL);
 8004c80:	2610      	movs	r6, #16
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	4233      	tst	r3, r6
 8004c86:	d10e      	bne.n	8004ca6 <SPI1_IRQHandler+0xbe>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	4213      	tst	r3, r2
 8004c8e:	d012      	beq.n	8004cb6 <SPI1_IRQHandler+0xce>
 8004c90:	216d      	movs	r1, #109	; 0x6d
 8004c92:	2054      	movs	r0, #84	; 0x54
 8004c94:	f000 fe94 	bl	80059c0 <log_error>
  tmpreg = SPIx->DR;
 8004c98:	68e3      	ldr	r3, [r4, #12]
 8004c9a:	9302      	str	r3, [sp, #8]
  (void) tmpreg;
 8004c9c:	9b02      	ldr	r3, [sp, #8]
  tmpreg = SPIx->SR;
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	9302      	str	r3, [sp, #8]
  (void) tmpreg;
 8004ca2:	9b02      	ldr	r3, [sp, #8]
 8004ca4:	e7ce      	b.n	8004c44 <SPI1_IRQHandler+0x5c>
 8004ca6:	216d      	movs	r1, #109	; 0x6d
 8004ca8:	2052      	movs	r0, #82	; 0x52
 8004caa:	f000 fe89 	bl	80059c0 <log_error>
  CLEAR_BIT(SPIx->SR, SPI_SR_CRCERR);
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	43b3      	bics	r3, r6
 8004cb2:	60a3      	str	r3, [r4, #8]
 8004cb4:	e7c6      	b.n	8004c44 <SPI1_IRQHandler+0x5c>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8004cb6:	68a3      	ldr	r3, [r4, #8]
 8004cb8:	069b      	lsls	r3, r3, #26
 8004cba:	d50a      	bpl.n	8004cd2 <SPI1_IRQHandler+0xea>
 8004cbc:	216d      	movs	r1, #109	; 0x6d
 8004cbe:	2055      	movs	r0, #85	; 0x55
  tmpreg_sr = SPIx->SR;
 8004cc0:	68a3      	ldr	r3, [r4, #8]
 8004cc2:	9303      	str	r3, [sp, #12]
  (void) tmpreg_sr;
 8004cc4:	9b03      	ldr	r3, [sp, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	4393      	bics	r3, r2
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	f000 fe78 	bl	80059c0 <log_error>
 8004cd0:	e7b8      	b.n	8004c44 <SPI1_IRQHandler+0x5c>
 8004cd2:	216d      	movs	r1, #109	; 0x6d
 8004cd4:	205f      	movs	r0, #95	; 0x5f
 8004cd6:	e7f9      	b.n	8004ccc <SPI1_IRQHandler+0xe4>
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40013000 	.word	0x40013000
 8004ce0:	200006ce 	.word	0x200006ce
 8004ce4:	08005d70 	.word	0x08005d70
 8004ce8:	20000134 	.word	0x20000134
 8004cec:	200006d1 	.word	0x200006d1
 8004cf0:	2000010c 	.word	0x2000010c
 8004cf4:	200006d0 	.word	0x200006d0
 8004cf8:	200006cf 	.word	0x200006cf

08004cfc <TIM7_IRQHandler>:

/**
 * Multiplex LEDs
 */
void TIM7_IRQHandler(void) {
 8004cfc:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004cfe:	2501      	movs	r5, #1
 8004d00:	4c06      	ldr	r4, [pc, #24]	; (8004d1c <TIM7_IRQHandler+0x20>)
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	43ab      	bics	r3, r5
 8004d06:	6023      	str	r3, [r4, #0]
    IRQ_COMMON({
 8004d08:	f7ff ff38 	bl	8004b7c <multiplex>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <TIM7_IRQHandler+0x24>)
 8004d10:	4252      	negs	r2, r2
 8004d12:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	431d      	orrs	r5, r3
 8004d18:	6025      	str	r5, [r4, #0]
            multiplex();
            LL_TIM_ClearFlag_UPDATE(TIM7);
            })
}
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40001400 	.word	0x40001400

08004d24 <TIM6_IRQHandler>:

/**
 * Read encoders
 */
void TIM6_IRQHandler(void) {
 8004d24:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d26:	2501      	movs	r5, #1
 8004d28:	4c06      	ldr	r4, [pc, #24]	; (8004d44 <TIM6_IRQHandler+0x20>)
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	43ab      	bics	r3, r5
 8004d2e:	6023      	str	r3, [r4, #0]
    IRQ_COMMON({
 8004d30:	f7ff fd3e 	bl	80047b0 <read_encoder_inputs>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004d34:	2202      	movs	r2, #2
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <TIM6_IRQHandler+0x24>)
 8004d38:	4252      	negs	r2, r2
 8004d3a:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	431d      	orrs	r5, r3
 8004d40:	6025      	str	r5, [r4, #0]
            read_encoder_inputs();
            LL_TIM_ClearFlag_UPDATE(TIM6);
            });
}
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40001000 	.word	0x40001000

08004d4c <print>:

/**
 * Print to UART
 * Returns the number of written bytes
 */
int print(char* input) {
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	0005      	movs	r5, r0
    int written_bytes = 0;
 8004d50:	2400      	movs	r4, #0
    bool print_buffer_overflow = false;
    for (u16 i = 0; input[i] != 0; i++) {
 8004d52:	b2a3      	uxth	r3, r4
 8004d54:	5ce9      	ldrb	r1, [r5, r3]
 8004d56:	2900      	cmp	r1, #0
 8004d58:	d112      	bne.n	8004d80 <print+0x34>

    if (print_buffer_overflow) {
        log_error(EC_PRINT_BUFFER_FULL, 'p');
    }

    if (written_bytes) {
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	d00e      	beq.n	8004d7c <print+0x30>
        add_to_buffer_if_not_full(&uart_print, '\r');
 8004d5e:	4d0e      	ldr	r5, [pc, #56]	; (8004d98 <print+0x4c>)
 8004d60:	210d      	movs	r1, #13
 8004d62:	0028      	movs	r0, r5
 8004d64:	f000 fdae 	bl	80058c4 <add_to_buffer_if_not_full>
        add_to_buffer_if_not_full(&uart_print, '\n');
 8004d68:	210a      	movs	r1, #10
 8004d6a:	0028      	movs	r0, r5
 8004d6c:	f000 fdaa 	bl	80058c4 <add_to_buffer_if_not_full>
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <print+0x50>)
        LL_USART_EnableIT_TXE_TXFNF(USART4);
        written_bytes += 2;
 8004d74:	3402      	adds	r4, #2
 8004d76:	6811      	ldr	r1, [r2, #0]
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6013      	str	r3, [r2, #0]
    }
    return written_bytes;
}
 8004d7c:	0020      	movs	r0, r4
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
        if (add_to_buffer_if_not_full(&uart_print, input[i])) written_bytes++;
 8004d80:	4805      	ldr	r0, [pc, #20]	; (8004d98 <print+0x4c>)
 8004d82:	f000 fd9f 	bl	80058c4 <add_to_buffer_if_not_full>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d001      	beq.n	8004d8e <print+0x42>
 8004d8a:	3401      	adds	r4, #1
 8004d8c:	e7e1      	b.n	8004d52 <print+0x6>
        log_error(EC_PRINT_BUFFER_FULL, 'p');
 8004d8e:	2170      	movs	r1, #112	; 0x70
 8004d90:	2003      	movs	r0, #3
 8004d92:	f000 fe15 	bl	80059c0 <log_error>
 8004d96:	e7e0      	b.n	8004d5a <print+0xe>
 8004d98:	20000144 	.word	0x20000144
 8004d9c:	40004c00 	.word	0x40004c00

08004da0 <_putchar>:

void _putchar(char character) {
 8004da0:	b510      	push	{r4, lr}
 8004da2:	0001      	movs	r1, r0
    if (!add_to_buffer_if_not_full(&uart_print, character)) {
 8004da4:	4807      	ldr	r0, [pc, #28]	; (8004dc4 <_putchar+0x24>)
 8004da6:	f000 fd8d 	bl	80058c4 <add_to_buffer_if_not_full>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d104      	bne.n	8004db8 <_putchar+0x18>
        log_error(EC_PRINT_BUFFER_FULL, 'c');
 8004dae:	2163      	movs	r1, #99	; 0x63
 8004db0:	3003      	adds	r0, #3
 8004db2:	f000 fe05 	bl	80059c0 <log_error>
    } else {
        LL_USART_EnableIT_TXE_TXFNF(USART4);
    }
}
 8004db6:	bd10      	pop	{r4, pc}
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	4a03      	ldr	r2, [pc, #12]	; (8004dc8 <_putchar+0x28>)
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e7f8      	b.n	8004db6 <_putchar+0x16>
 8004dc4:	20000144 	.word	0x20000144
 8004dc8:	40004c00 	.word	0x40004c00

08004dcc <USART1_IRQHandler>:
 8004dcc:	4770      	bx	lr

08004dce <USART2_IRQHandler>:

    /* USER CODE END USART2_IRQn 0 */
    /* USER CODE BEGIN USART2_IRQn 1 */

    /* USER CODE END USART2_IRQn 1 */
}
 8004dce:	4770      	bx	lr

08004dd0 <uart_4_rx>:
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <uart_4_rx+0x18>)

void uart_4_rx() {
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	061b      	lsls	r3, r3, #24
 8004dda:	d503      	bpl.n	8004de4 <uart_4_rx+0x14>
    char data = LL_USART_ReceiveData8(USART4);
    if (LL_USART_IsActiveFlag_TXE_TXFNF(USART4)) {
        add_to_buffer(&uart_cmd, data);
 8004ddc:	b2c9      	uxtb	r1, r1
 8004dde:	4803      	ldr	r0, [pc, #12]	; (8004dec <uart_4_rx+0x1c>)
 8004de0:	f000 fd50 	bl	8005884 <add_to_buffer>
    }
}
 8004de4:	bd10      	pop	{r4, pc}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	40004c00 	.word	0x40004c00
 8004dec:	20000138 	.word	0x20000138

08004df0 <uart_4_tx>:

void uart_4_tx() {
    Buffer_read_result result = { 0, false };
 8004df0:	2300      	movs	r3, #0
void uart_4_tx() {
 8004df2:	b513      	push	{r0, r1, r4, lr}
    Buffer_read_result result = { 0, false };
 8004df4:	ac01      	add	r4, sp, #4
    get_from_buffer(&uart_print, &result);
 8004df6:	0021      	movs	r1, r4
 8004df8:	4808      	ldr	r0, [pc, #32]	; (8004e1c <uart_4_tx+0x2c>)
    Buffer_read_result result = { 0, false };
 8004dfa:	7023      	strb	r3, [r4, #0]
 8004dfc:	7063      	strb	r3, [r4, #1]
    get_from_buffer(&uart_print, &result);
 8004dfe:	f000 fd75 	bl	80058ec <get_from_buffer>
    if (result.readSuccess) {
 8004e02:	7862      	ldrb	r2, [r4, #1]
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <uart_4_tx+0x30>)
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	d002      	beq.n	8004e10 <uart_4_tx+0x20>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8004e0a:	7822      	ldrb	r2, [r4, #0]
 8004e0c:	629a      	str	r2, [r3, #40]	; 0x28
        LL_USART_TransmitData8(USART4, result.data);
    } else {
        //Disable transmit interrupts when there are no new data to transmit
        LL_USART_DisableIT_TXE_TXFNF(USART4);
    }
}
 8004e0e:	bd13      	pop	{r0, r1, r4, pc}
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004e10:	2180      	movs	r1, #128	; 0x80
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	438a      	bics	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e7f9      	b.n	8004e0e <uart_4_tx+0x1e>
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	20000144 	.word	0x20000144
 8004e20:	40004c00 	.word	0x40004c00

08004e24 <USART3_4_IRQHandler>:
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004e24:	2201      	movs	r2, #1
/**
 * @brief This function handles USART3 and USART4 interrupts.
 */
void USART3_4_IRQHandler(void)
{
 8004e26:	b570      	push	{r4, r5, r6, lr}
 8004e28:	4d1c      	ldr	r5, [pc, #112]	; (8004e9c <USART3_4_IRQHandler+0x78>)
 8004e2a:	682b      	ldr	r3, [r5, #0]
 8004e2c:	4393      	bics	r3, r2
 8004e2e:	602b      	str	r3, [r5, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004e30:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <USART3_4_IRQHandler+0x7c>)
 8004e32:	321f      	adds	r2, #31
 8004e34:	69d9      	ldr	r1, [r3, #28]
 8004e36:	001c      	movs	r4, r3
 8004e38:	4211      	tst	r1, r2
 8004e3a:	d10d      	bne.n	8004e58 <USART3_4_IRQHandler+0x34>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	69e2      	ldr	r2, [r4, #28]
 8004e40:	421a      	tst	r2, r3
 8004e42:	d113      	bne.n	8004e6c <USART3_4_IRQHandler+0x48>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004e44:	2602      	movs	r6, #2
 8004e46:	69e3      	ldr	r3, [r4, #28]
 8004e48:	4233      	tst	r3, r6
 8004e4a:	d015      	beq.n	8004e78 <USART3_4_IRQHandler+0x54>
    UART_IRQ(4, {
 8004e4c:	2169      	movs	r1, #105	; 0x69
 8004e4e:	2042      	movs	r0, #66	; 0x42
 8004e50:	f000 fdb6 	bl	80059c0 <log_error>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004e54:	6226      	str	r6, [r4, #32]
 8004e56:	e004      	b.n	8004e62 <USART3_4_IRQHandler+0x3e>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4213      	tst	r3, r2
 8004e5c:	d0ee      	beq.n	8004e3c <USART3_4_IRQHandler+0x18>
 8004e5e:	f7ff ffb7 	bl	8004dd0 <uart_4_rx>
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004e62:	2301      	movs	r3, #1
 8004e64:	682a      	ldr	r2, [r5, #0]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	602b      	str	r3, [r5, #0]
    {
        uart_4_tx()
        ;
    })

}
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	421a      	tst	r2, r3
 8004e70:	d0e8      	beq.n	8004e44 <USART3_4_IRQHandler+0x20>
    UART_IRQ(4, {
 8004e72:	f7ff ffbd 	bl	8004df0 <uart_4_tx>
 8004e76:	e7f4      	b.n	8004e62 <USART3_4_IRQHandler+0x3e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004e78:	2604      	movs	r6, #4
 8004e7a:	69e3      	ldr	r3, [r4, #28]
 8004e7c:	4233      	tst	r3, r6
 8004e7e:	d002      	beq.n	8004e86 <USART3_4_IRQHandler+0x62>
 8004e80:	2169      	movs	r1, #105	; 0x69
 8004e82:	2043      	movs	r0, #67	; 0x43
 8004e84:	e7e4      	b.n	8004e50 <USART3_4_IRQHandler+0x2c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004e86:	2608      	movs	r6, #8
 8004e88:	69e3      	ldr	r3, [r4, #28]
 8004e8a:	2169      	movs	r1, #105	; 0x69
 8004e8c:	4233      	tst	r3, r6
 8004e8e:	d103      	bne.n	8004e98 <USART3_4_IRQHandler+0x74>
 8004e90:	204f      	movs	r0, #79	; 0x4f
 8004e92:	f000 fd95 	bl	80059c0 <log_error>
 8004e96:	e7e4      	b.n	8004e62 <USART3_4_IRQHandler+0x3e>
 8004e98:	2041      	movs	r0, #65	; 0x41
 8004e9a:	e7d9      	b.n	8004e50 <USART3_4_IRQHandler+0x2c>
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40004c00 	.word	0x40004c00

08004ea4 <animate_top_bar>:

inline void seq_prev_level() {
    counter_dec(&seq.current_level);
}

void animate_top_bar() {
 8004ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (anim.need_run) {
 8004ea6:	4d28      	ldr	r5, [pc, #160]	; (8004f48 <animate_top_bar+0xa4>)
void animate_top_bar() {
 8004ea8:	b085      	sub	sp, #20
    if (anim.need_run) {
 8004eaa:	7a2b      	ldrb	r3, [r5, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d014      	beq.n	8004eda <animate_top_bar+0x36>
        u32 current_time = (u32) seq.current_ms & 0xFFFFFFFF;
 8004eb0:	4b26      	ldr	r3, [pc, #152]	; (8004f4c <animate_top_bar+0xa8>)
 8004eb2:	6a9e      	ldr	r6, [r3, #40]	; 0x28
        if (!anim.start_time) {
 8004eb4:	686b      	ldr	r3, [r5, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d100      	bne.n	8004ebc <animate_top_bar+0x18>
            anim.start_time = current_time;
 8004eba:	606e      	str	r6, [r5, #4]
        u32 run_time = current_time - anim.start_time;
        u16 speed = anim.speed * 10;
        u16 current_frame = run_time / speed;
        bool show = true;

        switch (anim.anim) {
 8004ebc:	7a6c      	ldrb	r4, [r5, #9]
        u32 run_time = current_time - anim.start_time;
 8004ebe:	686f      	ldr	r7, [r5, #4]
        switch (anim.anim) {
 8004ec0:	2c00      	cmp	r4, #0
 8004ec2:	d00c      	beq.n	8004ede <animate_top_bar+0x3a>
 8004ec4:	2c01      	cmp	r4, #1
 8004ec6:	d019      	beq.n	8004efc <animate_top_bar+0x58>
                                IN_HIGH : IN_OFF;
            }
            break;
        }

        if (anim.start_time + (anim.length * 10) <= current_time) {
 8004ec8:	230a      	movs	r3, #10
 8004eca:	78aa      	ldrb	r2, [r5, #2]
 8004ecc:	4353      	muls	r3, r2
 8004ece:	19df      	adds	r7, r3, r7
 8004ed0:	42be      	cmp	r6, r7
 8004ed2:	d302      	bcc.n	8004eda <animate_top_bar+0x36>
            anim.start_time = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	606b      	str	r3, [r5, #4]
            anim.need_run = false;
 8004ed8:	722b      	strb	r3, [r5, #8]
        }

    }
}
 8004eda:	b005      	add	sp, #20
 8004edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                display.top_bar_precise[x] = x >> 2 == anim.data ? IN_HIGH : IN_OFF;
 8004ede:	231f      	movs	r3, #31
 8004ee0:	469c      	mov	ip, r3
 8004ee2:	7828      	ldrb	r0, [r5, #0]
 8004ee4:	491a      	ldr	r1, [pc, #104]	; (8004f50 <animate_top_bar+0xac>)
 8004ee6:	08a3      	lsrs	r3, r4, #2
 8004ee8:	4662      	mov	r2, ip
 8004eea:	4283      	cmp	r3, r0
 8004eec:	d000      	beq.n	8004ef0 <animate_top_bar+0x4c>
 8004eee:	2200      	movs	r2, #0
 8004ef0:	1863      	adds	r3, r4, r1
            loop(x,32)
 8004ef2:	3401      	adds	r4, #1
                display.top_bar_precise[x] = x >> 2 == anim.data ? IN_HIGH : IN_OFF;
 8004ef4:	709a      	strb	r2, [r3, #2]
            loop(x,32)
 8004ef6:	2c20      	cmp	r4, #32
 8004ef8:	d1f5      	bne.n	8004ee6 <animate_top_bar+0x42>
 8004efa:	e7e5      	b.n	8004ec8 <animate_top_bar+0x24>
        u16 current_frame = run_time / speed;
 8004efc:	230a      	movs	r3, #10
        u16 speed = anim.speed * 10;
 8004efe:	7869      	ldrb	r1, [r5, #1]
        u32 run_time = current_time - anim.start_time;
 8004f00:	1bf0      	subs	r0, r6, r7
        u16 current_frame = run_time / speed;
 8004f02:	4359      	muls	r1, r3
 8004f04:	f7fb f8fc 	bl	8000100 <__udivsi3>
                                IN_HIGH : IN_OFF;
 8004f08:	221f      	movs	r2, #31
                        x >> 2 == anim.data && show && (anim.light_pattern & (1 << (x % 4))) ?
 8004f0a:	782b      	ldrb	r3, [r5, #0]
                                IN_HIGH : IN_OFF;
 8004f0c:	4694      	mov	ip, r2
                        x >> 2 == anim.data && show && (anim.light_pattern & (1 << (x % 4))) ?
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	78eb      	ldrb	r3, [r5, #3]
            if (current_frame % 2) show = false;
 8004f12:	4020      	ands	r0, r4
                        x >> 2 == anim.data && show && (anim.light_pattern & (1 << (x % 4))) ?
 8004f14:	9302      	str	r3, [sp, #8]
            loop(x, 32)
 8004f16:	2300      	movs	r3, #0
                        x >> 2 == anim.data && show && (anim.light_pattern & (1 << (x % 4))) ?
 8004f18:	9403      	str	r4, [sp, #12]
                                IN_HIGH : IN_OFF;
 8004f1a:	9c01      	ldr	r4, [sp, #4]
                        x >> 2 == anim.data && show && (anim.light_pattern & (1 << (x % 4))) ?
 8004f1c:	0899      	lsrs	r1, r3, #2
                                IN_HIGH : IN_OFF;
 8004f1e:	2200      	movs	r2, #0
 8004f20:	42a1      	cmp	r1, r4
 8004f22:	d10a      	bne.n	8004f3a <animate_top_bar+0x96>
                        x >> 2 == anim.data && show && (anim.light_pattern & (1 << (x % 4))) ?
 8004f24:	4290      	cmp	r0, r2
 8004f26:	d108      	bne.n	8004f3a <animate_top_bar+0x96>
 8004f28:	3203      	adds	r2, #3
 8004f2a:	9902      	ldr	r1, [sp, #8]
 8004f2c:	401a      	ands	r2, r3
 8004f2e:	4111      	asrs	r1, r2
 8004f30:	9c03      	ldr	r4, [sp, #12]
                                IN_HIGH : IN_OFF;
 8004f32:	0002      	movs	r2, r0
                        x >> 2 == anim.data && show && (anim.light_pattern & (1 << (x % 4))) ?
 8004f34:	4221      	tst	r1, r4
 8004f36:	d000      	beq.n	8004f3a <animate_top_bar+0x96>
                                IN_HIGH : IN_OFF;
 8004f38:	4662      	mov	r2, ip
                display.top_bar_precise[x] =
 8004f3a:	4905      	ldr	r1, [pc, #20]	; (8004f50 <animate_top_bar+0xac>)
 8004f3c:	1859      	adds	r1, r3, r1
            loop(x, 32)
 8004f3e:	3301      	adds	r3, #1
                display.top_bar_precise[x] =
 8004f40:	708a      	strb	r2, [r1, #2]
            loop(x, 32)
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d1e9      	bne.n	8004f1a <animate_top_bar+0x76>
 8004f46:	e7bf      	b.n	8004ec8 <animate_top_bar+0x24>
 8004f48:	200006f8 	.word	0x200006f8
 8004f4c:	20000150 	.word	0x20000150
 8004f50:	20000060 	.word	0x20000060

08004f54 <update_seq_position>:

void update_seq_position() {
 8004f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (seq.current_ms < seq.start_ms) {
 8004f56:	4c19      	ldr	r4, [pc, #100]	; (8004fbc <update_seq_position+0x68>)
 8004f58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004f5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d804      	bhi.n	8004f6a <update_seq_position+0x16>
 8004f60:	d10a      	bne.n	8004f78 <update_seq_position+0x24>
 8004f62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d906      	bls.n	8004f78 <update_seq_position+0x24>
        printf("Invalid sequencer status, current behind start ms, resetting start to current\r\n");
 8004f6a:	4815      	ldr	r0, [pc, #84]	; (8004fc0 <update_seq_position+0x6c>)
 8004f6c:	f7ff f9ac 	bl	80042c8 <printf_>
        seq.start_ms = seq.current_ms;
 8004f70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f74:	6322      	str	r2, [r4, #48]	; 0x30
 8004f76:	6363      	str	r3, [r4, #52]	; 0x34
    }
    u16 sixteenth = bpm_to_4th_ms(seq.bpm) / 4;
 8004f78:	1da3      	adds	r3, r4, #6
    return 60000 / bpm;
 8004f7a:	7fd9      	ldrb	r1, [r3, #31]
 8004f7c:	4811      	ldr	r0, [pc, #68]	; (8004fc4 <update_seq_position+0x70>)
 8004f7e:	f7fb f949 	bl	8000214 <__divsi3>
    u32 playback_ms = seq.current_ms - seq.start_ms;
 8004f82:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8004f84:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    u16 sixteenth = bpm_to_4th_ms(seq.bpm) / 4;
 8004f88:	b285      	uxth	r5, r0
 8004f8a:	08ad      	lsrs	r5, r5, #2
    u32 playback_ms = seq.current_ms - seq.start_ms;
 8004f8c:	1b98      	subs	r0, r3, r6
    u16 current_pos = playback_ms / sixteenth;
 8004f8e:	0029      	movs	r1, r5
 8004f90:	f7fb f8b6 	bl	8000100 <__udivsi3>
    if (current_pos >= 32) {
 8004f94:	b283      	uxth	r3, r0
 8004f96:	2b1f      	cmp	r3, #31
 8004f98:	d90a      	bls.n	8004fb0 <update_seq_position+0x5c>

        seq.start_ms += sixteenth * 32;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	016d      	lsls	r5, r5, #5
 8004f9e:	9500      	str	r5, [sp, #0]
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	9a00      	ldr	r2, [sp, #0]
 8004fa4:	9b01      	ldr	r3, [sp, #4]
 8004fa6:	18b6      	adds	r6, r6, r2
 8004fa8:	415f      	adcs	r7, r3
 8004faa:	6326      	str	r6, [r4, #48]	; 0x30
 8004fac:	6367      	str	r7, [r4, #52]	; 0x34
 8004fae:	e7d2      	b.n	8004f56 <update_seq_position+0x2>
        update_seq_position();
    } else {
        counter_set(current_pos, &seq.position);
 8004fb0:	0021      	movs	r1, r4
 8004fb2:	b280      	uxth	r0, r0
 8004fb4:	310c      	adds	r1, #12
 8004fb6:	f000 fcd4 	bl	8005962 <counter_set>
    }
}
 8004fba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004fbc:	20000150 	.word	0x20000150
 8004fc0:	08005d84 	.word	0x08005d84
 8004fc4:	0000ea60 	.word	0x0000ea60

08004fc8 <update_seq>:
void update_seq() {
 8004fc8:	b5f0      	push	{r4, r5, r6, r7, lr}

    if (seq.playing) {
 8004fca:	4c83      	ldr	r4, [pc, #524]	; (80051d8 <update_seq+0x210>)
void update_seq() {
 8004fcc:	b085      	sub	sp, #20
    if (seq.playing) {
 8004fce:	1d63      	adds	r3, r4, #5
 8004fd0:	7fdb      	ldrb	r3, [r3, #31]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <update_seq+0x12>
        update_seq_position();
 8004fd6:	f7ff ffbd 	bl	8004f54 <update_seq_position>
    }
    //TODO indicate part change
    if (button_pressed[5]) {
 8004fda:	4d80      	ldr	r5, [pc, #512]	; (80051dc <update_seq+0x214>)
 8004fdc:	796b      	ldrb	r3, [r5, #5]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d012      	beq.n	8005008 <update_seq+0x40>
        button_pressed[5]--;
 8004fe2:	3b01      	subs	r3, #1
    counter_inc(&seq.cursor);
 8004fe4:	0020      	movs	r0, r4
        button_pressed[5]--;
 8004fe6:	716b      	strb	r3, [r5, #5]
    counter_inc(&seq.cursor);
 8004fe8:	f000 fc95 	bl	8005916 <counter_inc>

    animate_top_bar();
}

void animate_flash(u8 data, Seq_animation * anim, bool light_variant) {
    anim->need_run = true;
 8004fec:	4b7c      	ldr	r3, [pc, #496]	; (80051e0 <update_seq+0x218>)
    anim->data = data;
 8004fee:	7a21      	ldrb	r1, [r4, #8]
    anim->need_run = true;
 8004ff0:	2201      	movs	r2, #1
    anim->data = data;
 8004ff2:	7019      	strb	r1, [r3, #0]
    anim->speed = 7;
 8004ff4:	2107      	movs	r1, #7
 8004ff6:	7059      	strb	r1, [r3, #1]
    anim->length = 50;
 8004ff8:	312b      	adds	r1, #43	; 0x2b
 8004ffa:	7099      	strb	r1, [r3, #2]
    anim->start_time = 0;
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	6059      	str	r1, [r3, #4]
    anim->light_pattern = light_variant ? 0xF : 0x9;
 8005000:	3109      	adds	r1, #9
    anim->need_run = true;
 8005002:	721a      	strb	r2, [r3, #8]
    anim->light_pattern = light_variant ? 0xF : 0x9;
 8005004:	70d9      	strb	r1, [r3, #3]
    anim->anim = SEQ_ANIM_FLASH_NUM;
 8005006:	725a      	strb	r2, [r3, #9]
    if (button_pressed[2]) {
 8005008:	78ab      	ldrb	r3, [r5, #2]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d012      	beq.n	8005034 <update_seq+0x6c>
        button_pressed[2]--;
 800500e:	3b01      	subs	r3, #1
    counter_dec(&seq.cursor);
 8005010:	0020      	movs	r0, r4
        button_pressed[2]--;
 8005012:	70ab      	strb	r3, [r5, #2]
    counter_dec(&seq.cursor);
 8005014:	f000 fc93 	bl	800593e <counter_dec>
    anim->need_run = true;
 8005018:	4b71      	ldr	r3, [pc, #452]	; (80051e0 <update_seq+0x218>)
    anim->data = data;
 800501a:	7a21      	ldrb	r1, [r4, #8]
    anim->need_run = true;
 800501c:	2201      	movs	r2, #1
    anim->data = data;
 800501e:	7019      	strb	r1, [r3, #0]
    anim->speed = 7;
 8005020:	2107      	movs	r1, #7
 8005022:	7059      	strb	r1, [r3, #1]
    anim->length = 50;
 8005024:	312b      	adds	r1, #43	; 0x2b
 8005026:	7099      	strb	r1, [r3, #2]
    anim->start_time = 0;
 8005028:	2100      	movs	r1, #0
 800502a:	6059      	str	r1, [r3, #4]
    anim->light_pattern = light_variant ? 0xF : 0x9;
 800502c:	3109      	adds	r1, #9
    anim->need_run = true;
 800502e:	721a      	strb	r2, [r3, #8]
    anim->light_pattern = light_variant ? 0xF : 0x9;
 8005030:	70d9      	strb	r1, [r3, #3]
    anim->anim = SEQ_ANIM_FLASH_NUM;
 8005032:	725a      	strb	r2, [r3, #9]
    if (button_pressed[3]) {
 8005034:	78eb      	ldrb	r3, [r5, #3]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d015      	beq.n	8005066 <update_seq+0x9e>
    counter_dec(&seq.current_level);
 800503a:	0020      	movs	r0, r4
        button_pressed[3]--;
 800503c:	3b01      	subs	r3, #1
    counter_dec(&seq.current_level);
 800503e:	3018      	adds	r0, #24
        button_pressed[3]--;
 8005040:	70eb      	strb	r3, [r5, #3]
    counter_dec(&seq.current_level);
 8005042:	f000 fc7c 	bl	800593e <counter_dec>
    anim->data = data;
 8005046:	2120      	movs	r1, #32
 8005048:	1861      	adds	r1, r4, r1
    anim->need_run = true;
 800504a:	4b65      	ldr	r3, [pc, #404]	; (80051e0 <update_seq+0x218>)
    anim->data = data;
 800504c:	7809      	ldrb	r1, [r1, #0]
    anim->need_run = true;
 800504e:	2201      	movs	r2, #1
    anim->data = data;
 8005050:	7019      	strb	r1, [r3, #0]
    anim->speed = 7;
 8005052:	2107      	movs	r1, #7
 8005054:	7059      	strb	r1, [r3, #1]
    anim->length = 50;
 8005056:	312b      	adds	r1, #43	; 0x2b
 8005058:	7099      	strb	r1, [r3, #2]
    anim->start_time = 0;
 800505a:	2100      	movs	r1, #0
 800505c:	6059      	str	r1, [r3, #4]
    anim->light_pattern = light_variant ? 0xF : 0x9;
 800505e:	310f      	adds	r1, #15
    anim->need_run = true;
 8005060:	721a      	strb	r2, [r3, #8]
    anim->light_pattern = light_variant ? 0xF : 0x9;
 8005062:	70d9      	strb	r1, [r3, #3]
    anim->anim = SEQ_ANIM_FLASH_NUM;
 8005064:	725a      	strb	r2, [r3, #9]
    if (button_pressed[4]) {
 8005066:	792b      	ldrb	r3, [r5, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <update_seq+0xd0>
    counter_inc(&seq.current_level);
 800506c:	0020      	movs	r0, r4
        button_pressed[4]--;
 800506e:	3b01      	subs	r3, #1
    counter_inc(&seq.current_level);
 8005070:	3018      	adds	r0, #24
        button_pressed[4]--;
 8005072:	712b      	strb	r3, [r5, #4]
    counter_inc(&seq.current_level);
 8005074:	f000 fc4f 	bl	8005916 <counter_inc>
    anim->data = data;
 8005078:	2120      	movs	r1, #32
 800507a:	1861      	adds	r1, r4, r1
    anim->need_run = true;
 800507c:	4b58      	ldr	r3, [pc, #352]	; (80051e0 <update_seq+0x218>)
    anim->data = data;
 800507e:	7809      	ldrb	r1, [r1, #0]
    anim->need_run = true;
 8005080:	2201      	movs	r2, #1
    anim->data = data;
 8005082:	7019      	strb	r1, [r3, #0]
    anim->speed = 7;
 8005084:	2107      	movs	r1, #7
 8005086:	7059      	strb	r1, [r3, #1]
    anim->length = 50;
 8005088:	312b      	adds	r1, #43	; 0x2b
 800508a:	7099      	strb	r1, [r3, #2]
    anim->start_time = 0;
 800508c:	2100      	movs	r1, #0
 800508e:	6059      	str	r1, [r3, #4]
    anim->light_pattern = light_variant ? 0xF : 0x9;
 8005090:	310f      	adds	r1, #15
    anim->need_run = true;
 8005092:	721a      	strb	r2, [r3, #8]
    anim->light_pattern = light_variant ? 0xF : 0x9;
 8005094:	70d9      	strb	r1, [r3, #3]
    anim->anim = SEQ_ANIM_FLASH_NUM;
 8005096:	725a      	strb	r2, [r3, #9]
            s8 * pitch = &seq.points[seq.current_level.data][x + (seq.cursor.data * 4)].pitch;
 8005098:	68a6      	ldr	r6, [r4, #8]
 800509a:	6a23      	ldr	r3, [r4, #32]
 800509c:	00b1      	lsls	r1, r6, #2
 800509e:	015b      	lsls	r3, r3, #5
 80050a0:	185b      	adds	r3, r3, r1
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	00f6      	lsls	r6, r6, #3
 80050a6:	3339      	adds	r3, #57	; 0x39
 80050a8:	4271      	negs	r1, r6
 80050aa:	4a4e      	ldr	r2, [pc, #312]	; (80051e4 <update_seq+0x21c>)
 80050ac:	18e3      	adds	r3, r4, r3
 80050ae:	9101      	str	r1, [sp, #4]
        if (!encoders[x].s) {
 80050b0:	88d7      	ldrh	r7, [r2, #6]
 80050b2:	2f00      	cmp	r7, #0
 80050b4:	d000      	beq.n	80050b8 <update_seq+0xf0>
 80050b6:	e077      	b.n	80051a8 <update_seq+0x1e0>
 80050b8:	9901      	ldr	r1, [sp, #4]
 80050ba:	1e70      	subs	r0, r6, #1
 80050bc:	1859      	adds	r1, r3, r1
 80050be:	1809      	adds	r1, r1, r0
                    if (((u32) (*velo)) + increment > 0xFF) *velo = UINT8_MAX;
 80050c0:	20ff      	movs	r0, #255	; 0xff
 80050c2:	4684      	mov	ip, r0
            while (*step) {
 80050c4:	2500      	movs	r5, #0
 80050c6:	5f50      	ldrsh	r0, [r2, r5]
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d150      	bne.n	800516e <update_seq+0x1a6>
    loop(x,4)
 80050cc:	4946      	ldr	r1, [pc, #280]	; (80051e8 <update_seq+0x220>)
 80050ce:	3218      	adds	r2, #24
 80050d0:	3302      	adds	r3, #2
 80050d2:	428a      	cmp	r2, r1
 80050d4:	d1ec      	bne.n	80050b0 <update_seq+0xe8>
        if (seq.playing) {
 80050d6:	1d63      	adds	r3, r4, #5
 80050d8:	7fdb      	ldrb	r3, [r3, #31]
            if (seq.position.data == x) {
 80050da:	2200      	movs	r2, #0
        if (seq.playing) {
 80050dc:	9301      	str	r3, [sp, #4]
            if (seq.position.data == x) {
 80050de:	6963      	ldr	r3, [r4, #20]
                intensity = IN_LOW;
 80050e0:	2601      	movs	r6, #1
            if (seq.position.data == x) {
 80050e2:	9302      	str	r3, [sp, #8]
 80050e4:	6a23      	ldr	r3, [r4, #32]
                intensity = IN_HIGH_MED;
 80050e6:	2715      	movs	r7, #21
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	9303      	str	r3, [sp, #12]
                intensity = IN_HIGH;
 80050ec:	231f      	movs	r3, #31
 80050ee:	469c      	mov	ip, r3
 80050f0:	493e      	ldr	r1, [pc, #248]	; (80051ec <update_seq+0x224>)
        u8 vel = seq.points[seq.current_level.data][x].velocity;
 80050f2:	9803      	ldr	r0, [sp, #12]
 80050f4:	0053      	lsls	r3, r2, #1
 80050f6:	181b      	adds	r3, r3, r0
 80050f8:	3338      	adds	r3, #56	; 0x38
 80050fa:	5ce0      	ldrb	r0, [r4, r3]
        Intensity intensity = IN_OFF;
 80050fc:	2300      	movs	r3, #0
        if (vel) {
 80050fe:	4298      	cmp	r0, r3
 8005100:	d00a      	beq.n	8005118 <update_seq+0x150>
                intensity = IN_LOW;
 8005102:	0033      	movs	r3, r6
            if (vel < 64) {
 8005104:	283f      	cmp	r0, #63	; 0x3f
 8005106:	d907      	bls.n	8005118 <update_seq+0x150>
            } else if (vel < 128) {
 8005108:	b245      	sxtb	r5, r0
                intensity = IN_LOW_MED;
 800510a:	2305      	movs	r3, #5
            } else if (vel < 128) {
 800510c:	2d00      	cmp	r5, #0
 800510e:	da03      	bge.n	8005118 <update_seq+0x150>
                intensity = IN_HIGH;
 8005110:	4663      	mov	r3, ip
            } else if (vel < 192) {
 8005112:	28bf      	cmp	r0, #191	; 0xbf
 8005114:	d800      	bhi.n	8005118 <update_seq+0x150>
                intensity = IN_HIGH_MED;
 8005116:	003b      	movs	r3, r7
        if (seq.playing) {
 8005118:	9801      	ldr	r0, [sp, #4]
        display.top_bar_precise[x] = intensity;
 800511a:	700b      	strb	r3, [r1, #0]
        if (seq.playing) {
 800511c:	2800      	cmp	r0, #0
 800511e:	d005      	beq.n	800512c <update_seq+0x164>
            if (seq.position.data == x) {
 8005120:	9802      	ldr	r0, [sp, #8]
 8005122:	4290      	cmp	r0, r2
 8005124:	d102      	bne.n	800512c <update_seq+0x164>
                if (display.top_bar_precise[x] != IN_LOW) {
 8005126:	2b01      	cmp	r3, #1
 8005128:	d054      	beq.n	80051d4 <update_seq+0x20c>
                    display.top_bar_precise[x] = IN_LOW;
 800512a:	700e      	strb	r6, [r1, #0]
    loop(x, 32)
 800512c:	3201      	adds	r2, #1
 800512e:	3101      	adds	r1, #1
 8005130:	2a20      	cmp	r2, #32
 8005132:	d1de      	bne.n	80050f2 <update_seq+0x12a>
 8005134:	2600      	movs	r6, #0
 8005136:	4f2e      	ldr	r7, [pc, #184]	; (80051f0 <update_seq+0x228>)
        Seq_event * seq_event = &seq.points[seq.current_level.data][x + (seq.cursor.data * 4)];
 8005138:	68a3      	ldr	r3, [r4, #8]
        led_calculate_bar_16(seq_event->velocity, display.encoders[x].red_precise);
 800513a:	6a22      	ldr	r2, [r4, #32]
        Seq_event * seq_event = &seq.points[seq.current_level.data][x + (seq.cursor.data * 4)];
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	199b      	adds	r3, r3, r6
        led_calculate_bar_16(seq_event->velocity, display.encoders[x].red_precise);
 8005140:	0155      	lsls	r5, r2, #5
 8005142:	18ed      	adds	r5, r5, r3
 8005144:	351c      	adds	r5, #28
 8005146:	006d      	lsls	r5, r5, #1
 8005148:	5d60      	ldrb	r0, [r4, r5]
 800514a:	0039      	movs	r1, r7
 800514c:	f7ff fb98 	bl	8004880 <led_calculate_bar_16>
        led_calculate_bar_signed_16(seq_event->pitch, display.encoders[x].green_precise);
 8005150:	0039      	movs	r1, r7
 8005152:	2001      	movs	r0, #1
 8005154:	1965      	adds	r5, r4, r5
 8005156:	3910      	subs	r1, #16
 8005158:	5628      	ldrsb	r0, [r5, r0]
 800515a:	3601      	adds	r6, #1
 800515c:	f7ff fba6 	bl	80048ac <led_calculate_bar_signed_16>
 8005160:	3722      	adds	r7, #34	; 0x22
    loop(x,4)
 8005162:	2e04      	cmp	r6, #4
 8005164:	d1e8      	bne.n	8005138 <update_seq+0x170>
    animate_top_bar();
 8005166:	f7ff fe9d 	bl	8004ea4 <animate_top_bar>
}
 800516a:	b005      	add	sp, #20
 800516c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516e:	780d      	ldrb	r5, [r1, #0]
                if (*step > 0) {
 8005170:	2800      	cmp	r0, #0
 8005172:	dd07      	ble.n	8005184 <update_seq+0x1bc>
                    if (((u32) (*velo)) + increment > 0xFF) *velo = UINT8_MAX;
 8005174:	3540      	adds	r5, #64	; 0x40
 8005176:	2dff      	cmp	r5, #255	; 0xff
 8005178:	d900      	bls.n	800517c <update_seq+0x1b4>
 800517a:	4665      	mov	r5, ip
                    else *velo += increment;
 800517c:	700d      	strb	r5, [r1, #0]
                    *step -= 1;
 800517e:	3801      	subs	r0, #1
                    *step += 1;
 8005180:	8010      	strh	r0, [r2, #0]
 8005182:	e79f      	b.n	80050c4 <update_seq+0xfc>
                    if (((s32) (*velo)) - increment < 0) *velo = 0x00;
 8005184:	2d3f      	cmp	r5, #63	; 0x3f
 8005186:	dc02      	bgt.n	800518e <update_seq+0x1c6>
 8005188:	700f      	strb	r7, [r1, #0]
                    *step += 1;
 800518a:	3001      	adds	r0, #1
 800518c:	e7f8      	b.n	8005180 <update_seq+0x1b8>
                    else *velo -= increment;
 800518e:	3d40      	subs	r5, #64	; 0x40
 8005190:	700d      	strb	r5, [r1, #0]
 8005192:	e7fa      	b.n	800518a <update_seq+0x1c2>
                    if (((s32) (*pitch)) + increment > INT8_MAX) *pitch = INT8_MAX;
 8005194:	2000      	movs	r0, #0
 8005196:	5618      	ldrsb	r0, [r3, r0]
                if (*step > 0) {
 8005198:	2900      	cmp	r1, #0
 800519a:	dd13      	ble.n	80051c4 <update_seq+0x1fc>
                    if (((s32) (*pitch)) + increment > INT8_MAX) *pitch = INT8_MAX;
 800519c:	286f      	cmp	r0, #111	; 0x6f
 800519e:	dd0f      	ble.n	80051c0 <update_seq+0x1f8>
 80051a0:	207f      	movs	r0, #127	; 0x7f
                    else *pitch += increment;
 80051a2:	7018      	strb	r0, [r3, #0]
                    *step -= 1;
 80051a4:	3901      	subs	r1, #1
                    *step += 1;
 80051a6:	8011      	strh	r1, [r2, #0]
            while (*step) {
 80051a8:	2000      	movs	r0, #0
 80051aa:	5e11      	ldrsh	r1, [r2, r0]
 80051ac:	2900      	cmp	r1, #0
 80051ae:	d1f1      	bne.n	8005194 <update_seq+0x1cc>
            if (*pitch < 0 + (increment / 2) && *pitch > 0 - (increment / 2)) {
 80051b0:	7818      	ldrb	r0, [r3, #0]
 80051b2:	3007      	adds	r0, #7
 80051b4:	b2c0      	uxtb	r0, r0
 80051b6:	280e      	cmp	r0, #14
 80051b8:	d900      	bls.n	80051bc <update_seq+0x1f4>
 80051ba:	e787      	b.n	80050cc <update_seq+0x104>
                *pitch = 0;
 80051bc:	7019      	strb	r1, [r3, #0]
 80051be:	e785      	b.n	80050cc <update_seq+0x104>
                    else *pitch += increment;
 80051c0:	3010      	adds	r0, #16
 80051c2:	e7ee      	b.n	80051a2 <update_seq+0x1da>
                    if (((s32) (*pitch)) - increment < INT8_MIN) *pitch = INT8_MIN;
 80051c4:	0005      	movs	r5, r0
                    else *pitch -= increment;
 80051c6:	3810      	subs	r0, #16
                    if (((s32) (*pitch)) - increment < INT8_MIN) *pitch = INT8_MIN;
 80051c8:	3570      	adds	r5, #112	; 0x70
 80051ca:	da00      	bge.n	80051ce <update_seq+0x206>
 80051cc:	2080      	movs	r0, #128	; 0x80
                    else *pitch -= increment;
 80051ce:	7018      	strb	r0, [r3, #0]
                    *step += 1;
 80051d0:	3101      	adds	r1, #1
 80051d2:	e7e8      	b.n	80051a6 <update_seq+0x1de>
                    display.top_bar_precise[x] = IN_HIGH_MED;
 80051d4:	700f      	strb	r7, [r1, #0]
 80051d6:	e7a9      	b.n	800512c <update_seq+0x164>
 80051d8:	20000150 	.word	0x20000150
 80051dc:	200005b8 	.word	0x200005b8
 80051e0:	200006f8 	.word	0x200006f8
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	2000006c 	.word	0x2000006c
 80051ec:	20000062 	.word	0x20000062
 80051f0:	20000092 	.word	0x20000092

080051f4 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80051f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f6:	b093      	sub	sp, #76	; 0x4c
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80051f8:	2228      	movs	r2, #40	; 0x28
 80051fa:	2100      	movs	r1, #0
 80051fc:	a808      	add	r0, sp, #32
 80051fe:	f000 fc3f 	bl	8005a80 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005202:	2218      	movs	r2, #24
 8005204:	2100      	movs	r1, #0
 8005206:	a802      	add	r0, sp, #8
 8005208:	f000 fc3a 	bl	8005a80 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 800520c:	2080      	movs	r0, #128	; 0x80
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <MX_SPI1_Init+0xd4>)
 8005210:	0140      	lsls	r0, r0, #5
 8005212:	6c19      	ldr	r1, [r3, #64]	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005214:	27a0      	movs	r7, #160	; 0xa0
 8005216:	4301      	orrs	r1, r0
 8005218:	6419      	str	r1, [r3, #64]	; 0x40
  SET_BIT(RCC->IOPENR, Periphs);
 800521a:	2101      	movs	r1, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800521c:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800521e:	2610      	movs	r6, #16
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8005220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005222:	05ff      	lsls	r7, r7, #23
 8005224:	4002      	ands	r2, r0
 8005226:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005228:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800522a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522c:	0038      	movs	r0, r7
 800522e:	430a      	orrs	r2, r1
 8005230:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005234:	2400      	movs	r4, #0
 8005236:	400b      	ands	r3, r1
 8005238:	9300      	str	r3, [sp, #0]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523a:	a902      	add	r1, sp, #8
  (void)tmpreg;
 800523c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800523e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005240:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005242:	9504      	str	r5, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005244:	f7fc ffea 	bl	800221c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8005248:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800524a:	a902      	add	r1, sp, #8
 800524c:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800524e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005250:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005252:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8005254:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005256:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005258:	9504      	str	r5, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525a:	f7fc ffdf 	bl	800221c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800525e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005260:	a902      	add	r1, sp, #8
 8005262:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005264:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005266:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005268:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800526a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800526c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800526e:	9503      	str	r5, [sp, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005270:	f7fc ffd4 	bl	800221c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8005274:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005276:	a902      	add	r1, sp, #8
 8005278:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800527a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800527c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800527e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8005280:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005282:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005284:	9504      	str	r5, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005286:	f7fc ffc9 	bl	800221c <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800528a:	2382      	movs	r3, #130	; 0x82
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8005290:	23f0      	movs	r3, #240	; 0xf0
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	930a      	str	r3, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	02db      	lsls	r3, r3, #11
 800529a:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
  SPI_InitStruct.CRCPoly = 7;
 800529c:	2307      	movs	r3, #7
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800529e:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80052a0:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80052a2:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80052a4:	940e      	str	r4, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80052a6:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80052a8:	9410      	str	r4, [sp, #64]	; 0x40
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80052aa:	4c08      	ldr	r4, [pc, #32]	; (80052cc <MX_SPI1_Init+0xd8>)
 80052ac:	a908      	add	r1, sp, #32
 80052ae:	0020      	movs	r0, r4
  SPI_InitStruct.CRCPoly = 7;
 80052b0:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80052b2:	f7fd f917 	bl	80024e4 <LL_SPI_Init>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80052b6:	6863      	ldr	r3, [r4, #4]
 80052b8:	43b3      	bics	r3, r6
 80052ba:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80052bc:	2308      	movs	r3, #8
 80052be:	6862      	ldr	r2, [r4, #4]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	6063      	str	r3, [r4, #4]
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
  LL_SPI_EnableNSSPulseMgt(SPI1);

}
 80052c4:	b013      	add	sp, #76	; 0x4c
 80052c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40013000 	.word	0x40013000

080052d0 <NMI_Handler>:
 80052d0:	4770      	bx	lr
	...

080052d4 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80052d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  *spidr = TxData;
 80052d6:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HardFault_Handler+0xa0>)
 80052d8:	4c27      	ldr	r4, [pc, #156]	; (8005378 <HardFault_Handler+0xa4>)
 80052da:	b085      	sub	sp, #20
 80052dc:	81a3      	strh	r3, [r4, #12]
    /* USER CODE BEGIN HardFault_IRQn 0 */

    LL_SPI_TransmitData16(SPI1, 0xAAAA);
    mux_off();
 80052de:	f7ff fc43 	bl	8004b68 <mux_off>

    volatile int b = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	0021      	movs	r1, r4
        LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[p],
                mux_port[p]->ODR | mux_pin[p]);

        a++;
        p++;
        if (p > 9) p = 0;
 80052e6:	001c      	movs	r4, r3
    volatile int a_max = 0xFFFFF >> 1;
 80052e8:	4a24      	ldr	r2, [pc, #144]	; (800537c <HardFault_Handler+0xa8>)
    volatile int b = 0;
 80052ea:	9300      	str	r3, [sp, #0]
    volatile int a_max = 0xFFFFF >> 1;
 80052ec:	9201      	str	r2, [sp, #4]
    volatile int a = a_max;
 80052ee:	9a01      	ldr	r2, [sp, #4]
 80052f0:	9202      	str	r2, [sp, #8]
        LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[p],
 80052f2:	4a23      	ldr	r2, [pc, #140]	; (8005380 <HardFault_Handler+0xac>)
    volatile int p = 0;
 80052f4:	9303      	str	r3, [sp, #12]
                mux_port[p]->ODR & ~mux_pin[p]);
 80052f6:	4d23      	ldr	r5, [pc, #140]	; (8005384 <HardFault_Handler+0xb0>)
        LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[p],
 80052f8:	9803      	ldr	r0, [sp, #12]
 80052fa:	0080      	lsls	r0, r0, #2
 80052fc:	5887      	ldr	r7, [r0, r2]
                mux_port[p]->ODR & ~mux_pin[p]);
 80052fe:	9803      	ldr	r0, [sp, #12]
 8005300:	0080      	lsls	r0, r0, #2
 8005302:	5880      	ldr	r0, [r0, r2]
 8005304:	6940      	ldr	r0, [r0, #20]
 8005306:	9e03      	ldr	r6, [sp, #12]
 8005308:	0076      	lsls	r6, r6, #1
 800530a:	5b76      	ldrh	r6, [r6, r5]
        LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[p],
 800530c:	43b0      	bics	r0, r6
 800530e:	6178      	str	r0, [r7, #20]
        LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[p],
 8005310:	9803      	ldr	r0, [sp, #12]
 8005312:	0080      	lsls	r0, r0, #2
 8005314:	5887      	ldr	r7, [r0, r2]
                mux_port[p]->ODR | mux_pin[p]);
 8005316:	9803      	ldr	r0, [sp, #12]
 8005318:	0080      	lsls	r0, r0, #2
 800531a:	5880      	ldr	r0, [r0, r2]
 800531c:	6940      	ldr	r0, [r0, #20]
 800531e:	9e03      	ldr	r6, [sp, #12]
 8005320:	4684      	mov	ip, r0
 8005322:	0076      	lsls	r6, r6, #1
 8005324:	5b70      	ldrh	r0, [r6, r5]
        LL_GPIO_WriteOutputPort((GPIO_TypeDef *) mux_port[p],
 8005326:	4666      	mov	r6, ip
 8005328:	4330      	orrs	r0, r6
 800532a:	6178      	str	r0, [r7, #20]
        a++;
 800532c:	9802      	ldr	r0, [sp, #8]
 800532e:	3001      	adds	r0, #1
 8005330:	9002      	str	r0, [sp, #8]
        p++;
 8005332:	9803      	ldr	r0, [sp, #12]
 8005334:	3001      	adds	r0, #1
 8005336:	9003      	str	r0, [sp, #12]
        if (p > 9) p = 0;
 8005338:	9803      	ldr	r0, [sp, #12]
 800533a:	2809      	cmp	r0, #9
 800533c:	dd00      	ble.n	8005340 <HardFault_Handler+0x6c>
 800533e:	9403      	str	r4, [sp, #12]
        if (a > a_max) {
 8005340:	9e02      	ldr	r6, [sp, #8]
 8005342:	9801      	ldr	r0, [sp, #4]
 8005344:	4286      	cmp	r6, r0
 8005346:	ddd7      	ble.n	80052f8 <HardFault_Handler+0x24>
            a = 0;
 8005348:	9402      	str	r4, [sp, #8]
            LL_SPI_TransmitData16(SPI1, b > 0 ? (b > 1 ? 0xAAAA : 0xFFFF) : 0x5555);
 800534a:	9800      	ldr	r0, [sp, #0]
 800534c:	2800      	cmp	r0, #0
 800534e:	dd0c      	ble.n	800536a <HardFault_Handler+0x96>
 8005350:	9800      	ldr	r0, [sp, #0]
 8005352:	2801      	cmp	r0, #1
 8005354:	dc0b      	bgt.n	800536e <HardFault_Handler+0x9a>
 8005356:	480c      	ldr	r0, [pc, #48]	; (8005388 <HardFault_Handler+0xb4>)
 8005358:	8188      	strh	r0, [r1, #12]
            b++;
 800535a:	9800      	ldr	r0, [sp, #0]
 800535c:	3001      	adds	r0, #1
 800535e:	9000      	str	r0, [sp, #0]
            if (b > 2) b = 0;
 8005360:	9800      	ldr	r0, [sp, #0]
 8005362:	2802      	cmp	r0, #2
 8005364:	ddc8      	ble.n	80052f8 <HardFault_Handler+0x24>
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	e7c5      	b.n	80052f6 <HardFault_Handler+0x22>
            LL_SPI_TransmitData16(SPI1, b > 0 ? (b > 1 ? 0xAAAA : 0xFFFF) : 0x5555);
 800536a:	4808      	ldr	r0, [pc, #32]	; (800538c <HardFault_Handler+0xb8>)
 800536c:	e7f4      	b.n	8005358 <HardFault_Handler+0x84>
 800536e:	4808      	ldr	r0, [pc, #32]	; (8005390 <HardFault_Handler+0xbc>)
 8005370:	e7f2      	b.n	8005358 <HardFault_Handler+0x84>
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	ffffaaaa 	.word	0xffffaaaa
 8005378:	40013000 	.word	0x40013000
 800537c:	0007ffff 	.word	0x0007ffff
 8005380:	2000010c 	.word	0x2000010c
 8005384:	08005d70 	.word	0x08005d70
 8005388:	0000ffff 	.word	0x0000ffff
 800538c:	00005555 	.word	0x00005555
 8005390:	0000aaaa 	.word	0x0000aaaa

08005394 <SVC_Handler>:
 8005394:	4770      	bx	lr

08005396 <PendSV_Handler>:
 8005396:	4770      	bx	lr

08005398 <SysTick_Handler>:
 8005398:	4770      	bx	lr

0800539a <RCC_IRQHandler>:

    /* USER CODE END RCC_IRQn 0 */
    /* USER CODE BEGIN RCC_IRQn 1 */

    /* USER CODE END RCC_IRQn 1 */
}
 800539a:	4770      	bx	lr

0800539c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800539c:	2280      	movs	r2, #128	; 0x80
 800539e:	4b02      	ldr	r3, [pc, #8]	; (80053a8 <SystemInit+0xc>)
 80053a0:	0512      	lsls	r2, r2, #20
 80053a2:	609a      	str	r2, [r3, #8]
#endif
}
 80053a4:	4770      	bx	lr
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	e000ed00 	.word	0xe000ed00

080053ac <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APBENR1, Periphs);
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <LL_APB1_GRP1_EnableClock+0x18>)
{
 80053ae:	b082      	sub	sp, #8
  SET_BIT(RCC->APBENR1, Periphs);
 80053b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b2:	4302      	orrs	r2, r0
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	4018      	ands	r0, r3
 80053ba:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80053bc:	9b01      	ldr	r3, [sp, #4]
}
 80053be:	b002      	add	sp, #8
 80053c0:	4770      	bx	lr
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	40021000 	.word	0x40021000

080053c8 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	b08e      	sub	sp, #56	; 0x38
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80053cc:	ae01      	add	r6, sp, #4
 80053ce:	2214      	movs	r2, #20
 80053d0:	2100      	movs	r1, #0
 80053d2:	0030      	movs	r0, r6
 80053d4:	f000 fb54 	bl	8005a80 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80053d8:	2220      	movs	r2, #32
 80053da:	2100      	movs	r1, #0
 80053dc:	a806      	add	r0, sp, #24
 80053de:	f000 fb4f 	bl	8005a80 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80053e2:	2002      	movs	r0, #2
 80053e4:	f7ff ffe2 	bl	80053ac <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 64;
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	8033      	strh	r3, [r6, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 1000;
 80053ec:	23fa      	movs	r3, #250	; 0xfa
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80053ee:	2500      	movs	r5, #0
  TIM_InitStruct.Autoreload = 1000;
 80053f0:	009b      	lsls	r3, r3, #2
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80053f2:	6075      	str	r5, [r6, #4]
  TIM_InitStruct.Autoreload = 1000;
 80053f4:	60b3      	str	r3, [r6, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80053f6:	60f5      	str	r5, [r6, #12]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80053f8:	0031      	movs	r1, r6
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80053fa:	2680      	movs	r6, #128	; 0x80
 80053fc:	4c10      	ldr	r4, [pc, #64]	; (8005440 <MX_TIM3_Init+0x78>)
 80053fe:	0020      	movs	r0, r4
 8005400:	f7fd f942 	bl	8002688 <LL_TIM_Init>
 8005404:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8005406:	4a0f      	ldr	r2, [pc, #60]	; (8005444 <MX_TIM3_Init+0x7c>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005408:	43b3      	bics	r3, r6
 800540a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800540c:	68a3      	ldr	r3, [r4, #8]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800540e:	2101      	movs	r1, #1
 8005410:	4013      	ands	r3, r2
 8005412:	60a3      	str	r3, [r4, #8]
 8005414:	aa06      	add	r2, sp, #24
 8005416:	0020      	movs	r0, r4
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8005418:	9506      	str	r5, [sp, #24]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800541a:	9507      	str	r5, [sp, #28]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800541c:	9508      	str	r5, [sp, #32]
  TIM_OC_InitStruct.CompareValue = 0;
 800541e:	9509      	str	r5, [sp, #36]	; 0x24
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005420:	950a      	str	r5, [sp, #40]	; 0x28
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005422:	f7fd f9bd 	bl	80027a0 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005426:	2204      	movs	r2, #4
 8005428:	69a3      	ldr	r3, [r4, #24]
 800542a:	4393      	bics	r3, r2
 800542c:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	326c      	adds	r2, #108	; 0x6c
 8005432:	4393      	bics	r3, r2
 8005434:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005436:	68a3      	ldr	r3, [r4, #8]
 8005438:	43b3      	bics	r3, r6
 800543a:	60a3      	str	r3, [r4, #8]
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM3);

}
 800543c:	b00e      	add	sp, #56	; 0x38
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	40000400 	.word	0x40000400
 8005444:	fffebff8 	.word	0xfffebff8

08005448 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005448:	b530      	push	{r4, r5, lr}
 800544a:	b087      	sub	sp, #28
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800544c:	ad01      	add	r5, sp, #4
 800544e:	2214      	movs	r2, #20
 8005450:	2100      	movs	r1, #0
 8005452:	0028      	movs	r0, r5
 8005454:	f000 fb14 	bl	8005a80 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8005458:	2010      	movs	r0, #16
 800545a:	f7ff ffa7 	bl	80053ac <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 64;
 800545e:	2340      	movs	r3, #64	; 0x40
 8005460:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005462:	2300      	movs	r3, #0
  TIM_InitStruct.Autoreload = 100;
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8005464:	4c0a      	ldr	r4, [pc, #40]	; (8005490 <MX_TIM6_Init+0x48>)
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005466:	606b      	str	r3, [r5, #4]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8005468:	0029      	movs	r1, r5
  TIM_InitStruct.Autoreload = 100;
 800546a:	3364      	adds	r3, #100	; 0x64
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 800546c:	0020      	movs	r0, r4
  TIM_InitStruct.Autoreload = 100;
 800546e:	60ab      	str	r3, [r5, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8005470:	f7fd f90a 	bl	8002688 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005474:	2280      	movs	r2, #128	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005476:	2170      	movs	r1, #112	; 0x70
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	4393      	bics	r3, r2
 800547c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800547e:	6863      	ldr	r3, [r4, #4]
 8005480:	438b      	bics	r3, r1
 8005482:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005484:	68a3      	ldr	r3, [r4, #8]
 8005486:	4393      	bics	r3, r2
 8005488:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM6);
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM6);

}
 800548a:	b007      	add	sp, #28
 800548c:	bd30      	pop	{r4, r5, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	40001000 	.word	0x40001000

08005494 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005494:	b530      	push	{r4, r5, lr}
 8005496:	b087      	sub	sp, #28
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005498:	ad01      	add	r5, sp, #4
 800549a:	2214      	movs	r2, #20
 800549c:	2100      	movs	r1, #0
 800549e:	0028      	movs	r0, r5
 80054a0:	f000 faee 	bl	8005a80 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80054a4:	2020      	movs	r0, #32
 80054a6:	f7ff ff81 	bl	80053ac <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 16;
 80054aa:	2310      	movs	r3, #16
 80054ac:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80054ae:	2300      	movs	r3, #0
  TIM_InitStruct.Autoreload = 256;
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80054b0:	4c0a      	ldr	r4, [pc, #40]	; (80054dc <MX_TIM7_Init+0x48>)
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80054b2:	606b      	str	r3, [r5, #4]
  TIM_InitStruct.Autoreload = 256;
 80054b4:	3301      	adds	r3, #1
 80054b6:	33ff      	adds	r3, #255	; 0xff
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80054b8:	0029      	movs	r1, r5
 80054ba:	0020      	movs	r0, r4
  TIM_InitStruct.Autoreload = 256;
 80054bc:	60ab      	str	r3, [r5, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80054be:	f7fd f8e3 	bl	8002688 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80054c2:	2280      	movs	r2, #128	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80054c4:	2170      	movs	r1, #112	; 0x70
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	4393      	bics	r3, r2
 80054ca:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	438b      	bics	r3, r1
 80054d0:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80054d2:	68a3      	ldr	r3, [r4, #8]
 80054d4:	4393      	bics	r3, r2
 80054d6:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM7);
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM7);

}
 80054d8:	b007      	add	sp, #28
 80054da:	bd30      	pop	{r4, r5, pc}
 80054dc:	40001400 	.word	0x40001400

080054e0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80054e0:	b530      	push	{r4, r5, lr}
 80054e2:	b08f      	sub	sp, #60	; 0x3c
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80054e4:	ad01      	add	r5, sp, #4
 80054e6:	2214      	movs	r2, #20
 80054e8:	2100      	movs	r1, #0
 80054ea:	0028      	movs	r0, r5
 80054ec:	f000 fac8 	bl	8005a80 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80054f0:	2220      	movs	r2, #32
 80054f2:	2100      	movs	r1, #0
 80054f4:	a806      	add	r0, sp, #24
 80054f6:	f000 fac3 	bl	8005a80 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 80054fa:	2080      	movs	r0, #128	; 0x80
 80054fc:	4a13      	ldr	r2, [pc, #76]	; (800554c <MX_TIM14_Init+0x6c>)
 80054fe:	0200      	lsls	r0, r0, #8
 8005500:	6c11      	ldr	r1, [r2, #64]	; 0x40

  TIM_InitStruct.Prescaler = 64;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 1000;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8005502:	4c13      	ldr	r4, [pc, #76]	; (8005550 <MX_TIM14_Init+0x70>)
 8005504:	4301      	orrs	r1, r0
 8005506:	6411      	str	r1, [r2, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8005508:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800550a:	0029      	movs	r1, r5
 800550c:	4003      	ands	r3, r0
 800550e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005510:	9b00      	ldr	r3, [sp, #0]
  TIM_InitStruct.Prescaler = 64;
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.Autoreload = 1000;
 8005516:	23fa      	movs	r3, #250	; 0xfa
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8005518:	0020      	movs	r0, r4
  TIM_InitStruct.Autoreload = 1000;
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	60ab      	str	r3, [r5, #8]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 800551e:	f7fd f8b3 	bl	8002688 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005522:	2280      	movs	r2, #128	; 0x80
 8005524:	6823      	ldr	r3, [r4, #0]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005526:	2101      	movs	r1, #1
 8005528:	4393      	bics	r3, r2
 800552a:	6023      	str	r3, [r4, #0]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800552c:	2300      	movs	r3, #0
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800552e:	aa06      	add	r2, sp, #24
 8005530:	0020      	movs	r0, r4
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8005532:	9306      	str	r3, [sp, #24]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005534:	9307      	str	r3, [sp, #28]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005536:	9308      	str	r3, [sp, #32]
  TIM_OC_InitStruct.CompareValue = 0;
 8005538:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800553a:	930a      	str	r3, [sp, #40]	; 0x28
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800553c:	f7fd f930 	bl	80027a0 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005540:	2204      	movs	r2, #4
 8005542:	69a3      	ldr	r3, [r4, #24]
 8005544:	4393      	bics	r3, r2
 8005546:	61a3      	str	r3, [r4, #24]
  LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);

}
 8005548:	b00f      	add	sp, #60	; 0x3c
 800554a:	bd30      	pop	{r4, r5, pc}
 800554c:	40021000 	.word	0x40021000
 8005550:	40002000 	.word	0x40002000

08005554 <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APBENR1, Periphs);
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <LL_APB1_GRP1_EnableClock+0x18>)
{
 8005556:	b082      	sub	sp, #8
  SET_BIT(RCC->APBENR1, Periphs);
 8005558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555a:	4302      	orrs	r2, r0
 800555c:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	4018      	ands	r0, r3
 8005562:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8005564:	9b01      	ldr	r3, [sp, #4]
}
 8005566:	b002      	add	sp, #8
 8005568:	4770      	bx	lr
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	40021000 	.word	0x40021000

08005570 <LL_IOP_GRP1_EnableClock>:
  SET_BIT(RCC->IOPENR, Periphs);
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <LL_IOP_GRP1_EnableClock+0x18>)
{
 8005572:	b082      	sub	sp, #8
  SET_BIT(RCC->IOPENR, Periphs);
 8005574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005576:	4302      	orrs	r2, r0
 8005578:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800557a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557c:	4018      	ands	r0, r3
 800557e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8005580:	9b01      	ldr	r3, [sp, #4]
}
 8005582:	b002      	add	sp, #8
 8005584:	4770      	bx	lr
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	40021000 	.word	0x40021000

0800558c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	b091      	sub	sp, #68	; 0x44
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005590:	2220      	movs	r2, #32
 8005592:	2100      	movs	r1, #0
 8005594:	a808      	add	r0, sp, #32
 8005596:	f000 fa73 	bl	8005a80 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559a:	2218      	movs	r2, #24
 800559c:	2100      	movs	r1, #0
 800559e:	a802      	add	r0, sp, #8
 80055a0:	f000 fa6e 	bl	8005a80 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 80055a4:	2080      	movs	r0, #128	; 0x80
 80055a6:	4a27      	ldr	r2, [pc, #156]	; (8005644 <MX_USART1_UART_Init+0xb8>)
 80055a8:	01c0      	lsls	r0, r0, #7
 80055aa:	6c11      	ldr	r1, [r2, #64]	; 0x40
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80055ac:	2400      	movs	r4, #0
 80055ae:	4301      	orrs	r1, r0
 80055b0:	6411      	str	r1, [r2, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80055b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80055b4:	2702      	movs	r7, #2
 80055b6:	4003      	ands	r3, r0
 80055b8:	9301      	str	r3, [sp, #4]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80055ba:	2002      	movs	r0, #2
  (void)tmpreg;
 80055bc:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80055be:	2501      	movs	r5, #1
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80055c0:	f7ff ffd6 	bl	8005570 <LL_IOP_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80055c4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055c6:	4e20      	ldr	r6, [pc, #128]	; (8005648 <MX_USART1_UART_Init+0xbc>)
 80055c8:	a902      	add	r1, sp, #8
 80055ca:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80055cc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80055ce:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80055d0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80055d2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80055d4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80055d6:	9703      	str	r7, [sp, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d8:	f7fc fe20 	bl	800221c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80055dc:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055de:	a902      	add	r1, sp, #8
 80055e0:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80055e2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80055e4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80055e6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80055e8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80055ea:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80055ec:	9703      	str	r7, [sp, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ee:	f7fc fe15 	bl	800221c <LL_GPIO_Init>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
  USART_InitStruct.BaudRate = 115200;
 80055f2:	23e1      	movs	r3, #225	; 0xe1
 80055f4:	025b      	lsls	r3, r3, #9
 80055f6:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80055f8:	230c      	movs	r3, #12
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80055fa:	9408      	str	r4, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80055fc:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80055fe:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005600:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005602:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005604:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8005606:	4c11      	ldr	r4, [pc, #68]	; (800564c <MX_USART1_UART_Init+0xc0>)
 8005608:	a908      	add	r1, sp, #32
 800560a:	0020      	movs	r0, r4
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800560c:	930d      	str	r3, [sp, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800560e:	f7fd fcb1 	bl	8002f74 <LL_USART_Init>
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005612:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8005614:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <MX_USART1_UART_Init+0xc4>)
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	08db      	lsrs	r3, r3, #3
 800561a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800561c:	68a3      	ldr	r3, [r4, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	4a0b      	ldr	r2, [pc, #44]	; (8005654 <MX_USART1_UART_Init+0xc8>)
 8005626:	4013      	ands	r3, r2
 8005628:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800562a:	6863      	ldr	r3, [r4, #4]
 800562c:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <MX_USART1_UART_Init+0xcc>)
 800562e:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005630:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005632:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005634:	68a3      	ldr	r3, [r4, #8]
 8005636:	4393      	bics	r3, r2
 8005638:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	431d      	orrs	r5, r3
 800563e:	6025      	str	r5, [r4, #0]
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
  LL_USART_DisableFIFO(USART1);
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 8005640:	b011      	add	sp, #68	; 0x44
 8005642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005644:	40021000 	.word	0x40021000
 8005648:	50000400 	.word	0x50000400
 800564c:	40013800 	.word	0x40013800
 8005650:	f1ffffff 	.word	0xf1ffffff
 8005654:	dfffffff 	.word	0xdfffffff
 8005658:	ffffb7ff 	.word	0xffffb7ff

0800565c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800565c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565e:	b08f      	sub	sp, #60	; 0x3c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005660:	2220      	movs	r2, #32
 8005662:	2100      	movs	r1, #0
 8005664:	a806      	add	r0, sp, #24
 8005666:	f000 fa0b 	bl	8005a80 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800566a:	2218      	movs	r2, #24
 800566c:	2100      	movs	r1, #0
 800566e:	4668      	mov	r0, sp
 8005670:	f000 fa06 	bl	8005a80 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8005674:	2080      	movs	r0, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005676:	26a0      	movs	r6, #160	; 0xa0
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8005678:	0280      	lsls	r0, r0, #10
 800567a:	f7ff ff6b 	bl	8005554 <LL_APB1_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800567e:	2001      	movs	r0, #1
 8005680:	f7ff ff76 	bl	8005570 <LL_IOP_GRP1_EnableClock>
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005684:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005686:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005688:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800568a:	2702      	movs	r7, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800568c:	05f6      	lsls	r6, r6, #23
 800568e:	4669      	mov	r1, sp
 8005690:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005692:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005694:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005696:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005698:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800569a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800569c:	9701      	str	r7, [sp, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800569e:	f7fc fdbd 	bl	800221c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80056a2:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056a4:	4669      	mov	r1, sp
 80056a6:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80056a8:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80056aa:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80056ac:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80056ae:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80056b0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80056b2:	9701      	str	r7, [sp, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b4:	f7fc fdb2 	bl	800221c <LL_GPIO_Init>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
  USART_InitStruct.BaudRate = 115200;
 80056b8:	23e1      	movs	r3, #225	; 0xe1
 80056ba:	025b      	lsls	r3, r3, #9
 80056bc:	9307      	str	r3, [sp, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80056be:	230c      	movs	r3, #12
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80056c0:	9406      	str	r4, [sp, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80056c2:	9408      	str	r4, [sp, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80056c4:	9409      	str	r4, [sp, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80056c6:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80056c8:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80056ca:	940d      	str	r4, [sp, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80056cc:	4c0f      	ldr	r4, [pc, #60]	; (800570c <MX_USART2_UART_Init+0xb0>)
 80056ce:	a906      	add	r1, sp, #24
 80056d0:	0020      	movs	r0, r4
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80056d2:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80056d4:	f7fd fc4e 	bl	8002f74 <LL_USART_Init>
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80056d8:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80056da:	4a0d      	ldr	r2, [pc, #52]	; (8005710 <MX_USART2_UART_Init+0xb4>)
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	08db      	lsrs	r3, r3, #3
 80056e0:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80056e2:	68a3      	ldr	r3, [r4, #8]
 80056e4:	4013      	ands	r3, r2
 80056e6:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	4a0a      	ldr	r2, [pc, #40]	; (8005714 <MX_USART2_UART_Init+0xb8>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	4a09      	ldr	r2, [pc, #36]	; (8005718 <MX_USART2_UART_Init+0xbc>)
 80056f4:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80056f6:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f8:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80056fa:	68a3      	ldr	r3, [r4, #8]
 80056fc:	4393      	bics	r3, r2
 80056fe:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	431d      	orrs	r5, r3
 8005704:	6025      	str	r5, [r4, #0]
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
  LL_USART_DisableFIFO(USART2);
  LL_USART_ConfigAsyncMode(USART2);
  LL_USART_Enable(USART2);

}
 8005706:	b00f      	add	sp, #60	; 0x3c
 8005708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	40004400 	.word	0x40004400
 8005710:	f1ffffff 	.word	0xf1ffffff
 8005714:	dfffffff 	.word	0xdfffffff
 8005718:	ffffb7ff 	.word	0xffffb7ff

0800571c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800571c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800571e:	b08f      	sub	sp, #60	; 0x3c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005720:	2220      	movs	r2, #32
 8005722:	2100      	movs	r1, #0
 8005724:	a806      	add	r0, sp, #24
 8005726:	f000 f9ab 	bl	8005a80 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800572a:	2218      	movs	r2, #24
 800572c:	2100      	movs	r1, #0
 800572e:	4668      	mov	r0, sp
 8005730:	f000 f9a6 	bl	8005a80 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8005734:	2080      	movs	r0, #128	; 0x80
 8005736:	02c0      	lsls	r0, r0, #11
 8005738:	f7ff ff0c 	bl	8005554 <LL_APB1_GRP1_EnableClock>
  
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800573c:	2002      	movs	r0, #2
 800573e:	f7ff ff17 	bl	8005570 <LL_IOP_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	00db      	lsls	r3, r3, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005746:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8005748:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800574a:	2702      	movs	r7, #2
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800574c:	2501      	movs	r5, #1
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800574e:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005750:	4e1f      	ldr	r6, [pc, #124]	; (80057d0 <MX_USART3_UART_Init+0xb4>)
 8005752:	4669      	mov	r1, sp
 8005754:	0030      	movs	r0, r6
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005756:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005758:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800575a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800575c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800575e:	9701      	str	r7, [sp, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005760:	f7fc fd5c 	bl	800221c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800576a:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800576c:	4669      	mov	r1, sp
 800576e:	0030      	movs	r0, r6
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005770:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005772:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005774:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8005776:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005778:	9701      	str	r7, [sp, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800577a:	f7fc fd4f 	bl	800221c <LL_GPIO_Init>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
  USART_InitStruct.BaudRate = 115200;
 800577e:	23e1      	movs	r3, #225	; 0xe1
 8005780:	025b      	lsls	r3, r3, #9
 8005782:	9307      	str	r3, [sp, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005784:	230c      	movs	r3, #12
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005786:	9406      	str	r4, [sp, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005788:	9408      	str	r4, [sp, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800578a:	9409      	str	r4, [sp, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800578c:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800578e:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005790:	940d      	str	r4, [sp, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8005792:	4c10      	ldr	r4, [pc, #64]	; (80057d4 <MX_USART3_UART_Init+0xb8>)
 8005794:	a906      	add	r1, sp, #24
 8005796:	0020      	movs	r0, r4
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005798:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 800579a:	f7fd fbeb 	bl	8002f74 <LL_USART_Init>
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800579e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80057a0:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <MX_USART3_UART_Init+0xbc>)
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80057a8:	68a3      	ldr	r3, [r4, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <MX_USART3_UART_Init+0xc0>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <MX_USART3_UART_Init+0xc4>)
 80057ba:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80057bc:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057be:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80057c0:	68a3      	ldr	r3, [r4, #8]
 80057c2:	4393      	bics	r3, r2
 80057c4:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	431d      	orrs	r5, r3
 80057ca:	6025      	str	r5, [r4, #0]
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
  LL_USART_DisableFIFO(USART3);
  LL_USART_ConfigAsyncMode(USART3);
  LL_USART_Enable(USART3);

}
 80057cc:	b00f      	add	sp, #60	; 0x3c
 80057ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d0:	50000400 	.word	0x50000400
 80057d4:	40004800 	.word	0x40004800
 80057d8:	f1ffffff 	.word	0xf1ffffff
 80057dc:	dfffffff 	.word	0xdfffffff
 80057e0:	ffffb7ff 	.word	0xffffb7ff

080057e4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80057e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e6:	b08f      	sub	sp, #60	; 0x3c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80057e8:	2220      	movs	r2, #32
 80057ea:	2100      	movs	r1, #0
 80057ec:	a806      	add	r0, sp, #24
 80057ee:	f000 f947 	bl	8005a80 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f2:	2218      	movs	r2, #24
 80057f4:	2100      	movs	r1, #0
 80057f6:	4668      	mov	r0, sp
 80057f8:	f000 f942 	bl	8005a80 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART4);
 80057fc:	2080      	movs	r0, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057fe:	27a0      	movs	r7, #160	; 0xa0
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART4);
 8005800:	0300      	lsls	r0, r0, #12
 8005802:	f7ff fea7 	bl	8005554 <LL_APB1_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8005806:	2001      	movs	r0, #1
 8005808:	f7ff feb2 	bl	8005570 <LL_IOP_GRP1_EnableClock>
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800580c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800580e:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005810:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8005812:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005814:	05ff      	lsls	r7, r7, #23
 8005816:	4669      	mov	r1, sp
 8005818:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800581a:	9500      	str	r5, [sp, #0]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800581c:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800581e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005820:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8005822:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005824:	9601      	str	r6, [sp, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005826:	f7fc fcf9 	bl	800221c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800582a:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800582c:	4669      	mov	r1, sp
 800582e:	0038      	movs	r0, r7
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005830:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005832:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005834:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8005836:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8005838:	9600      	str	r6, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800583a:	9601      	str	r6, [sp, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800583c:	f7fc fcee 	bl	800221c <LL_GPIO_Init>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
  USART_InitStruct.BaudRate = 115200;
 8005840:	23e1      	movs	r3, #225	; 0xe1
 8005842:	025b      	lsls	r3, r3, #9
 8005844:	9307      	str	r3, [sp, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005846:	230c      	movs	r3, #12
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005848:	9406      	str	r4, [sp, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800584a:	9408      	str	r4, [sp, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800584c:	9409      	str	r4, [sp, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800584e:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005850:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005852:	940d      	str	r4, [sp, #52]	; 0x34
  LL_USART_Init(USART4, &USART_InitStruct);
 8005854:	4c09      	ldr	r4, [pc, #36]	; (800587c <MX_USART4_UART_Init+0x98>)
 8005856:	a906      	add	r1, sp, #24
 8005858:	0020      	movs	r0, r4
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800585a:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_USART_Init(USART4, &USART_InitStruct);
 800585c:	f7fd fb8a 	bl	8002f74 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	4a07      	ldr	r2, [pc, #28]	; (8005880 <MX_USART4_UART_Init+0x9c>)
 8005864:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005866:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005868:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	4393      	bics	r3, r2
 800586e:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	431d      	orrs	r5, r3
 8005874:	6025      	str	r5, [r4, #0]
  //LL_USART_SetRXFIFOThreshold(USART4, LL_USART_FIFOTHRESHOLD_1_8);
  //LL_USART_DisableFIFO(USART4);
  LL_USART_ConfigAsyncMode(USART4);
  LL_USART_Enable(USART4);

}
 8005876:	b00f      	add	sp, #60	; 0x3c
 8005878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	40004c00 	.word	0x40004c00
 8005880:	ffffb7ff 	.word	0xffffb7ff

08005884 <add_to_buffer>:

/**
 * Adds a value to the buffer in a circular fashion
 * If the buffer is full, log an error and overwrite the last value
 */
inline void add_to_buffer(Circular_buffer *buffer, CIRCULAR_BUFFER_DATA_TYPE data) {
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return (((current) + 1) & ((1 << size) - 1));
 8005886:	2601      	movs	r6, #1
 8005888:	0032      	movs	r2, r6
 800588a:	7843      	ldrb	r3, [r0, #1]
 800588c:	8845      	ldrh	r5, [r0, #2]
 800588e:	409a      	lsls	r2, r3
 8005890:	0013      	movs	r3, r2
 8005892:	19ad      	adds	r5, r5, r6
 8005894:	3b01      	subs	r3, #1
 8005896:	401d      	ands	r5, r3
    CIRCULAR_BUFFER_INDEX_TYPE newPosition = advance_cursor(
            buffer->writePosition, buffer->size);

    //Catching up to the read pointer means that the buffer has overflow
    if (newPosition == buffer->readPosition) {
 8005898:	8883      	ldrh	r3, [r0, #4]
    return (((current) + 1) & ((1 << size) - 1));
 800589a:	b2ad      	uxth	r5, r5
inline void add_to_buffer(Circular_buffer *buffer, CIRCULAR_BUFFER_DATA_TYPE data) {
 800589c:	0004      	movs	r4, r0
 800589e:	000f      	movs	r7, r1
    if (newPosition == buffer->readPosition) {
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	d10a      	bne.n	80058ba <add_to_buffer+0x36>
        log_error(EC_CIRCULAR_BUFFER_OVERFLOW, buffer->identifier);
 80058a4:	7801      	ldrb	r1, [r0, #0]
 80058a6:	2002      	movs	r0, #2
 80058a8:	f000 f88a 	bl	80059c0 <log_error>
    return (((current) + 1) & ((1 << size) - 1));
 80058ac:	7863      	ldrb	r3, [r4, #1]
 80058ae:	409e      	lsls	r6, r3
 80058b0:	88a3      	ldrh	r3, [r4, #4]
 80058b2:	3e01      	subs	r6, #1
 80058b4:	3301      	adds	r3, #1
 80058b6:	401e      	ands	r6, r3
        //On error, just push the read position, overriding old data
        buffer->readPosition = advance_cursor(buffer->readPosition,
 80058b8:	80a6      	strh	r6, [r4, #4]
                buffer->size);
    }

    buffer->buffer[buffer->writePosition] = data;
 80058ba:	8863      	ldrh	r3, [r4, #2]
 80058bc:	68a2      	ldr	r2, [r4, #8]
 80058be:	54d7      	strb	r7, [r2, r3]
    buffer->writePosition = newPosition;
 80058c0:	8065      	strh	r5, [r4, #2]
}
 80058c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080058c4 <add_to_buffer_if_not_full>:

/**
 * Add value to the buffer, if there are free space.
 * returns true on success, false if there is no space
 */
inline bool add_to_buffer_if_not_full(Circular_buffer *buffer, char data) {
 80058c4:	b570      	push	{r4, r5, r6, lr}
    return (((current) + 1) & ((1 << size) - 1));
 80058c6:	2401      	movs	r4, #1
 80058c8:	7843      	ldrb	r3, [r0, #1]
inline bool add_to_buffer_if_not_full(Circular_buffer *buffer, char data) {
 80058ca:	0002      	movs	r2, r0
    CIRCULAR_BUFFER_INDEX_TYPE newPosition = advance_cursor(
 80058cc:	8845      	ldrh	r5, [r0, #2]
    return (((current) + 1) & ((1 << size) - 1));
 80058ce:	0020      	movs	r0, r4
 80058d0:	4098      	lsls	r0, r3
 80058d2:	192b      	adds	r3, r5, r4
 80058d4:	3801      	subs	r0, #1
 80058d6:	4003      	ands	r3, r0
            buffer->writePosition, buffer->size);

    //Catching up to the read pointer means that the buffer has overflow
    if (newPosition == buffer->readPosition) {
 80058d8:	8896      	ldrh	r6, [r2, #4]
    return (((current) + 1) & ((1 << size) - 1));
 80058da:	b29b      	uxth	r3, r3
        return false;
 80058dc:	2000      	movs	r0, #0
    if (newPosition == buffer->readPosition) {
 80058de:	429e      	cmp	r6, r3
 80058e0:	d003      	beq.n	80058ea <add_to_buffer_if_not_full+0x26>
    }

    buffer->buffer[buffer->writePosition] = data;
 80058e2:	6890      	ldr	r0, [r2, #8]
 80058e4:	5541      	strb	r1, [r0, r5]
    buffer->writePosition = newPosition;
    return true;
 80058e6:	0020      	movs	r0, r4
    buffer->writePosition = newPosition;
 80058e8:	8053      	strh	r3, [r2, #2]
}
 80058ea:	bd70      	pop	{r4, r5, r6, pc}

080058ec <get_from_buffer>:
    return (((current) + 1) & ((1 << size) - 1));
 80058ec:	2301      	movs	r3, #1
 80058ee:	7842      	ldrb	r2, [r0, #1]

/**
 * gets a value from the buffer in a circular fashion, advances the position of the cursor
 * result is the output value, leaves the current value in the buffer
 */
inline void get_from_buffer(Circular_buffer *buffer, Buffer_read_result* result) {
 80058f0:	b530      	push	{r4, r5, lr}
    return (((current) + 1) & ((1 << size) - 1));
 80058f2:	4093      	lsls	r3, r2
 80058f4:	1e5a      	subs	r2, r3, #1
 80058f6:	8883      	ldrh	r3, [r0, #4]
 80058f8:	3301      	adds	r3, #1
 80058fa:	4013      	ands	r3, r2
    CIRCULAR_BUFFER_INDEX_TYPE index = advance_cursor(buffer->readPosition,
            buffer->size);
    result->data = buffer->buffer[index];
 80058fc:	6882      	ldr	r2, [r0, #8]
    return (((current) + 1) & ((1 << size) - 1));
 80058fe:	b29b      	uxth	r3, r3
    result->data = buffer->buffer[index];
 8005900:	5cd2      	ldrb	r2, [r2, r3]
 8005902:	700a      	strb	r2, [r1, #0]
    //This means that there are pending bytes
    result->readSuccess = index != buffer->writePosition;
 8005904:	8844      	ldrh	r4, [r0, #2]
 8005906:	1ae2      	subs	r2, r4, r3
 8005908:	1e55      	subs	r5, r2, #1
 800590a:	41aa      	sbcs	r2, r5
 800590c:	704a      	strb	r2, [r1, #1]
    if (result->readSuccess) {
 800590e:	429c      	cmp	r4, r3
 8005910:	d000      	beq.n	8005914 <get_from_buffer+0x28>
        buffer->readPosition = index;
 8005912:	8083      	strh	r3, [r0, #4]
    }
}
 8005914:	bd30      	pop	{r4, r5, pc}

08005916 <counter_inc>:
            counter->data -= data;
        }
    }
}

inline void counter_inc(Counter * counter) {
 8005916:	b510      	push	{r4, lr}
    if (counter->cofb == OFB_SATURATE) {
 8005918:	7903      	ldrb	r3, [r0, #4]
inline void counter_inc(Counter * counter) {
 800591a:	0004      	movs	r4, r0
    if (counter->cofb == OFB_SATURATE) {
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <counter_inc+0x16>
        counter->data = saturate_inc(counter->data, counter->data_max);
 8005920:	6801      	ldr	r1, [r0, #0]
 8005922:	6880      	ldr	r0, [r0, #8]
 8005924:	f000 f854 	bl	80059d0 <saturate_inc>
 8005928:	60a0      	str	r0, [r4, #8]
            counter->data = 0;
        } else {
            counter->data += 1;
        }
    }
}
 800592a:	bd10      	pop	{r4, pc}
        if (counter->data == counter->data_max) {
 800592c:	6883      	ldr	r3, [r0, #8]
 800592e:	6802      	ldr	r2, [r0, #0]
 8005930:	4293      	cmp	r3, r2
 8005932:	d102      	bne.n	800593a <counter_inc+0x24>
            counter->data = 0;
 8005934:	2300      	movs	r3, #0
            counter->data += 1;
 8005936:	60a3      	str	r3, [r4, #8]
}
 8005938:	e7f7      	b.n	800592a <counter_inc+0x14>
            counter->data += 1;
 800593a:	3301      	adds	r3, #1
 800593c:	e7fb      	b.n	8005936 <counter_inc+0x20>

0800593e <counter_dec>:

inline void counter_dec(Counter * counter) {
 800593e:	b510      	push	{r4, lr}
    if (counter->cofb == OFB_SATURATE) {
 8005940:	7903      	ldrb	r3, [r0, #4]
inline void counter_dec(Counter * counter) {
 8005942:	0004      	movs	r4, r0
    if (counter->cofb == OFB_SATURATE) {
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <counter_dec+0x14>
        counter->data = saturate_dec(counter->data);
 8005948:	6880      	ldr	r0, [r0, #8]
 800594a:	f000 f846 	bl	80059da <saturate_dec>
 800594e:	60a0      	str	r0, [r4, #8]
            counter->data = counter->data_max;
        } else {
            counter->data -= 1;
        }
    }
}
 8005950:	bd10      	pop	{r4, pc}
        if (!counter->data) {
 8005952:	6883      	ldr	r3, [r0, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <counter_dec+0x20>
            counter->data = counter->data_max;
 8005958:	6803      	ldr	r3, [r0, #0]
            counter->data -= 1;
 800595a:	60a3      	str	r3, [r4, #8]
}
 800595c:	e7f8      	b.n	8005950 <counter_dec+0x12>
            counter->data -= 1;
 800595e:	3b01      	subs	r3, #1
 8005960:	e7fb      	b.n	800595a <counter_dec+0x1c>

08005962 <counter_set>:

inline void counter_set(u32 data, Counter * counter) {
    if (data > counter->data_max) {
 8005962:	680b      	ldr	r3, [r1, #0]
 8005964:	4283      	cmp	r3, r0
 8005966:	d201      	bcs.n	800596c <counter_set+0xa>
        counter->data = counter->data_max;
 8005968:	608b      	str	r3, [r1, #8]
    } else {
        counter->data = data;
    }
}
 800596a:	4770      	bx	lr
        counter->data = data;
 800596c:	6088      	str	r0, [r1, #8]
}
 800596e:	e7fc      	b.n	800596a <counter_set+0x8>

08005970 <log_error_direct>:
Error error_log[ERROR_LOG_SIZE] ={};
/**
 * This function requires a stack allocated struct, this will be copied to the appropriate location
 * The user does not need to dynamically allocate memory for this.
 */
void log_error_direct(Error error) {
 8005970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005972:	aa01      	add	r2, sp, #4
 8005974:	8010      	strh	r0, [r2, #0]
 8005976:	2200      	movs	r2, #0
    for (unsigned int i = 0; i < ERROR_LOG_SIZE; i++) {
        Error* lastError = &error_log[i];
        char lastCode = lastError->error_code;
        char lastIdentifier = lastError->identifier;
        if (lastCode == error.error_code && lastIdentifier == error.identifier) {
            errorAlreadyLogged = true;
 8005978:	2401      	movs	r4, #1
    bool errorAlreadyLogged = false;
 800597a:	0015      	movs	r5, r2
void log_error_direct(Error error) {
 800597c:	b281      	uxth	r1, r0
        char lastIdentifier = lastError->identifier;
 800597e:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <log_error_direct+0x48>)
 8005980:	b2c0      	uxtb	r0, r0
 8005982:	0a09      	lsrs	r1, r1, #8
        if (lastCode == error.error_code && lastIdentifier == error.identifier) {
 8005984:	5cd7      	ldrb	r7, [r2, r3]
        char lastIdentifier = lastError->identifier;
 8005986:	189e      	adds	r6, r3, r2
 8005988:	7876      	ldrb	r6, [r6, #1]
        if (lastCode == error.error_code && lastIdentifier == error.identifier) {
 800598a:	4287      	cmp	r7, r0
 800598c:	d102      	bne.n	8005994 <log_error_direct+0x24>
 800598e:	42b1      	cmp	r1, r6
 8005990:	d100      	bne.n	8005994 <log_error_direct+0x24>
            errorAlreadyLogged = true;
 8005992:	0025      	movs	r5, r4
 8005994:	3202      	adds	r2, #2
    for (unsigned int i = 0; i < ERROR_LOG_SIZE; i++) {
 8005996:	2a20      	cmp	r2, #32
 8005998:	d1f4      	bne.n	8005984 <log_error_direct+0x14>
 800599a:	4c08      	ldr	r4, [pc, #32]	; (80059bc <log_error_direct+0x4c>)
        }
    }
    if (!errorAlreadyLogged && error_count < ERROR_LOG_SIZE) {
 800599c:	2d00      	cmp	r5, #0
 800599e:	d106      	bne.n	80059ae <log_error_direct+0x3e>
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	2a0f      	cmp	r2, #15
 80059a4:	d803      	bhi.n	80059ae <log_error_direct+0x3e>
        //Copy error from stack to a known location
        error_log[error_count].error_code = error.error_code;
 80059a6:	0052      	lsls	r2, r2, #1
 80059a8:	5498      	strb	r0, [r3, r2]
        error_log[error_count].identifier= error.identifier;
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	7059      	strb	r1, [r3, #1]
    }

    error_count++;
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	6023      	str	r3, [r4, #0]

}
 80059b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	200006d2 	.word	0x200006d2
 80059bc:	200006f4 	.word	0x200006f4

080059c0 <log_error>:

void log_error(Error_codes errorCode, char identifier) {
 80059c0:	b507      	push	{r0, r1, r2, lr}
    Error error = { errorCode, identifier };
 80059c2:	ab01      	add	r3, sp, #4
 80059c4:	7018      	strb	r0, [r3, #0]
 80059c6:	7059      	strb	r1, [r3, #1]
    log_error_direct(error);
 80059c8:	9801      	ldr	r0, [sp, #4]
 80059ca:	f7ff ffd1 	bl	8005970 <log_error_direct>
}
 80059ce:	bd07      	pop	{r0, r1, r2, pc}

080059d0 <saturate_inc>:
    return (u32) result;

}

inline u32 saturate_inc(u32 data, u32 max) {
    if (data < max) return data + 1;
 80059d0:	4288      	cmp	r0, r1
 80059d2:	d200      	bcs.n	80059d6 <saturate_inc+0x6>
 80059d4:	1c41      	adds	r1, r0, #1
    return max;
}
 80059d6:	0008      	movs	r0, r1
 80059d8:	4770      	bx	lr

080059da <saturate_dec>:

inline u32 saturate_dec(u32 data) {
    if (data) return data - 1;
 80059da:	0003      	movs	r3, r0
 80059dc:	1e5a      	subs	r2, r3, #1
 80059de:	4193      	sbcs	r3, r2
 80059e0:	1ac0      	subs	r0, r0, r3
    return 0;
}
 80059e2:	4770      	bx	lr

080059e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059e4:	480d      	ldr	r0, [pc, #52]	; (8005a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80059e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80059ea:	e003      	b.n	80059f4 <LoopCopyDataInit>

080059ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80059ec:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80059ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80059f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80059f2:	3104      	adds	r1, #4

080059f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80059f4:	480b      	ldr	r0, [pc, #44]	; (8005a24 <LoopForever+0xa>)
  ldr r3, =_edata
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <LoopForever+0xe>)
  adds r2, r0, r1
 80059f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80059fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80059fc:	d3f6      	bcc.n	80059ec <CopyDataInit>
  ldr r2, =_sbss
 80059fe:	4a0b      	ldr	r2, [pc, #44]	; (8005a2c <LoopForever+0x12>)
  b LoopFillZerobss
 8005a00:	e002      	b.n	8005a08 <LoopFillZerobss>

08005a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005a02:	2300      	movs	r3, #0
  str  r3, [r2]
 8005a04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a06:	3204      	adds	r2, #4

08005a08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005a08:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <LoopForever+0x16>)
  cmp r2, r3
 8005a0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005a0c:	d3f9      	bcc.n	8005a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005a0e:	f7ff fcc5 	bl	800539c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005a12:	f000 f811 	bl	8005a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a16:	f7fe fcdd 	bl	80043d4 <main>

08005a1a <LoopForever>:

LoopForever:
    b LoopForever
 8005a1a:	e7fe      	b.n	8005a1a <LoopForever>
  ldr   r0, =_estack
 8005a1c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8005a20:	08009e04 	.word	0x08009e04
  ldr r0, =_sdata
 8005a24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005a28:	2000028c 	.word	0x2000028c
  ldr r2, =_sbss
 8005a2c:	20000290 	.word	0x20000290
  ldr r3, = _ebss
 8005a30:	20000904 	.word	0x20000904

08005a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a34:	e7fe      	b.n	8005a34 <ADC1_IRQHandler>
	...

08005a38 <__libc_init_array>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	4d0c      	ldr	r5, [pc, #48]	; (8005a70 <__libc_init_array+0x38>)
 8005a3e:	4c0d      	ldr	r4, [pc, #52]	; (8005a74 <__libc_init_array+0x3c>)
 8005a40:	1b64      	subs	r4, r4, r5
 8005a42:	10a4      	asrs	r4, r4, #2
 8005a44:	42a6      	cmp	r6, r4
 8005a46:	d109      	bne.n	8005a5c <__libc_init_array+0x24>
 8005a48:	2600      	movs	r6, #0
 8005a4a:	f000 f821 	bl	8005a90 <_init>
 8005a4e:	4d0a      	ldr	r5, [pc, #40]	; (8005a78 <__libc_init_array+0x40>)
 8005a50:	4c0a      	ldr	r4, [pc, #40]	; (8005a7c <__libc_init_array+0x44>)
 8005a52:	1b64      	subs	r4, r4, r5
 8005a54:	10a4      	asrs	r4, r4, #2
 8005a56:	42a6      	cmp	r6, r4
 8005a58:	d105      	bne.n	8005a66 <__libc_init_array+0x2e>
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
 8005a5c:	00b3      	lsls	r3, r6, #2
 8005a5e:	58eb      	ldr	r3, [r5, r3]
 8005a60:	4798      	blx	r3
 8005a62:	3601      	adds	r6, #1
 8005a64:	e7ee      	b.n	8005a44 <__libc_init_array+0xc>
 8005a66:	00b3      	lsls	r3, r6, #2
 8005a68:	58eb      	ldr	r3, [r5, r3]
 8005a6a:	4798      	blx	r3
 8005a6c:	3601      	adds	r6, #1
 8005a6e:	e7f2      	b.n	8005a56 <__libc_init_array+0x1e>
 8005a70:	08009dfc 	.word	0x08009dfc
 8005a74:	08009dfc 	.word	0x08009dfc
 8005a78:	08009dfc 	.word	0x08009dfc
 8005a7c:	08009e00 	.word	0x08009e00

08005a80 <memset>:
 8005a80:	0003      	movs	r3, r0
 8005a82:	1882      	adds	r2, r0, r2
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d100      	bne.n	8005a8a <memset+0xa>
 8005a88:	4770      	bx	lr
 8005a8a:	7019      	strb	r1, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	e7f9      	b.n	8005a84 <memset+0x4>

08005a90 <_init>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr

08005a9c <_fini>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr
